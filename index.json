
[{"content":" 十进制 八进制 十六进制 二进制 符号 HTML 中文解释 DEC OCT HEX BIN Symbol 实体编码 Description 前128个称为基本ASCII码，从二进制角度来看，它们的最高位bit[7]=0，只使用了低7位bit[6,0]来进行编码。 0~31 之间的ASCII码常用于控制像打印机一样的外围设备。 0 0 0 0 NUL 空字符 终止符 1 1 1 1 SOH 标题开始 2 2 2 10 STX 正文开始 3 3 3 11 ETX 正文结束 4 4 4 100 EOT 传输结束 5 5 5 101 ENQ 询问 6 6 6 110 ACK 收到通知 7 7 7 111 BEL 铃 8 10 8 1000 BS 退格 9 11 9 1001 HT 水平制表符 10 12 0A 1010 LF 换行符 \\n 11 13 0B 1011 VT 垂直制表符 12 14 0C 1100 FF 换页符 13 15 0D 1101 CR 回车符 \\r 14 16 0E 1110 SO 移出 15 17 0F 1111 SI 移入 16 20 10 10000 DLE 数据链路转义 17 21 11 10001 DC1 设备控制 1 18 22 12 10010 DC2 设备控制 2 19 23 13 10011 DC3 设备控制 3 20 24 14 10100 DC4 设备控制 4 21 25 15 10101 NAK 拒绝接收 22 26 16 10110 SYN 同步空闲 23 27 17 10111 ETB 传输块结束 24 30 18 11000 CAN 取消 25 31 19 11001 EM 介质中断 26 32 1A 11010 SUB 替换 27 33 1B 11011 ESC 换码符 28 34 1C 11100 FS 文件分隔符 29 35 1D 11101 GS 组分隔符 30 36 1E 11110 RS 记录分离符 31 37 1F 11111 US 单元分隔符 十进制 32~127 区间一共 127-32+1=96 个ASCII码表示的符号，在我们的键盘上都可以被找到。其中：32表示空格，127表示删除命令。 32 40 20 100000 \u0026#032; 空格 33 41 21 100001 ! \u0026#033; 感叹号 34 42 22 100010 \" \u0026#034; 双引号 35 43 23 100011 # \u0026#035; 井号 36 44 24 100100 $ \u0026#036; 美元符 37 45 25 100101 % \u0026#037; 百分号 38 46 26 100110 \u0026 \u0026#038; 与 39 47 27 100111 ' \u0026#039; 单引号 40 50 28 101000 ( \u0026#040; 左括号 41 51 29 101001 ) \u0026#041; 右括号 42 52 2A 101010 * \u0026#042; 星号 43 53 2B 101011 + \u0026#043; 加号 44 54 2C 101100 , \u0026#044; 逗号 45 55 2D 101101 - \u0026#045; 连字号或减号 46 56 2E 101110 . \u0026#046; 句点或小数点 47 57 2F 101111 / \u0026#047; 斜杠 48 60 30 110000 0 \u0026#048; 0 49 61 31 110001 1 \u0026#049; 1 50 62 32 110010 2 \u0026#050; 2 51 63 33 110011 3 \u0026#051; 3 52 64 34 110100 4 \u0026#052; 4 53 65 35 110101 5 \u0026#053; 5 54 66 36 110110 6 \u0026#054; 6 55 67 37 110111 7 \u0026#055; 7 56 70 38 111000 8 \u0026#056; 8 57 71 39 111001 9 \u0026#057; 9 58 72 3A 111010 : \u0026#058; 冒号 59 73 3B 111011 ; \u0026#059; 分号 60 74 3C 111100 \u003c \u0026#060; 小于 61 75 3D 111101 = \u0026#061; 等号 62 76 3E 111110 \u0026#062; \u0026#062; 大于 63 77 3F 111111 ? \u0026#063; 问号 64 100 40 1000000 @ \u0026#064; 电子邮件符号 65 101 41 1000001 A \u0026#065; 大写字母 A 66 102 42 1000010 B \u0026#066; 大写字母 B 67 103 43 1000011 C \u0026#067; 大写字母 C 68 104 44 1000100 D \u0026#068; 大写字母 D 69 105 45 1000101 E \u0026#069; 大写字母 E 70 106 46 1000110 F \u0026#070; 大写字母 F 71 107 47 1000111 G \u0026#071; 大写字母 G 72 110 48 1001000 H \u0026#072; 大写字母 H 73 111 49 1001001 I \u0026#073; 大写字母 I 74 112 4A 1001010 J \u0026#074; 大写字母 J 75 113 4B 1001011 K \u0026#075; 大写字母 K 76 114 4C 1001100 L \u0026#076; 大写字母 L 77 115 4D 1001101 M \u0026#077; 大写字母 M 78 116 4E 1001110 N \u0026#078; 大写字母 N 79 117 4F 1001111 O \u0026#079; 大写字母 O 80 120 50 1010000 P \u0026#080; 大写字母 P 81 121 51 1010001 Q \u0026#081; 大写字母 Q 82 122 52 1010010 R \u0026#082; 大写字母 R 83 123 53 1010011 S \u0026#083; 大写字母 S 84 124 54 1010100 T \u0026#084; 大写字母 T 85 125 55 1010101 U \u0026#085; 大写字母 U 86 126 56 1010110 V \u0026#086; 大写字母 V 87 127 57 1010111 W \u0026#087; 大写字母 W 88 130 58 1011000 X \u0026#088; 大写字母 X 89 131 59 1011001 Y \u0026#089; 大写字母 Y 90 132 5A 1011010 Z \u0026#090; 大写字母 Z 91 133 5B 1011011 [ \u0026#091; 左中括号 92 134 5C 1011100 \\ \u0026#092; 反斜杠 93 135 5D 1011101 ] \u0026#093; 右中括号 94 136 5E 1011110 ^ \u0026#094; 音调符号 95 137 5F 1011111 _ \u0026#095; 下划线 96 140 60 1100000 ` \u0026#096; 重音符 97 141 61 1100001 a \u0026#097; 小写字母 a 98 142 62 1100010 b \u0026#098; 小写字母 b 99 143 63 1100011 c \u0026#099; 小写字母 c 100 144 64 1100100 d \u0026#100; 小写字母 d 101 145 65 1100101 e \u0026#101; 小写字母 e 102 146 66 1100110 f \u0026#102; 小写字母 f 103 147 67 1100111 g \u0026#103; 小写字母 g 104 150 68 1101000 h \u0026#104; 小写字母 h 105 151 69 1101001 i \u0026#105; 小写字母 i 106 152 6A 1101010 j \u0026#106; 小写字母 j 107 153 6B 1101011 k \u0026#107; 小写字母 k 108 154 6C 1101100 l \u0026#108; 小写字母 l 109 155 6D 1101101 m \u0026#109; 小写字母 m 110 156 6E 1101110 n \u0026#110; 小写字母 n 111 157 6F 1101111 o \u0026#111; 小写字母 o 112 160 70 1110000 p \u0026#112; 小写字母 p 113 161 71 1110001 q \u0026#113; 小写字母 q 114 162 72 1110010 r \u0026#114; 小写字母 r 115 163 73 1110011 s \u0026#115; 小写字母 s 116 164 74 1110100 t \u0026#116; 小写字母 t 117 165 75 1110101 u \u0026#117; 小写字母 u 118 166 76 1110110 v \u0026#118; 小写字母 v 119 167 77 1110111 w \u0026#119; 小写字母 w 120 170 78 1111000 x \u0026#120; 小写字母 x 121 171 79 1111001 y \u0026#121; 小写字母 y 122 172 7A 1111010 z \u0026#122; 小写字母 z 123 173 7B 1111011 { \u0026#123; 左大括号 124 174 7C 1111100 | \u0026#124; 垂直线 125 175 7D 1111101 } \u0026#125; 右大括号 126 176 7E 1111110 ~ \u0026#126; 波浪号 127 177 7F 1111111 \u0026#127; 删除 扩展ASCII码 128 200 80 10000000 € \u0026#8364; 欧元符号 129 201 81 10000001 未定义 130 202 82 10000010 ‚ 单低 9 引号 131 203 83 10000011 ƒ 带钩的拉丁小写字母f 132 204 84 10000100 „ 双低 9 引号 133 205 85 10000101 … 水平省略号 134 206 86 10000110 † 剑号 135 207 87 10000111 ‡ 双剑号 136 210 88 10001000 ˆ 修正字符 抑扬音符号 137 211 89 10001001 ‰ 千分号 138 212 8A 10001010 Š 带弯音号的拉丁大写字母 S 139 213 8B 10001011 ‹ 左单书名号 140 214 8C 10001100 Œ 拉丁大写组合 OE 141 215 8D 10001101 未定义 142 216 8E 10001110 Ž 143 217 8F 10001111 未定义 144 220 90 10010000 未定义 145 221 91 10010001 ‘ 左单引号 146 222 92 10010010 ’ 左单引号 147 223 93 10010011 “ 左双引号 148 224 94 10010100 ” 右双引号 149 225 95 10010101 • 150 226 96 10010110 – 半长破折号 151 227 97 10010111 — 全长破折号 152 230 98 10011000 ˜ 小波浪线 153 231 99 10011001 ™ 154 232 9A 10011010 š 带弯音号的拉丁小写字母 s 155 233 9B 10011011 › 右单书名号 156 234 9C 10011100 œ 拉丁小写组合 oe 157 235 9D 10011101 未定义 158 236 9E 10011110 ž 带弯音号的拉丁小写字母 z 159 237 9F 10011111 Ÿ 带弯音号的拉丁大写字母 Y 160 240 A0 10100000 非间断空格 161 241 A1 10100001 ¡ \u0026#161; 倒置感叹号 162 242 A2 10100010 ¢ \u0026#162; 美分符号 163 243 A3 10100011 £ \u0026#163; 英镑符号 164 244 A4 10100100 ¤ \u0026#164; 货币符号 165 245 A5 10100101 ¥ \u0026#165; 人民币/日元符号 166 246 A6 10100110 ¦ \u0026#166; 间断的竖杠 167 247 A7 10100111 § \u0026#167; 小节号 168 250 A8 10101000 ¨ \u0026#168; 分音符号 169 251 A9 10101001 © \u0026#169; 版权所有 170 252 AA 10101010 ª \u0026#170; 阴性序数记号 171 253 AB 10101011 « \u0026#171; 左双角引号 172 254 AC 10101100 ¬ \u0026#172; 否定符号 173 255 AD 10101101 ­ \u0026#173; 软连字符 174 256 AE 10101110 ® \u0026#174; 注册商标 175 257 AF 10101111 ¯ \u0026#175; 长音符号 176 260 B0 10110000 ° \u0026#176; 度 177 261 B1 10110001 ± \u0026#177; 加减号/正负号 178 262 B2 10110010 ² \u0026#178; 上标 2 179 263 B3 10110011 ³ \u0026#179; 上标 3 180 264 B4 10110100 ´ \u0026#180; 尖音符号 181 265 B5 10110101 µ \u0026#181; 微米符号 182 266 B6 10110110 ¶ \u0026#182; 段落符号 183 267 B7 10110111 · \u0026#183; 中间点 184 270 B8 10111000 ¸ \u0026#184; 变音符号 185 271 B9 10111001 ¹ \u0026#185; 上标 1 186 272 BA 10111010 º \u0026#186; 阳性序数记号 187 273 BB 10111011 » \u0026#187; 右双角引号 188 274 BC 10111100 ¼ \u0026#188; 1/4 分数 189 275 BD 10111101 ½ \u0026#189; 1/2 分数 190 276 BE 10111110 ¾ \u0026#190; 3/4 分数 191 277 BF 10111111 ¿ \u0026#191; 倒置问号 192 300 C0 11000000 À \u0026#192; 大写字母 A，重音 193 301 C1 11000001 Á \u0026#193; 大写字母 A，尖音 194 302 C2 11000010 Â \u0026#194; 大写字母 A，抑扬音 195 303 C3 11000011 Ã \u0026#195; 大写字母 A，腭化 196 304 C4 11000100 Ä \u0026#196; 大写字母 A，带有变音符号标记 197 305 C5 11000101 Å \u0026#197; 大写字母 A，带有上圆圈 198 306 C6 11000110 Æ \u0026#198; 大写字母 AE 199 307 C7 11000111 Ç \u0026#199; 大写字母 C，变音 200 310 C8 11001000 È \u0026#200; 大写字母 E，重音 201 311 C9 11001001 É \u0026#201; 大写字母 E，尖音 202 312 CA 11001010 Ê \u0026#202; 大写字母 E，抑扬音 203 313 CB 11001011 Ë \u0026#203; 大写字母 E，带有变音符号标记 204 314 CC 11001100 Ì \u0026#204; 大写字母 I，重音 205 315 CD 11001101 Í \u0026#205; 大写字母 I，尖音 206 316 CE 11001110 Î \u0026#206; 大写字母 I，抑扬音 207 317 CF 11001111 Ï \u0026#207; 大写字母 I，带有变音符号标记 208 320 D0 11010000 Ð \u0026#208; 冰岛语大写字母 eth 209 321 D1 11010001 Ñ \u0026#209; 大写字母 N，腭化 210 322 D2 11010010 Ò \u0026#210; 大写字母 O，重音 211 323 D3 11010011 Ó \u0026#211; 大写字母 O，尖音 212 324 D4 11010100 Ô \u0026#212; 大写字母 O，抑扬音 213 325 D5 11010101 Õ \u0026#213; 大写字母 O，腭化 214 326 D6 11010110 Ö \u0026#214; 大写字母 O，带有变音符号标记 215 327 D7 11010111 × \u0026#215; 乘号 216 330 D8 11011000 Ø \u0026#216; 大写字母 O，带有斜线 217 331 D9 11011001 Ù \u0026#217; 大写字母 U，重音 218 332 DA 11011010 Ú \u0026#218; 大写字母 U，尖音 219 333 DB 11011011 Û \u0026#219; 大写字母 U，抑扬音 220 334 DC 11011100 Ü \u0026#220; 大写字母 U，带有变音符号标记 221 335 DD 11011101 Ý \u0026#221; 大写字母 Y，尖音 222 336 DE 11011110 Þ \u0026#222; 冰岛语大写字母 THORN 223 337 DF 11011111 ß \u0026#223; 德语小写字母 sharp s 224 340 E0 11100000 à \u0026#224; 小写字母 a，重音 225 341 E1 11100001 á \u0026#225; 小写字母 a，尖音 226 342 E2 11100010 â \u0026#226; 小写字母 a，抑扬音 227 343 E3 11100011 ã \u0026#227; 小写字母 a，腭化 228 344 E4 11100100 ä \u0026#228; 小写字母 a，带有变音符号标记 229 345 E5 11100101 å \u0026#229; 小写字母 a，带有上圆圈 230 346 E6 11100110 æ \u0026#230; 小写字母 ae 231 347 E7 11100111 ç \u0026#231; 小写字母 c，变音 232 350 E8 11101000 è \u0026#232; 小写字母 e，重音 233 351 E9 11101001 é \u0026#233; 小写字母 e，尖音 234 352 EA 11101010 ê \u0026#234; 小写字母 e，抑扬音 235 353 EB 11101011 ë \u0026#235; 小写字母 e，带有变音符号标记 236 354 EC 11101100 ì \u0026#236; 小写字母 i，重音 237 355 ED 11101101 í \u0026#237; 小写字母 i，尖音 238 356 EE 11101110 î \u0026#238; 小写字母 i，抑扬音 239 357 EF 11101111 ï \u0026#239; 小写字母 i，带有变音符号标记 240 360 F0 11110000 ð \u0026#240; 冰岛语小写字母 eth 241 361 F1 11110001 ñ \u0026#241; 小写字母 n，腭化 242 362 F2 11110010 ò \u0026#242; 小写字母 o，重音 243 363 F3 11110011 ó \u0026#243; 小写字母 o，尖音 244 364 F4 11110100 ô \u0026#244; 小写字母 o，抑扬音 245 365 F5 11110101 õ \u0026#245; 小写字母 o，腭化 246 366 F6 11110110 ö \u0026#246; 小写字母 o，带有变音符号标记 247 367 F7 11110111 ÷ \u0026#247; 除号 248 370 F8 11111000 ø \u0026#248; 小写字母 o，带有斜线 249 371 F9 11111001 ù \u0026#249; 小写字母 u，重音 250 372 FA 11111010 ú \u0026#250; 小写字母 u，尖音 251 373 FB 11111011 û \u0026#251; 小写字母 u，抑扬音 252 374 FC 11111100 ü \u0026#252; 小写字母 u，带有变音符号标记 253 375 FD 11111101 ý \u0026#253; 小写字母 y，尖音 254 376 FE 11111110 þ \u0026#254; 冰岛语小写字母 thorn 255 377 FF 11111111 ÿ \u0026#255; 小写字母 y，带有变音符号标记 ","date":"121236-112+08","externalUrl":null,"permalink":"/post/ascii%E8%A1%A8/","section":"文章","summary":"\u003cstyle type=\"text/css\"\u003e\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-be0w{background-color:#009688;border-color:inherit;color:#FFF;text-align:center;vertical-align:top}\n.tg .tg-ei0w{border-color:inherit;color:#666;text-align:center;vertical-align:top}\n.tg .tg-nolz{background-color:#F2F2F2;border-color:inherit;color:#666;text-align:center;vertical-align:top}\n.tg .tg-xgb2{background-color:#FEB;border-color:inherit;color:#666;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n.tg .tg-wvkc{background-color:#F9F9F9;border-color:inherit;color:#666;text-align:center;vertical-align:top}\n\u003c/style\u003e\n\u003ctable class=\"tg\"\u003e\u003cthead\u003e\n  \u003ctr\u003e\n    \u003cth class=\"tg-be0w\"\u003e十进制\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003e八进制\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003e十六进制\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003e二进制\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003e符号\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003eHTML\u003c/th\u003e\n    \u003cth class=\"tg-be0w\"\u003e中文解释\u003c/th\u003e\n  \u003c/tr\u003e\u003c/thead\u003e\n\u003ctbody\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-be0w\"\u003eDEC\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003eOCT\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003eHEX\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003eBIN\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003eSymbol\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003e实体编码\u003c/td\u003e\n    \u003ctd class=\"tg-be0w\"\u003eDescription\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-ei0w\" colspan=\"7\"\u003e前128个称为基本ASCII码，从二进制角度来看，它们的最高位bit[7]=0，只使用了低7位bit[6,0]来进行编码。\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-ei0w\" colspan=\"7\"\u003e0~31 之间的ASCII码常用于控制像打印机一样的外围设备。\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eNUL\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e空字符 终止符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSOH\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e标题开始\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSTX\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e正文开始\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eETX\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e正文结束\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEOT\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e传输结束\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eENQ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e询问\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eACK\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e收到通知\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBEL\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e铃\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBS\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e退格\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eHT\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e水平制表符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e10\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e12\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e0A\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eLF\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e换行符 \\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e13\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eVT\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e垂直制表符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e12\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e14\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e换页符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e13\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e15\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e0D\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eCR\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e回车符 \\r\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e14\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e16\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSO\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e移出\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e15\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e17\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e0F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSI\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e移入\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e16\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e20\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDLE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e数据链路转义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e17\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e21\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDC1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e设备控制 1\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e18\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e22\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e12\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDC2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e设备控制 2\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e19\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e23\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e13\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDC3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e设备控制 3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e20\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e24\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e14\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDC4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e设备控制 4\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e21\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e25\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e15\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eNAK\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e拒绝接收\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e22\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e26\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e16\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSYN\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e同步空闲\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e23\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e27\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e17\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eETB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e传输块结束\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e24\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e30\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e18\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCAN\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e取消\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e25\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e31\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e19\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEM\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e介质中断\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e26\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e32\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1A\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eSUB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e替换\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e27\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e33\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eESC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e换码符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e28\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e34\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFS\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e文件分隔符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e29\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e35\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eGS\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e组分隔符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e30\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e36\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eRS\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e记录分离符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e31\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e37\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eUS\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e单元分隔符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-0pky\" colspan=\"7\"\u003e十进制 32~127 区间一共 127-32+1=96 个ASCII码表示的符号，在我们的键盘上都可以被找到。其中：32表示空格，127表示删除命令。\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e32\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e40\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e20\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#032;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e空格\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e33\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e41\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e21\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e!\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#033;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e感叹号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e34\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e42\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e22\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\"\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#034;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e双引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e35\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e43\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e23\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e#\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#035;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e井号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e36\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e44\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e24\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e$\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#036;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e美元符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e37\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e45\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e25\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e%\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#037;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e百分号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e38\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e46\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e26\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#038;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e与\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e39\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e47\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e27\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e'\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#039;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e单引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e40\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e50\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e28\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e(\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#040;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e左括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e41\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e51\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e29\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e)\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#041;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e右括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e42\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e52\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2A\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e*\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#042;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e星号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e43\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e53\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e+\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#043;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e加号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e44\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e54\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e,\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#044;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e逗号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e45\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e55\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e-\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#045;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e连字号或减号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e46\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e56\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e.\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#046;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e句点或小数点\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e47\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e57\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e2F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e101111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e/\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#047;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e斜杠\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e48\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e60\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e30\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e0\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#048;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e0\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e49\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e61\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e31\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#049;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e50\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e62\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e32\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e2\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#050;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e2\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e51\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e63\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e33\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e3\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#051;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e52\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e64\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e34\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#052;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e53\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e65\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e35\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e5\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#053;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e5\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e54\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e66\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e36\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#054;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e55\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e67\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e37\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e7\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#055;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e7\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e56\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e70\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e38\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e111000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e8\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#056;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e8\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e57\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e71\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e39\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e111001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e9\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#057;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e9\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e58\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e72\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3A\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e:\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#058;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e冒号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e59\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e73\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#059;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e分号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e60\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e74\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#060;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小于\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e61\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e75\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e=\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#061;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e等号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e62\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e76\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#062;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#062;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大于\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e63\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e77\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e111111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e?\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#063;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e问号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e64\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e40\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1000000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e@\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#064;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e电子邮件符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e65\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e41\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eA\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#065;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 A\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e66\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e102\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e42\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eB\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#066;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 B\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e67\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e103\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e43\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eC\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#067;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 C\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e68\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e104\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e44\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eD\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#068;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 D\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e69\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e105\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e45\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eE\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#069;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 E\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e70\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e106\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e46\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eF\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#070;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 F\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e71\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e107\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e47\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1000111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eG\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#071;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 G\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e72\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e48\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eH\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#072;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 H\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e73\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e49\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eI\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#073;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 I\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e74\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e112\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4A\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eJ\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#074;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 J\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e75\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e113\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4B\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eK\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#075;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 K\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e76\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e114\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4C\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eL\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#076;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 L\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e77\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e115\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4D\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eM\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#077;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 M\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e78\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e116\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4E\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eN\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#078;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 N\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e79\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e117\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e4F\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1001111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eO\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#079;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 O\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e80\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e120\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e50\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eP\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#080;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 P\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e81\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e121\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e51\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eQ\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#081;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 Q\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e82\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e122\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e52\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eR\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#082;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 R\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e83\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e123\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e53\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eS\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#083;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 S\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e84\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e124\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e54\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eT\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#084;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 T\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e85\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e125\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e55\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eU\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#085;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 U\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e86\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e126\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e56\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eV\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#086;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 V\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e87\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e127\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e57\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1010111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eW\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#087;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 W\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e88\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e130\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e58\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1011000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eX\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#088;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 X\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e89\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e131\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e59\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1011001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eY\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#089;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 Y\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e90\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e132\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e5A\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1011010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eZ\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#090;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e大写字母 Z\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e91\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e133\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e[\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#091;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e左中括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e92\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e134\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\\\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#092;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e反斜杠\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e93\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e135\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e]\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#093;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e右中括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e94\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e136\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e^\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#094;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e音调符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e95\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e137\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e5F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1011111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e_\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#095;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e下划线\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e96\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e140\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e60\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1100000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e`\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#096;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e重音符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e97\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e141\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e61\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ea\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#097;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 a\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e98\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e142\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e62\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eb\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#098;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 b\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e99\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e143\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e63\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ec\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#099;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 c\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e144\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e64\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ed\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#100;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 d\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e145\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e65\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ee\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#101;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e102\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e146\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e66\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ef\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#102;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 f\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e103\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e147\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e67\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1100111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eg\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#103;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 g\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e104\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e150\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e68\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eh\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#104;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 h\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e105\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e151\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e69\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ei\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#105;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 i\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e106\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e152\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6A\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ej\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#106;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 j\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e107\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e153\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6B\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ek\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#107;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 k\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e108\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e154\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6C\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003el\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#108;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 l\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e109\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e155\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6D\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003em\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#109;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 m\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e156\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6E\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003en\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#110;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e157\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e6F\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1101111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eo\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#111;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 o\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e112\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e160\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e70\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ep\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#112;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 p\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e113\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e161\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e71\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eq\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#113;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 q\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e114\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e162\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e72\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003er\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#114;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 r\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e115\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e163\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e73\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110011\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003es\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#115;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 s\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e116\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e164\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e74\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110100\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003et\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#116;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 t\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e117\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e165\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e75\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110101\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003eu\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#117;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 u\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e118\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e166\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e76\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110110\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ev\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#118;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 v\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e119\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e167\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e77\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1110111\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ew\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#119;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 w\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e120\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e170\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e78\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1111000\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ex\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#120;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 x\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e121\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e171\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e79\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1111001\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ey\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#121;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 y\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e122\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e172\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e7A\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e1111010\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003ez\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e\u0026#122;\u003c/td\u003e\n    \u003ctd class=\"tg-xgb2\"\u003e小写字母 z\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e123\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e173\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7B\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e{\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#123;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e左大括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e124\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e174\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7C\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e|\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#124;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e垂直线\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e125\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e175\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e}\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#125;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e右大括号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e126\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e176\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7E\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e~\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#126;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e波浪号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e127\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e177\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e7F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1111111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#127;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e删除\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-c3ow\" colspan=\"7\"\u003e扩展ASCII码\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e128\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e200\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e80\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000000\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e€\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u0026#8364;\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e欧元符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e129\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e201\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e81\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10000001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e未定义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e130\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e202\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e82\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000010\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e‚\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e单低 9 引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e131\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e203\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e83\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000011\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eƒ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e带钩的拉丁小写字母f\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e132\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e204\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e84\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000100\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e„\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e双低 9 引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e133\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e205\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e85\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000101\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e…\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e水平省略号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e134\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e206\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e86\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000110\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e†\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e剑号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e135\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e207\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e87\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10000111\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e‡\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e双剑号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e136\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e210\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e88\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001000\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eˆ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e修正字符 抑扬音符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e137\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e211\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e89\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001001\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e‰\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e千分号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e138\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e212\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e8A\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001010\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eŠ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e带弯音号的拉丁大写字母 S\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e139\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e213\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e8B\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001011\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e‹\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e左单书名号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e140\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e214\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e8C\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001100\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eŒ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e拉丁大写组合 OE\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e141\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e215\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e8D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10001101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e未定义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e142\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e216\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e8E\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10001110\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eŽ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e143\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e217\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e8F\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10001111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e未定义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e144\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e220\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e90\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10010000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e未定义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e145\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e221\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e91\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010001\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e‘\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e左单引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e146\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e222\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e92\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010010\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e’\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e左单引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e147\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e223\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e93\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010011\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e“\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e左双引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e148\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e224\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e94\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010100\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e”\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e右双引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e149\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e225\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e95\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010101\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e•\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e150\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e226\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e96\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010110\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e–\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e半长破折号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e151\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e227\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e97\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10010111\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e—\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e全长破折号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e152\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e230\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e98\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011000\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e˜\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e小波浪线\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e153\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e231\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e99\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011001\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e™\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e154\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e232\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e9A\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011010\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eš\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e带弯音号的拉丁小写字母 s\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e155\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e233\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e9B\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011011\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e›\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e右单书名号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e156\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e234\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e9C\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011100\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eœ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e拉丁小写组合 oe\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e157\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e235\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e9D\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10011101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e未定义\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e158\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e236\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e9E\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011110\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003ež\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e带弯音号的拉丁小写字母 z\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e159\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e237\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e9F\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e10011111\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003eŸ\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-wvkc\"\u003e带弯音号的拉丁大写字母 Y\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e160\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e240\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e非间断空格\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e161\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e241\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¡\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#161;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e倒置感叹号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e162\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e242\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¢\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#162;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e美分符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e163\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e243\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e£\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#163;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e英镑符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e164\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e244\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¤\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#164;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e货币符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e165\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e245\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¥\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#165;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e人民币/日元符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e166\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e246\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¦\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#166;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e间断的竖杠\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e167\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e247\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10100111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e§\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#167;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小节号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e168\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e250\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¨\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#168;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e分音符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e169\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e251\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eA9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e©\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#169;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e版权所有\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e170\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e252\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eª\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#170;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e阴性序数记号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e171\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e253\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e«\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#171;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e左双角引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e172\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e254\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¬\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#172;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e否定符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e173\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e255\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAD\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e­\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#173;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e软连字符\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e174\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e256\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e®\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#174;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e注册商标\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e175\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e257\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eAF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10101111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¯\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#175;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e长音符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e176\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e260\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e°\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#176;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e度\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e177\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e261\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e±\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#177;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e加减号/正负号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e178\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e262\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e²\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#178;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e上标 2\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e179\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e263\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e³\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#179;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e上标 3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e180\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e264\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e´\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#180;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e尖音符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e181\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e265\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eµ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#181;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e微米符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e182\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e266\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¶\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#182;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e段落符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e183\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e267\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10110111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e·\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#183;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e中间点\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e184\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e270\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¸\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#184;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e变音符号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e185\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e271\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eB9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¹\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#185;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e上标 1\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e186\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e272\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eº\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#186;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e阳性序数记号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e187\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e273\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e»\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#187;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e右双角引号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e188\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e274\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¼\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#188;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1/4 分数\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e189\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e275\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBD\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e½\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#189;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e1/2 分数\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e190\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e276\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¾\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#190;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e3/4 分数\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e191\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e277\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eBF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e10111111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e¿\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#191;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e倒置问号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e192\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e300\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÀ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#192;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e193\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e301\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÁ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#193;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e194\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e302\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÂ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#194;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e195\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e303\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÃ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#195;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e196\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e304\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÄ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#196;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e197\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e305\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÅ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#197;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 A，带有上圆圈\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e198\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e306\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÆ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#198;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 AE\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e199\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e307\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11000111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÇ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#199;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 C，变音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e200\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e310\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÈ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#200;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 E，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e201\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e311\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eC9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÉ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#201;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 E，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e202\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e312\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÊ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#202;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 E，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e203\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e313\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eË\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#203;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 E，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e204\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e314\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÌ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#204;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 I，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e205\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e315\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCD\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÍ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#205;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 I，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e206\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e316\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÎ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#206;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 I，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e207\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e317\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eCF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11001111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÏ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#207;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 I，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e208\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e320\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÐ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#208;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e冰岛语大写字母 eth\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e209\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e321\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÑ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#209;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 N，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e210\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e322\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÒ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#210;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e211\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e323\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÓ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#211;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e212\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e324\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÔ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#212;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e213\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e325\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÕ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#213;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e214\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e326\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÖ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#214;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e215\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e327\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11010111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e×\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#215;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e乘号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e216\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e330\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eØ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#216;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 O，带有斜线\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e217\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e331\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eD9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÙ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#217;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 U，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e218\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e332\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÚ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#218;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 U，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e219\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e333\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÛ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#219;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 U，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e220\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e334\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÜ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#220;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 U，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e221\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e335\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDD\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÝ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#221;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e大写字母 Y，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e222\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e336\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÞ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#222;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e冰岛语大写字母 THORN\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e223\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e337\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eDF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11011111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eß\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#223;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e德语小写字母 sharp s\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e224\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e340\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eà\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#224;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e225\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e341\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eá\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#225;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e226\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e342\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eâ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#226;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e227\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e343\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eã\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#227;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e228\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e344\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eä\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#228;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e229\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e345\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eå\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#229;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 a，带有上圆圈\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e230\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e346\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eæ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#230;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 ae\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e231\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e347\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11100111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eç\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#231;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 c，变音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e232\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e350\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eè\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#232;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 e，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e233\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e351\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eE9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eé\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#233;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 e，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e234\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e352\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eê\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#234;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 e，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e235\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e353\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eë\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#235;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 e，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e236\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e354\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eì\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#236;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 i，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e237\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e355\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eED\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eí\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#237;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 i，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e238\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e356\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eî\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#238;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 i，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e239\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e357\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eEF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11101111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eï\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#239;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 i，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e240\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e360\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF0\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eð\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#240;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e冰岛语小写字母 eth\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e241\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e361\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF1\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eñ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#241;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 n，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e242\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e362\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF2\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eò\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#242;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e243\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e363\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF3\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eó\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#243;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e244\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e364\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF4\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eô\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#244;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e245\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e365\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF5\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eõ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#245;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，腭化\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e246\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e366\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF6\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eö\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#246;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e247\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e367\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF7\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11110111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e÷\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#247;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e除号\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e248\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e370\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF8\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111000\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eø\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#248;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 o，带有斜线\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e249\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e371\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eF9\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111001\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eù\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#249;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 u，重音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e250\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e372\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFA\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111010\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eú\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#250;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 u，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e251\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e373\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFB\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111011\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eû\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#251;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 u，抑扬音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e252\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e374\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFC\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111100\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eü\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#252;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 u，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e253\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e375\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFD\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111101\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eý\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#253;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 y，尖音\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e254\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e376\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFE\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111110\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eþ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#254;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e冰岛语小写字母 thorn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd class=\"tg-nolz\"\u003e255\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e377\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eFF\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e11111111\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003eÿ\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e\u0026#255;\u003c/td\u003e\n    \u003ctd class=\"tg-nolz\"\u003e小写字母 y，带有变音符号标记\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e","title":"ascii码表","type":"post"},{"content":"","date":"121236-112+08","externalUrl":null,"permalink":"/","section":"欢迎来到 Nanxer's blog! 🎉","summary":"","title":"欢迎来到 Nanxer's blog! 🎉","type":"page"},{"content":"","date":"121236-112+08","externalUrl":null,"permalink":"/post/","section":"文章","summary":"","title":"文章","type":"post"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"签到\nirisctf{w0w_cool_n3w_webgl_th3me_this_ye4r}\nKittyCrypt # 简单的替换加密，逆着来就可以\nimport binascii def set_reverse(cipher): set_reversed = { \u0026#34;🐱\u0026#34;: \u0026#39;0\u0026#39;, \u0026#34;🐈\u0026#34;: \u0026#39;1\u0026#39;, \u0026#34;😸\u0026#34;: \u0026#39;2\u0026#39;, \u0026#34;😹\u0026#34;: \u0026#39;3\u0026#39;, \u0026#34;😺\u0026#34;: \u0026#39;4\u0026#39;, \u0026#34;😻\u0026#34;: \u0026#39;5\u0026#39;, \u0026#34;😼\u0026#34;: \u0026#39;6\u0026#39;, \u0026#34;😽\u0026#34;: \u0026#39;7\u0026#39;, \u0026#34;😾\u0026#34;: \u0026#39;8\u0026#39;, \u0026#34;😿\u0026#34;: \u0026#39;9\u0026#39;, \u0026#34;🙀\u0026#34;: \u0026#39;A\u0026#39;, \u0026#34;🐱‍👤\u0026#34;: \u0026#39;B\u0026#39;, \u0026#34;🐱‍🏍\u0026#34;: \u0026#39;C\u0026#39;, \u0026#34;🐱‍💻\u0026#34;: \u0026#39;D\u0026#39;, \u0026#34;🐱‍👓\u0026#34;: \u0026#39;E\u0026#39;, \u0026#34;🐱‍🚀\u0026#34;: \u0026#39;F\u0026#39; } return set_reversed.get(cipher, \u0026#39;?\u0026#39;) def decrypt(cipher_kitty): k = 0 cipher_kitty_hex = \u0026#39;\u0026#39; while k \u0026lt; len(cipher_kitty): if set_reverse(cipher_kitty[k:k + 3]) != \u0026#39;?\u0026#39;: cipher_kitty_hex += set_reverse(cipher_kitty[k:k + 3]) k += 3 else: cipher_kitty_hex += set_reverse(cipher_kitty[k]) k += 1 return cipher_kitty_hex example = \u0026#39;You fools! You will never get my catnip!!!!!!!\u0026#39; out = \u0026#39;🐱‍👓🐱‍🏍🐱‍👤😸😾😹🐱‍👓🐱‍🏍🙀🐱‍👤😾😺🐱‍👓🐈😿🐱‍👤🐱‍👤🐱🐱‍👓🐈🐱‍👤🐱‍🏍🙀😾🐱‍👓🐱‍🏍🙀🐱‍🚀😿😽🐱‍👓🐱‍👓😾😹😾🐱🐱‍👓😽😿🐱‍🏍🙀🐱‍👓🐱‍👓🐱‍👓😾😺😾🐱‍💻🐱‍👓😸😾😸😾🐱‍🏍🐱‍👓😼🙀🙀🐱‍👤😼🐱‍👓🐈🐱‍👤😿🙀😾🐱‍👓😼🐱‍👤😺😾🐱‍💻🐱‍👓🙀😿🐱‍🚀😾😿🐱‍👓😽🙀🐱‍🏍🙀😼🐱‍👓😸🙀🐱‍👓🐱‍👤😿🐱‍💻🐱‍🚀😾😸🐱‍👓🙀😿🐱😿😸🐱‍👓😼🙀🐱‍🏍🐱‍👤🐱‍👤🐱‍👓😼🐱‍👤😸😾😹🐱‍👓😸🐱‍👤😸🐱‍👤🐱‍👤🐱‍👓😽🐱‍👤😾🙀😻🐱‍👓😽😾😻🐱‍👤🐱‍💻🐱‍👓😼🐱‍👤😿😿🐱🐱‍👓🐈😿😽😿😽🐱‍👓😽🙀😻😾😿🐱‍👓😺😾🐱🐱‍👤🙀🐱‍👓🐱‍👤😾🐈😿🐱‍👤🐱‍👓🐱🙀😺😿🙀🐱‍👓😼🙀🙀🐱‍👤🙀🐱‍👓🙀😾😺🙀😾🐱‍👓😹🐱‍👤😻😾😸🐱‍👓😻😿😺🙀🐈🐱‍👓😼😿😸🐱‍👤😸🐱‍👓🐈😾🐱‍💻😿😸🐱‍👓🐈😾🐱‍💻😿😹🐱‍👓🐱‍👤😾🐈🙀😸🐱‍👓🐱‍🏍😾🐈🙀😸🐱‍👓🐱‍🚀🐱‍👤🐱‍🚀🐱‍👤🐱‍💻🐱‍👓😸😾😸😾😿🐱‍👓🐱‍👓🙀😺🐱‍👤🐱🐱‍👓😾😾😽🐱‍👤😿🐱‍👓😸😿🐱‍👤😿🐱‍🚀🐱‍👓🐱‍🏍🙀🙀🙀🙀🐱‍👓🐱‍👤😿🐱‍👤🙀😻🐱‍👓😾🙀😻🙀😾🐱‍👓😾😾😿🐱‍👤😿\u0026#39; out_flag = \u0026#39;🐱‍👓🐱‍🏍🐱‍👤😸😿😹🐱‍👓🐱‍🏍🙀🐱‍👤😾😽🐱‍👓🐈😿🐱‍👤🙀😺🐱‍👓🐈🐱‍👤🐱‍💻🐱‍👤🐱‍👤🐱‍👓🐱‍🏍🙀🐱‍🚀😿😺🐱‍👓🐱‍👓😾😹😾😻🐱‍👓😽😿🐱‍🏍🙀😻🐱‍👓🐱‍👓😾😺😿🐱‍🏍🐱‍👓😸😾😸😾🐱‍🏍🐱‍👓😼🙀🐱‍👤😾😻🐱‍👓🐈🐱‍👤🙀🐱‍👤😻🐱‍👓😼🐱‍👤😹🙀😽🐱‍👓🙀😿🐱‍👓😿🐈🐱‍👓😽🙀🐱‍👤🙀😸🐱‍👓😸🐱‍👤🐱😾😼🐱‍💻🐱‍💻🐱‍👤🐱‍👓🐱‍👓🙀😿🐱😿🐱‍🏍🐱‍👓😼🙀🐱‍🏍🙀🐱‍👓🐱‍👓😼🐱‍👤🐈🐱‍👤😿🐱‍👓😸🐱‍👤😹🐱‍👤😺🐱‍👓😽🐱‍👤😽🙀🐱‍👓🐱‍👓😽😾😻😾🐱‍👤🐱‍👓😼🐱‍👤😾😾🐱‍🚀🐱‍👓🐈😿😽😿🐈🐱‍👓😽🙀😺😾🐱‍👤🐱‍👓😺😾😸😾🐱‍🏍🐱‍👓🐱‍👤😾🐱🙀😽🐱‍👓🐱🙀😺🙀😹🐱‍👓😼🙀😿🐱‍👤🐱‍💻🐱‍👓🙀😾😻🙀😽🐱‍👓😹🐱‍👤😻😾🐱‍🏍🐱‍👓😻😿😺😿🐱🐱‍👓😼😿😹😾😼🐱‍👓🐈😾🐱‍🏍🙀😼🐱‍👓🐈😾🐱‍💻😿🐈🐱‍👓🐱‍👤😾🐈🙀😽🐱‍👓🐱‍🏍😾🐱🙀😺🐱‍👓🐱‍🚀🐱‍👤🐱‍🚀🐱‍👤🐱‍💻🐱‍👓😸😾🐈🐱‍👤😾🐱‍👓🐱‍👓🙀😻😾😸🐱‍👓😾😾😿😿🐱🐱‍👓😸😿🐱‍🏍🙀🐱‍👓🐱‍👓🐱‍🏍🙀🙀🐱‍👤🐱‍🏍🐱‍👓🐱‍👤😿🐱‍🏍🙀😽🐱‍👓😾🙀😻🐱‍👤🐱‍👓🐱‍👓😾😾🐱‍👤😿😻\u0026#39; out_bytes = binascii.unhexlify(decrypt(out)).decode(\u0026#39;utf-8\u0026#39;) out_flag_bytes = binascii.unhexlify(decrypt(out_flag)).decode(\u0026#39;utf-8\u0026#39;) flag = \u0026#39;\u0026#39;.join([chr(ord(out_flag_bytes[i]) - ord(out_bytes[i]) + ord(example[i])) for i in range(len(out_bytes))]) print(flag) #irisctf{s0m371m3s_bY735_4r3n7_wh47_y0i_3xp3c7} 这个时候直接提交的flag不对\n根据flag：sometimes byteX arent what yoi expect\n把i改为u得到flag(撞上的)\nirisctf{s0m371m3s_bY735_4r3n7_wh47_y0u_3xp3c7}\n","externalUrl":null,"permalink":"/post/irisctf2025-crypto/","section":"文章","summary":"\u003cp\u003e签到\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eirisctf{w0w_cool_n3w_webgl_th3me_this_ye4r}\u003c/code\u003e\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003eKittyCrypt \n    \u003cdiv id=\"kittycrypt\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#kittycrypt\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e简单的替换加密，逆着来就可以\u003c/p\u003e","title":"IrisCTF2025","type":"post"},{"content":" 现代密码学入门指北 # 根据已有信息，得到d=10937306181556310949935858914795529677662422361690470235893559064877687528573\n直接计算\nSignin # 计算p,q,d即可\np=-(pq-n+p_q-2) q=-(qp-n+p_q-2) d=reverse(e,(p-1)*(q-1)) print(long_to_bytes(pow(c,d,n))) #b\u0026#39;moectf{Just_4_signin_ch4ll3ng3_for_y0u}\u0026#39; ez_hash # 1.网站查表\n2.直接爆破\nBig and small # e很小=\u0026gt;m^e\u0026lt;n或者没比n大多少，那对c+kn开1/e次方的根就是m\nimport libnum from gmpy2 import iroot c = 150409620528288093947185249913242033500530715593845912018225648212915478065982806112747164334970339684262757 n = 20279309983698966932589436610174513524888616098014944133902125993694471293062261713076591251054086174169670848598415548609375570643330808663804049384020949389856831520202461767497906977295453545771698220639545101966866003886108320987081153619862170206953817850993602202650467676163476075276351519648193219850062278314841385459627485588891326899019745457679891867632849975694274064320723175687748633644074614068978098629566677125696150343248924059801632081514235975357906763251498042129457546586971828204136347260818828746304688911632041538714834683709493303900837361850396599138626509382069186433843547745480160634787 e = 3 c_root =iroot(c,e) cc=libnum.n2s(int(c_root[0])) print(cc) #flag{xt\u0026gt;is\u0026gt;s\u0026gt;b} 上个大刀也行coppersmith\nbaby_equation # from Crypto.Util.number import * from secret import flag l = len(flag) m1, m2 = flag[:l//2], flag[l//2:] a = bytes_to_long(m1) b = bytes_to_long(m2) k = 0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40 assert ((a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1)) == 4*(k + a*b) 对 ((a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1)) == 4*(k + a*b)作处理，得到(a + 1)^2*(b - 1)^2 == 4*k\nfrom sage.all import * a,b=var(\u0026#39;a,b\u0026#39;) f = (a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1) - 4*a*b print(f.factor()) #(a + 1)^2*(b - 1)^2 对4*k作开平方处理，分解k：\nfrom sage.all import * k=4*0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40 print(factor(k)) #2^8 * 3^4 * 31^2 * 61^2 * 223^2 * 4013^2 * 281317^2 * 4151351^2 * 339386329^2 * 370523737^2 * 5404604441993^2 * 26798471753993^2 * 25866088332911027256931479223^2 * 64889106213996537255229963986303510188999911^2 =\u0026gt;2*k=(a+1)(b-1)的所有因子有：\n[2,2,2,2,3,3,31,61,223,4013,281317,4151351,339386329,370523737,5404604441993,26798471753993,25866088332911027256931479223,64889106213996537255229963986303510188999911] 显然，a+1与b-1均为以上某些因子的乘积，故：\nfrom Crypto.Util.number import * from math import prod k0=[2,2,2,2,3,3,31,61,223,4013,281317,4151351,339386329,370523737,5404604441993,26798471753993,25866088332911027256931479223,64889106213996537255229963986303510188999911] for i in range(2 ** len(k0)): m = str(bin(i))[2:].zfill(len(k0)) k10 = prod(k0[j] for j in range(len(m)) if m[j] == \u0026#39;1\u0026#39;) s1 = long_to_bytes(k10 - 1) if b\u0026#39;moectf\u0026#39; in s1: k20 = prod(k0[j] for j in range(len(m)) if m[j] == \u0026#39;0\u0026#39;) s2 = long_to_bytes(k20 + 1) print(s1 + s2) break #b\u0026#39;moectf{7he_Fund4m3nt4l_th30r3m_0f_4rithm3tic_i5_p0w4rful!}\u0026#39; DA_BAI_TU # from Crypto.Util.number import * flag = b\u0026#39;moectf{xxxxxxxxxx}\u0026#39; m = bytes_to_long(flag) e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137 e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697 def encrypt(m, e1, e2): p = getPrime(512) q = getPrime(512) N = p * q c1 = pow((3 * p + 7 * q), e1, N) c2 = pow((2 * p + 5 * q), e2, N) e = 65537 c = pow(m, e, N) return c print(encrypt(m, e1, e2)) \u0026#39;\u0026#39;\u0026#39; N = 107840121617107284699019090755767399009554361670188656102287857367092313896799727185137951450003247965287300048132826912467422962758914809476564079425779097585271563973653308788065070590668934509937791637166407147571226702362485442679293305752947015356987589781998813882776841558543311396327103000285832158267 c1 = 15278844009298149463236710060119404122281203585460351155794211733716186259289419248721909282013233358914974167205731639272302971369075321450669419689268407608888816060862821686659088366316321953682936422067632021137937376646898475874811704685412676289281874194427175778134400538795937306359483779509843470045 c2 = 21094604591001258468822028459854756976693597859353651781642590543104398882448014423389799438692388258400734914492082531343013931478752601777032815369293749155925484130072691903725072096643826915317436719353858305966176758359761523170683475946913692317028587403027415142211886317152812178943344234591487108474 c = 21770231043448943684137443679409353766384859347908158264676803189707943062309013723698099073818477179441395009450511276043831958306355425252049047563947202180509717848175083113955255931885159933086221453965914552773593606054520151827862155643433544585058451821992566091775233163599161774796561236063625305050 \u0026#39;\u0026#39;\u0026#39; c=pow((a*p+b*q),t,N)， 二项式展开结合N=p*q，所以再mod N的情况下c=(a*p)^t+(b*q)^t mod N,因为其他项都含有p*q在mod N后都0。\n结合c1与c2消去一个p(或q)，可以得到 q^(e1*e2) mod N的值，即q^(e1*e2)+k*N=q^(e1*e2)+k*p*q=q*(q^(e1*e2-1)+k*p)\n并且q^(e1*e2-1)+k*p不含有p或者q的因子=\u0026gt;GCD(q^(e1*e2) mod N,N)=q,那么p和q都可以得到：\nfrom Crypto.Util.number import * e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137 e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697 e = 65537 N = 107840121617107284699019090755767399009554361670188656102287857367092313896799727185137951450003247965287300048132826912467422962758914809476564079425779097585271563973653308788065070590668934509937791637166407147571226702362485442679293305752947015356987589781998813882776841558543311396327103000285832158267 c1 = 15278844009298149463236710060119404122281203585460351155794211733716186259289419248721909282013233358914974167205731639272302971369075321450669419689268407608888816060862821686659088366316321953682936422067632021137937376646898475874811704685412676289281874194427175778134400538795937306359483779509843470045 c2 = 21094604591001258468822028459854756976693597859353651781642590543104398882448014423389799438692388258400734914492082531343013931478752601777032815369293749155925484130072691903725072096643826915317436719353858305966176758359761523170683475946913692317028587403027415142211886317152812178943344234591487108474 c = 21770231043448943684137443679409353766384859347908158264676803189707943062309013723698099073818477179441395009450511276043831958306355425252049047563947202180509717848175083113955255931885159933086221453965914552773593606054520151827862155643433544585058451821992566091775233163599161774796561236063625305050 ce=pow(2,e1*e2,N)*pow(c1,e2,N)-pow(3,e1*e2,N)*pow(c2,e1,N) p=GCD(ce,N) q=N//p assert p*q==N d=inverse(e,(p-1)*(q-1)) print(long_to_bytes(pow(c,d,N))) #b\u0026#39;moectf{Sh4!!0w_deeb4t0_P01arnova}\u0026#39; More_secure_RSA # from Crypto.Util.number import * flag = b\u0026#39;moectf{xxxxxxxxxxxxxxxxx}\u0026#39; assert len(flag)==32 #wp里显示这里的flag是32字节，但是代码里本来没有，这是自己添加的 m = bytes_to_long(flag) p = getPrime(1024) q = getPrime(1024) n = p * q e = 0x10001 c = pow(m, e, n) print(f\u0026#39;c = {c}\u0026#39;) print(f\u0026#39;n = {n}\u0026#39;) \u0026#39;\u0026#39;\u0026#39; Oh,it isn\u0026#39;t secure enough! \u0026#39;\u0026#39;\u0026#39; r = getPrime(1024) n = n * r c = pow(m, e, n) print(f\u0026#39;C = {c}\u0026#39;) print(f\u0026#39;N = {n}\u0026#39;) \u0026#39;\u0026#39;\u0026#39; c = 12992001402636687796268040906463852467529970619872166160007439409443075922491126428847990768804065656732371491774347799153093983118784555645908829567829548859716413703103209412482479508343241998746249393768508777622820076455330613128741381912099938105655018512573026861940845244466234378454245880629342180767100764598827416092526417994583641312226881576127632370028945947135323079587274787414572359073029332698851987672702157745794918609888672070493920551556186777642058518490585668611348975669471428437362746100320309846155934102756433753034162932191229328675448044938003423750406476228868496511462133634606503693079 n = 16760451201391024696418913179234861888113832949815649025201341186309388740780898642590379902259593220641452627925947802309781199156988046583854929589247527084026680464342103254634748964055033978328252761138909542146887482496813497896976832003216423447393810177016885992747522928136591835072195940398326424124029565251687167288485208146954678847038593953469848332815562187712001459140478020493313651426887636649268670397448218362549694265319848881027371779537447178555467759075683890711378208297971106626715743420508210599451447691532788685271412002723151323393995544873109062325826624960729007816102008198301645376867 C = 1227033973455439811038965425016278272592822512256148222404772464092642222302372689559402052996223110030680007093325025949747279355588869610656002059632685923872583886766517117583919384724629204452792737574445503481745695471566288752636639781636328540996436873887919128841538555313423836184797745537334236330889208413647074397092468650216303253820651869085588312638684722811238160039030594617522353067149762052873350299600889103069287265886917090425220904041840138118263873905802974197870859876987498993203027783705816687972808545961406313020500064095748870911561417904189058228917692021384088878397661756664374001122513267695267328164638124063984860445614300596622724681078873949436838102653185753255893379061574117715898417467680511056057317389854185497208849779847977169612242457941087161796645858881075586042016211743804958051233958262543770583176092221108309442538853893897999632683991081144231262128099816782478630830512 N = 1582486998399823540384313363363200260039711250093373548450892400684356890467422451159815746483347199068277830442685312502502514973605405506156013209395631708510855837597653498237290013890476973370263029834010665311042146273467094659451409034794827522542915103958741659248650774670557720668659089460310790788084368196624348469099001192897822358856214600885522908210687134137858300443670196386746010492684253036113022895437366747816728740885167967611021884779088402351311559013670949736441410139393856449468509407623330301946032314939458008738468741010360957434872591481558393042769373898724673597908686260890901656655294366875485821714239821243979564573095617073080807533166477233759321906588148907331569823186970816432053078415316559827307902239918504432915818595223579467402557885923581022810437311450172587275470923899187494633883841322542969792396699601487817033616266657366148353065324836976610554682254923012474470450197 \u0026#39;\u0026#39;\u0026#39; n,N=\u0026gt;r，根据代码有m\u0026lt;2^128。\nm^e mod N = C mod N 和 N = pqr 得到 m^e mod r = C mod r 同时显然有gcd(e, r-1)=1 （e为素数）\nm mod r = C^dr mod r (dr=inverse(e, r-1))\nr是1024bits，大于m，可有m = C^dr mod r。故可以在mod r下解决问题\nfrom Crypto.Util.number import * n = 16760451201391024696418913179234861888113832949815649025201341186309388740780898642590379902259593220641452627925947802309781199156988046583854929589247527084026680464342103254634748964055033978328252761138909542146887482496813497896976832003216423447393810177016885992747522928136591835072195940398326424124029565251687167288485208146954678847038593953469848332815562187712001459140478020493313651426887636649268670397448218362549694265319848881027371779537447178555467759075683890711378208297971106626715743420508210599451447691532788685271412002723151323393995544873109062325826624960729007816102008198301645376867 C = 1227033973455439811038965425016278272592822512256148222404772464092642222302372689559402052996223110030680007093325025949747279355588869610656002059632685923872583886766517117583919384724629204452792737574445503481745695471566288752636639781636328540996436873887919128841538555313423836184797745537334236330889208413647074397092468650216303253820651869085588312638684722811238160039030594617522353067149762052873350299600889103069287265886917090425220904041840138118263873905802974197870859876987498993203027783705816687972808545961406313020500064095748870911561417904189058228917692021384088878397661756664374001122513267695267328164638124063984860445614300596622724681078873949436838102653185753255893379061574117715898417467680511056057317389854185497208849779847977169612242457941087161796645858881075586042016211743804958051233958262543770583176092221108309442538853893897999632683991081144231262128099816782478630830512 N = 1582486998399823540384313363363200260039711250093373548450892400684356890467422451159815746483347199068277830442685312502502514973605405506156013209395631708510855837597653498237290013890476973370263029834010665311042146273467094659451409034794827522542915103958741659248650774670557720668659089460310790788084368196624348469099001192897822358856214600885522908210687134137858300443670196386746010492684253036113022895437366747816728740885167967611021884779088402351311559013670949736441410139393856449468509407623330301946032314939458008738468741010360957434872591481558393042769373898724673597908686260890901656655294366875485821714239821243979564573095617073080807533166477233759321906588148907331569823186970816432053078415316559827307902239918504432915818595223579467402557885923581022810437311450172587275470923899187494633883841322542969792396699601487817033616266657366148353065324836976610554682254923012474470450197 r=N//n e = 0x10001 dr=pow(e,-1,r-1) print(long_to_bytes(pow(C,dr,r))) #b\u0026#39;moectf{th3_a1g3br4_is_s0_m@gic!}\u0026#39; ezlegendre # from sympy import * from Crypto.Util.number import * p = getPrime(128) a = randprime(2, p) FLAG = b\u0026#39;moectf{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\u0026#39; def encrypt_flag(flag): ciphertext = [] plaintext = \u0026#39;\u0026#39;.join([bin(i)[2:].zfill(8) for i in flag]) for bit in plaintext: e = randprime(2, p) n = pow(int(bit) + a, e , p) ciphertext.append(n) return ciphertext print(encrypt_flag(FLAG)) \u0026#39;\u0026#39;\u0026#39; p = 303597842163255391032954159827039706827 a = 34032839867482535877794289018590990371 [278121435714344315140568219459348432240, 122382422611852957172920716982592319058, 191849618185577692976529819600455462899,94093446512724714011050732403953711672, 201558180013426239467911190374373975458,68492033218601874497788216187574770779, 126947642955989000352009944664122898350, 219437945679126072290321638679586528971, 10408701004947909240690738287845627083, 219535988722666848383982192122753961, 173567637131203826362373646044183699942, 80338874032631996985988465309690317981, 61648326003245372053550369002454592176, 277054378705807456129952597025123788853, 17470857904503332214835106820566514388, 107319431827283329450772973114594535432, 238441423134995169136195506348909981918, 99883768658373018345315220015462465736, 188411315575174906660227928060309276647, 295943321241733900048293164549062087749, 262338278682686249081320491433984960912, 22801563060010960126532333242621361398, 36078000835066266368898887303720772866, 247425961449456125528957438120145449797, 843438089399946244829648514213686381, 134335534828960937622820717215822744145, 74167533116771086420478022805099354924, 249545124784428362766858349552876226287, 37282715721530125580150140869828301122, 196898478251078084893324399909636605522, 238696815190757698227115893728186526132, 299823696269712032566096751491934189084, 36767842703053676220422513310147909442, 281632109692842887259013724387076511623, 205224361514529735350420756653899454354, 129596988754151892987950536398173236050, 97446545236373291551224026108880226180, 14756086145599449889630210375543256004, 286168982698537894139229515711563677530, 100213185917356165383902831965625948491, 268158998117979449824644211372962370753, 264445941122079798432485452672458533870, 87798213581165493463875527911737074678, 131092115794704283915645135973964447801, 164706020771920540681638256590936188046, 178911145710348095185845690896985420147, 154776411353263771717768237918437437524, 260700611701259748940616668959555019434, 222035631087536380654643071679210307962, 281292430628313502184158157303993732703, 24585161817233257375093541076165757776, 269816384363209013058085915818661743171, 39975571110634682056180877801094873602, 125235869385356820424712474803526156473, 218090799597950517977618266111343968738, 144927096680470512196610409630841999788, 213811208492716237073777701143156745108, 64650890972496600196147221913475681291, 302694535366090904732833802133573214043, 214939649183312746702067838266793720455, 219122905927283854730628133811860801459, 224882607595640234803004206355378578645, 260797062521664439666117613111279885285, 279805661574982797810336125346375782066, 147173814739967617543091047462951522968, 23908277835281045050455945166237585493, 186338363482466926309454195056482648936, 295140548360506354817984847059061185817, 151948366859968493761034274719548683660, 96829048650546562162402357888582895187, 61129603762762161772506800496463804206, 83474322431616849774020088719454672415, 25094865151197136947956010155927090038, 86284568910378075382309315924388555908, 269311313874077441782483719283243368999, 293865655623484061732669067594899514872, 42618744258317592068586041005421369378, 54330626035773013687614797098120791595, 147903584483139198945881545544727290390, 290219451327796902155034830296135328101, 147951591390019765447087623264411247959, 176721307425594106045985172455880551666, 10617017342351249793850566048327751981, 166002147246002788729535202156354835048, 43653265786517886972591512103899543742, 191250321143079662898769478274249620839, 142288830015965036385306900781029447609, 231943053864301712428957240550789860578, 259705854206260213018172677443232515015, 42547692646223561211915772930251024103, 210863755365631055277867177762462471179, 140297326776889591830655052829600610449, 136970598261461830690726521708413303997, 93221970399798040564077738881047391445, 192314170920206027886439562261321846026, 95904582457122325051140875987053990027, 158334009503860664724416914265160737388, 134039922705083767606698907224295596883, 7789601161004867293103537392246577269, 261069289329878459425835380641261840913, 123743427894205417735664872035238090896, 20126583572929979071576315733108811761, 5317214299018099740195727361345674110, 68965882674411789667953455991785095270, 235934145208367401015357242228361016868, 250709310980093244562698210062174570956, 167048130489822745377277729681835553856, 122439593796334321806299678109589886368, 117953800124952553873241816859976377866, 226311466875372429157352019491582796620, 301401080214561977683439914412806833619, 255816105091394723475431389696875064495, 73243049441397892506665249226961409560, 226985189100195407227032930008331832009, 164462051705780513134747720427967016844, 97905180778488273557095248936896399883, 40737879120410802220891174679005117779, 180413920169781019749877067396006212488, 171309368917976988181007951396904157090, 215065878665354148046787050342635722874, 54225964222741166664978354789209176721, 179980445108969868669560591527220171967, 39118880593034932654127449293138635964, 170210538859699997092506207353260760212, 62152643864232748107111075535730424573, 28285579676042878568229909932560645217, 69823876778445954036922428013285910904, 170371231064701443428318684885998283021, 211884923965526285445904695039560930451, 2912793651373467597058997684762696593, 220544861190999177045275484705781090327, 142755270297166955179253470066788794096, 264271123927382232040584192781810655563, 214901195876112453126242978678182365781, 252916600207311996808457367909175218824, 176399700725319294248909617737135018444, 230677646264271256129104604724615560658, 1568101696521094800575010545520002520, 276644650735844694794889591823343917140, 185355461344975191330786362319126511681, 248497269558037476989199286642120676823, 27426372552503547932146407600438894266, 99885839446999373024614710052031031159, 238693364649026611386487480573211208980, 27047849084544903200283111147329657123, 261687609401872239323715016608713989139, 34926503987070847956303036393611830590, 252495954285655595492775877967398282722, 249358827602419141539353237669905281246, 42551212101869966935955269842854722856, 286527336123436427709115043975536071462, 158097411156207320921055042509886995091, 40982984899524424348979403377331335675, 87268254405858939730919659372073314983, 142920872841164853694746048293715385493, 280344634952903421792629929689092857993, 203584314487374069738101729666435007339, 76747904284507590577908045394001414841, 18608573158088521401404614102481693137, 104158289118605398449367221892619783009, 182616719368573751169836443225324741716, 272025723760783252166092979911587562064, 24194069309604403496494752448487752613, 71973842397785917741048132725314885345, 281558046604363121112749722271741416764, 66965324704079734796576428718112513855, 105222756356650324548621319241035836840, 331654051401420900830576011369146182, 131087815164777263900650262777429797113, 76104729920151139813274463849368737612, 163253554841934325278065946152769269296, 35973933431510942249046321254376084104, 223355354158871484030430212060934655984, 181704973473887713398031933516341967465, 131391458395622565487686089688656869743, 153029062510158353978320224242258979076, 75598349867958834632866616947240059419, 107656133091853571710502064573530657194, 261653899003034450454605322537555204702, 102387069931966536076616272953425585051, 174654548539988861301269811985320013260, 30731762585661721683653192240732246059, 265493340795853624586170054917042208660, 174818040730242275465453007894471517233, 99514915046145707535310601810631334278, 133978892607644700903700803642408771370, 216019770199630171637325931783378096100, 76687884966028369399497157007109898467, 262185741950606001987209986574269562289, 101935410844521914696784339882721918198, 85956270718878931834010975962772401589, 117578315837774870077915813512746446219, 209811226703488479967593762805568394383, 85782228978690599612110880989543246041, 234993402267259336147096170367513324439, 158487299348452041021565296682698871789, 159701431055714867184644360639841355076, 109022557288733938098734847159477770521, 20764822884655633017647117775843651332, 144987524936939260617020678038224835887, 214906746504968333094519539609226540495, 61852186870193663367998110214331582115, 90175894032076080713807606548780168998, 283504071501037047650569090140982777586, 267695305479884628857258564337611106120, 2466175482923380874813569827625743835, 62561740902965346823256447383892272796, 181458673990444296212252831090106274182, 151903421483215372136947284355251617709, 19545903652854510304023406921387221130, 219205004027218279279153442572018305650, 62495663621315535552427938857863551873, 12365469869484359722316573851483855865, 84444120685499458796249283893323932282, 240719245204462516267560756675192129462, 27868242791206675092288978266113368469, 231956104988320170956546781095814860314, 238410591787987745803829175586952288627, 290649141309468101840354611586699479851, 288298044918505512172272603794059992911, 43375655853069820305921366762777897508, 195308577786654489057887409352840304641, 184459971400898842809886506207633536394, 255884612697066296714973816950917234211, 8695922085804648269560669225439485137, 109407350389195091443836128149623969417, 40151058765649465408124869078260007620, 125484946058191366826510549493690011718, 71132588066103752922321942940739808864, 74434669478187680319595294456652807097, 187368213679294937718535073296853726111, 63461505676143678393259420949793811831, 131619805472714703711458729455838994067, 8579657158619864010437706463902003097, 60626278761876782233388469543817973673, 44776499706241603722632560896220653186, 257249861781237389988455384617803171877, 161899873165011719282095749671993720527, 73303482092538159761390536102771615311, 141674253732456103774983358188317473860, 112299149158347774069079224861237069975, 192409969047313867540459549167233638120, 52560717143548208264188844553309600513, 209294007943747095607573416682772182613, 65285862009539442533024037477398617382, 141465096635701758351979378177631042196, 282970656853503001128091562858564344839, 50475483578642585644452991078499278745, 162546597698227455939743094437394415689, 65258447920153625609456176138520078583, 25184730952052088803921023041299838584, 228883100940853988548836641050823478387, 234342509561041384559923481191578502671, 96929129863331626375704681481278825323, 288533470498072097357398960101692503873, 202238020435442160571930572760188491021, 179010548891454398845389500871076122861, 210509821764943794358893224681677583929, 301357944197101288505771002301759006254, 188933290023352627523422420332593360537, 207946655777875200521742190622482472884, 288626263488145443150622420747070805416, 75616301779108425588545170038742534166, 58163857263381687168244101022135667109, 297006021514663344215599115965804102114, 297690420826548736122127126645053452341, 88307045391242971429880119414942510712, 186427606153958359494215188169120285788, 135488686276533521058776859854524444361, 185380054960856211260651416683468161990, 175033658667416561573078028845860911744, 223026004671602541191897755812121342354, 34657268786986063209312902409995458857, 120560332690000675303295481174067849230, 55304621833927249516093996383526467671, 111480233798478730015825495041130765708, 188996716801525995463705449722399676888, 276300230605454487705048192796463035731, 195951365841304132244984630163178946841, 97383655947416522972353051984313703380, 94486945760999630041197414137963583839, 180706938513681126017333618518691884990, 291355503207799224380050183085704824037, 69034413486375685936282884707402207337, 147750870458026934714106830614187010708, 45030500748522416863096615057804736553, 242760053973560804002707125041520857401, 78549841097746795170488790352479728712, 2356186555504071026416878904180857750, 250486437623828232647064146324392061051, 23443836455198610186212360005846025976, 174557226633145985326629017377610499133, 105578481831185315088267357915446186040, 275620780071666328887795273613981325091, 23435505408737317601794562472269448966, 153209223406380813663608757935808571040, 298537417505667302508269715871007454162, 203833907122687718347615710181705388877, 41923370405573382737900061813058979798, 3762696947926387653032627637114050038, 201362054098012734707571348865729525585, 285561801443127226417656620776228615886, 111526376057659222252771678197929357387, 203857473647840873587593099562928738804, 44500972779851392967974092230683443589, 131565609415497588649207556985146740667, 118140388348838985266223643241117982200, 151449885527204880099343472664885565851, 296392921256617994387220911796693904909, 171323803851876663161606688343678019752, 77152982746512263077542395226111426871, 71648764903315646849225859605038798241, 204032734481806785543119754456569617316, 6308687907566364067313782129902290691, 16601010504475415688487155708691097587, 267844409827567109183739120606590016153, 8224746302136608660764206696943998066, 66759882079234093195284745682061177129, 246382951504754280882643835151081337286, 255668159720160142170457715248631352728, 198682585307670767869381177003851088434, 52435298055396076040371814840062860322, 71487031168170283085378067681578926209, 19270201008106231446848331516948751837, 259975200953378762173082382130139147342, 100957428421542421187997144087873975651, 208596806512779765020431672051552927799, 299145970783704112359526450087000033589, 150947534399996219237186223933189906692, 2048564430495506099844799218948689248, 18962488382754079143174369765373573160, 123031997265327646442638576943887737076, 244982544573374061178705105734141424990, 146410849043938910996544914770892579969, 223289253099676841267315311685506771609, 51374350072145272462874563304717832675, 11071799523780604861063183113721965515, 64879815349665030137608387728274669513, 80407660651138778640313857555610913997, 303240361297474032656368918727922343524, 103535171867293830164396688627880762056, 80560992291681297484967629700766125368, 143230791823232014720768325847406122476, 188716605362804777650654549500430035344, 232870220205325961834389425482865329315, 283584919111555062850512413920721407255, 206566027046056486360456937040463884619, 157265544558229360994066706355140059167, 234540100059557817987307855523008271441, 145080729935010940836509908225154438654, 87632901547252991486640361323948527297, 132851295075144433057295220850764336697, 119332580967710872282556206817561230364, 252662535367310697404410284791596079390, 116953597995893914045234747272641030589, 100249498080127826743176896590140549012, 136127222991007877469608037092253387587, 293872159333237281344632727438901916796, 188380258232793584033919525452891729603, 1610116068556601814921533488550773010, 227538093179017809788576278302184723209, 96083211912155805281570727244009758189, 177565192075026414675108774674272650977, 48610376097473152433617435307712235835, 247706157308906487216795222963091222950, 158089460554439410339817265377357657075, 242596743543458727108836420358578527964, 157838486547678450498998359338995593594, 154936428786673098370270244313756793764, 230069001282099253337070315838992422706, 302203905412042965194022309363722872023, 278925578180003228386990239779184911424, 2121847168422140085785053284950978779, 88186566913792352545205577594300112005, 127051055548524716972172930848069016819, 216775577660712694343189516378309335187, 44934779747684486400910901018161470888, 32429597712898788634301884219187226083, 219683174528279300995710495669083670544, 37001671152735870067433052249003677244, 40408367335919429215031155701333780256, 156957056705864208022145617831060134907, 180077610045061934161783737112285900966, 59357544819520045255625797086421901884, 77751400794807935281264495346525107329, 4517615764752715802675887411287287137, 76319782726782483955139757169428276003, 176009402215469456144386392247781430661, 283055695252017869386094188584670242363, 20001716567499724882317501875143788088, 125228382132280749989067609697418628387, 144053090751393640875176862167012247830, 15289106046221987660093620422889539867, 111243866573605033251079958638430165633, 169264885994758018612038619809803723688, 11895954311759483419234457833286931577, 273147053963507607445612310063799123998, 158981773284803069491507978382595811562, 41293513794446810141896116395025053234, 57441237860743029006005815967510568612, 109171476551418034153338841133917497633, 136539712287056106151501004438585146777, 278918550892367788720071091355436733468, 211360251223022250021398148918837686812, 254351242496347083009146404917085951637, 130260153203964833202474997491055897705, 221930288825889900517852991745469270910, 66354211799382156899053592476719001842, 127898620670768976254134750731374490934, 298131830425274848646460016809595859328, 132109510144911727511061804395381822418, 210917766469026421985352121201196497206, 5441137715689271309917542693016936841, 209516950406881264617228336887254107528, 92275151703152148383106907311559718841, 46255650973652148247469464088017660080, 182628529221607295465655096378164148336, 52574278547120304143820897608762444985, 63698472804719856407197390836793525437, 30457182690865024857724004613999433676, 212073418196280214618461610817423630022, 48875930775858981513092672396243080640, 113234797533868946026347891158142991388, 256534108458875318962058222544020064164, 22522715662428558833985333846937440705, 97553118958308509177643330175409499003, 197088081433425221073434635573357125592, 157303116668734020456228309942188293059, 110316346669278795114546305726864504681, 228887397917708007004920589862367347873, 112210930213921962308944716344585917343, 95017760786235266842788931502689331157, 303479014347753799316861720146531596843, 138677197920058856282155251074088437081, 285912176726299387362893467150449209426, 120309832759140713296686339140142433386, 279125897926861811239250830750932241600, 289502053647872994218190050825294169535, 262459212837236162171047720358005836712, 290390838897912466575239533978002826151, 292988850197951752250595007039860868400, 34796135808311610468205608686622819504, 25206338413385638687826160218013868658, 42180804482932648992176529097078580055, 195897225052351816559125785179252565465, 290060760535408066224831756224248708027, 34243626514368402883316460494646065629, 159497726968729366867935528734367549832, 267785772871046662107247674801793846921, 47342328853090920958565777290912999560, 194980176549393239742230551297786993434, 88020247887557921707284362381274951852, 255474100333005567974457204812640809071, 93324791124684170744053910877870176609, 69542826141091170218040988642070014011, 188678529221313094426441439309063681864, 56030802691247887446204447769438570825, 74312207153349149422500961216106557393, 153811406554673020809393530896156460494, 130232956128662318657579623819323546361, 241587755919930468705435097001858194189, 150548598672513907492388638742866339038, 38780469811591978249139697733603217652, 237554030153815380781978075720171312418, 96541634878634946114738393982914693394, 83284071476491638125716901346418260661, 277535192833115492238855935055373371297, 92291115416977028401374199691398676627, 105634075531674200869064066234662065605, 59669321288506854711632528171527160495, 24913178886798791108798737682436779604, 191902245938756063865405758957515936934, 200833770402179506644143905670947994664, 249327029439265065126080906281744759655, 2368715218056973901783211260781833927, 133209645820509536502329231321782644514, 170083361139958757944996287868734988169, 143242266754832252556264383809361085258, 198438133508477313319510861550461456953, 226416574016152349355240811564666677855, 131995850810926550122710727062184985075, 206211971624338783828953817981719254101, 95022339713176475801874420969255633409, 39239785273544046574575511790952158726, 6761950061835300419279903725369635970, 160849355761964483498641169767552240859, 44129081383649229398785011378026849128, 116611486899507912253396257166983831123, 102748760887182142877957834312659347601, 100973668783270797012352094429175531207, 110548564207426762905750742091610942634, 205424582078496700107783237952155124442, 210932790939110827079725957948996247757, 54413304958149902897514912130730392489, 181315803651356180100745517014898850424, 183346938138867395962624263310328788228, 133507835720650939452036529283981720094, 244220649646693249242542702657146329679, 111814540087048948955999016117121133729, 210757262617434713384638061648414714521, 31712005436857719771604404352654183712, 299210790483067037892753875410776716305, 34216439939230284515095120240039231491, 246820219620854547856488049434101568744, 298588211282375015522910461809769779222, 53320103067319149790078933423751044737, 164977173816081040725650999609390274279, 234782977255751828939911143180631329578, 61521250269407451751766565186333346163, 119529895182262920689181379893081203421, 154588465395872896210615516764102943961, 153034255402211966905777978896125271527, 65497510688725487475002809757533544579, 76824114145168270682129892469858568031, 218064880554787781811938382300930885801, 196850060586188141836799779247809406205, 176023892018381269394229104598502170110, 32491776807255207889633110137157036238, 41150198830446315717651890670848632754, 260753023840843193587871227195221789744, 48345408122882987831052823644867513356, 80045935233531979816083287928071697883, 131878104259519592871955471048058374000, 15534379538690707223440448056318568055, 131291412522855581131329717355299310716, 37018675243998552749630837151597269431, 144343493968520204610097930388908478903, 67236444178494959708570043908346657722, 102574100831305499879105427279131095784, 249069309513964056714882166119752611668, 210718130986716991560768592011623825976, 266242407402824082344585571101593909650, 205203132247422842477137158586071965100, 301157372202750742637385626243753030679, 40886620741595313792996852647181029560, 253361171396328884567373946949359324229, 50071128101197582041162516700015376269, 106002417001877546867386840932652850816, 224086864980106045542532841236299648038, 42103921294151508500634063253613482845, 49777138159264482913170680298952908154, 24324534484842395819609478778764950811, 204106593629836179932302789646808274058, 266707066043760482642609614924857456238, 18723835069315957900598472598907945204, 244338819469013923747256697307964210342, 36296287172854997655950896217230267111, 292888671179451539882069138267865661448, 287111415651274690627399445990831389362, 79940439572496625318602146625920961720, 288270505176661814341807462681727466925, 153921178962139214138689743179633342125, 263564317934507756965522450042219801757, 197993323684501153884855839599466707355, 72143993205715719344183507132882267579, 67511075584002491895239101559049103979, 231396344630318648781207380069016790960, 268490084177254392405211695854127631350, 45968181401712207064942095991325993181, 34472329776995578971329318400545600788, 112967316661320871429337739209994987784, 209508577387521479468956337084132598710, 194445696189141465862938111222574992064, 229942079198360020568341753187100646148, 47944382795398541172186729027517882654, 54806201653083974379270761512143387910, 93457347627015900562505045196097224001, 152033139738914238723733340538181549419, 123719026823969669345162603978875451754, 154704533151410142607151617227929824563, 32428281285686815618553795197210513625, 265229864831280807254743597731258298440, 14904705423314872103792141735779112532, 177442398230615511669857060547212895616, 144918716871520627851549439448066637518, 203019416536984157536348865479415073573, 288452420706913930307744155709559750006, 282516471994395201735206793889605510595, 150722332251745138694381051866105655391, 234504581837296595003379465512031425988, 44178766618576668748878202507789103195, 217129489675072754441642067295058817201, 245087939287551829934600756568137757979, 240954534396950014938672406581264782638] \u0026#39;\u0026#39;\u0026#39; 上述代码中，int(bit)的值为0或1。开始时经过欧拉判别法有：((a+1)|p)=1 (a|p)=-1\n又e为奇数，故其不改变勒让德符号。则如果int(bit)=1，那么((a+1)|p)=1 成立。验证即可得到bit的值：\nfrom Crypto.Util.number import * p = 303597842163255391032954159827039706827 a = 34032839867482535877794289018590990371 ciphertext = [278121435714344315140568219459348432240, 122382422611852957172920716982592319058, 191849618185577692976529819600455462899, 94093446512724714011050732403953711672, 201558180013426239467911190374373975458, 68492033218601874497788216187574770779, 126947642955989000352009944664122898350, 219437945679126072290321638679586528971, 10408701004947909240690738287845627083, 219535988722666848383982192122753961, 173567637131203826362373646044183699942, 80338874032631996985988465309690317981, 61648326003245372053550369002454592176, 277054378705807456129952597025123788853, 17470857904503332214835106820566514388, 107319431827283329450772973114594535432, 238441423134995169136195506348909981918, 99883768658373018345315220015462465736, 188411315575174906660227928060309276647, 295943321241733900048293164549062087749, 262338278682686249081320491433984960912, 22801563060010960126532333242621361398, 36078000835066266368898887303720772866, 247425961449456125528957438120145449797, 843438089399946244829648514213686381, 134335534828960937622820717215822744145, 74167533116771086420478022805099354924, 249545124784428362766858349552876226287, 37282715721530125580150140869828301122, 196898478251078084893324399909636605522, 238696815190757698227115893728186526132, 299823696269712032566096751491934189084, 36767842703053676220422513310147909442, 281632109692842887259013724387076511623, 205224361514529735350420756653899454354, 129596988754151892987950536398173236050, 97446545236373291551224026108880226180, 14756086145599449889630210375543256004, 286168982698537894139229515711563677530, 100213185917356165383902831965625948491, 268158998117979449824644211372962370753, 264445941122079798432485452672458533870, 87798213581165493463875527911737074678, 131092115794704283915645135973964447801, 164706020771920540681638256590936188046, 178911145710348095185845690896985420147, 154776411353263771717768237918437437524, 260700611701259748940616668959555019434, 222035631087536380654643071679210307962, 281292430628313502184158157303993732703, 24585161817233257375093541076165757776, 269816384363209013058085915818661743171, 39975571110634682056180877801094873602, 125235869385356820424712474803526156473, 218090799597950517977618266111343968738, 144927096680470512196610409630841999788, 213811208492716237073777701143156745108, 64650890972496600196147221913475681291, 302694535366090904732833802133573214043, 214939649183312746702067838266793720455, 219122905927283854730628133811860801459, 224882607595640234803004206355378578645, 260797062521664439666117613111279885285, 279805661574982797810336125346375782066, 147173814739967617543091047462951522968, 23908277835281045050455945166237585493, 186338363482466926309454195056482648936, 295140548360506354817984847059061185817, 151948366859968493761034274719548683660, 96829048650546562162402357888582895187, 61129603762762161772506800496463804206, 83474322431616849774020088719454672415, 25094865151197136947956010155927090038, 86284568910378075382309315924388555908, 269311313874077441782483719283243368999, 293865655623484061732669067594899514872, 42618744258317592068586041005421369378, 54330626035773013687614797098120791595, 147903584483139198945881545544727290390, 290219451327796902155034830296135328101, 147951591390019765447087623264411247959, 176721307425594106045985172455880551666, 10617017342351249793850566048327751981, 166002147246002788729535202156354835048, 43653265786517886972591512103899543742, 191250321143079662898769478274249620839, 142288830015965036385306900781029447609, 231943053864301712428957240550789860578, 259705854206260213018172677443232515015, 42547692646223561211915772930251024103, 210863755365631055277867177762462471179, 140297326776889591830655052829600610449, 136970598261461830690726521708413303997, 93221970399798040564077738881047391445, 192314170920206027886439562261321846026, 95904582457122325051140875987053990027, 158334009503860664724416914265160737388, 134039922705083767606698907224295596883, 7789601161004867293103537392246577269, 261069289329878459425835380641261840913, 123743427894205417735664872035238090896, 20126583572929979071576315733108811761, 5317214299018099740195727361345674110, 68965882674411789667953455991785095270, 235934145208367401015357242228361016868, 250709310980093244562698210062174570956, 167048130489822745377277729681835553856, 122439593796334321806299678109589886368, 117953800124952553873241816859976377866, 226311466875372429157352019491582796620, 301401080214561977683439914412806833619, 255816105091394723475431389696875064495, 73243049441397892506665249226961409560, 226985189100195407227032930008331832009, 164462051705780513134747720427967016844, 97905180778488273557095248936896399883, 40737879120410802220891174679005117779, 180413920169781019749877067396006212488, 171309368917976988181007951396904157090, 215065878665354148046787050342635722874, 54225964222741166664978354789209176721, 179980445108969868669560591527220171967, 39118880593034932654127449293138635964, 170210538859699997092506207353260760212, 62152643864232748107111075535730424573, 28285579676042878568229909932560645217, 69823876778445954036922428013285910904, 170371231064701443428318684885998283021, 211884923965526285445904695039560930451, 2912793651373467597058997684762696593, 220544861190999177045275484705781090327, 142755270297166955179253470066788794096, 264271123927382232040584192781810655563, 214901195876112453126242978678182365781, 252916600207311996808457367909175218824, 176399700725319294248909617737135018444, 230677646264271256129104604724615560658, 1568101696521094800575010545520002520, 276644650735844694794889591823343917140, 185355461344975191330786362319126511681, 248497269558037476989199286642120676823, 27426372552503547932146407600438894266, 99885839446999373024614710052031031159, 238693364649026611386487480573211208980, 27047849084544903200283111147329657123, 261687609401872239323715016608713989139, 34926503987070847956303036393611830590, 252495954285655595492775877967398282722, 249358827602419141539353237669905281246, 42551212101869966935955269842854722856, 286527336123436427709115043975536071462, 158097411156207320921055042509886995091, 40982984899524424348979403377331335675, 87268254405858939730919659372073314983, 142920872841164853694746048293715385493, 280344634952903421792629929689092857993, 203584314487374069738101729666435007339, 76747904284507590577908045394001414841, 18608573158088521401404614102481693137, 104158289118605398449367221892619783009, 182616719368573751169836443225324741716, 272025723760783252166092979911587562064, 24194069309604403496494752448487752613, 71973842397785917741048132725314885345, 281558046604363121112749722271741416764, 66965324704079734796576428718112513855, 105222756356650324548621319241035836840, 331654051401420900830576011369146182, 131087815164777263900650262777429797113, 76104729920151139813274463849368737612, 163253554841934325278065946152769269296, 35973933431510942249046321254376084104, 223355354158871484030430212060934655984, 181704973473887713398031933516341967465, 131391458395622565487686089688656869743, 153029062510158353978320224242258979076, 75598349867958834632866616947240059419, 107656133091853571710502064573530657194, 261653899003034450454605322537555204702, 102387069931966536076616272953425585051, 174654548539988861301269811985320013260, 30731762585661721683653192240732246059, 265493340795853624586170054917042208660, 174818040730242275465453007894471517233, 99514915046145707535310601810631334278, 133978892607644700903700803642408771370, 216019770199630171637325931783378096100, 76687884966028369399497157007109898467, 262185741950606001987209986574269562289, 101935410844521914696784339882721918198, 85956270718878931834010975962772401589, 117578315837774870077915813512746446219, 209811226703488479967593762805568394383, 85782228978690599612110880989543246041, 234993402267259336147096170367513324439, 158487299348452041021565296682698871789, 159701431055714867184644360639841355076, 109022557288733938098734847159477770521, 20764822884655633017647117775843651332, 144987524936939260617020678038224835887, 214906746504968333094519539609226540495, 61852186870193663367998110214331582115, 90175894032076080713807606548780168998, 283504071501037047650569090140982777586, 267695305479884628857258564337611106120, 2466175482923380874813569827625743835, 62561740902965346823256447383892272796, 181458673990444296212252831090106274182, 151903421483215372136947284355251617709, 19545903652854510304023406921387221130, 219205004027218279279153442572018305650, 62495663621315535552427938857863551873, 12365469869484359722316573851483855865, 84444120685499458796249283893323932282, 240719245204462516267560756675192129462, 27868242791206675092288978266113368469, 231956104988320170956546781095814860314, 238410591787987745803829175586952288627, 290649141309468101840354611586699479851, 288298044918505512172272603794059992911, 43375655853069820305921366762777897508, 195308577786654489057887409352840304641, 184459971400898842809886506207633536394, 255884612697066296714973816950917234211, 8695922085804648269560669225439485137, 109407350389195091443836128149623969417, 40151058765649465408124869078260007620, 125484946058191366826510549493690011718, 71132588066103752922321942940739808864, 74434669478187680319595294456652807097, 187368213679294937718535073296853726111, 63461505676143678393259420949793811831, 131619805472714703711458729455838994067, 8579657158619864010437706463902003097, 60626278761876782233388469543817973673, 44776499706241603722632560896220653186, 257249861781237389988455384617803171877, 161899873165011719282095749671993720527, 73303482092538159761390536102771615311, 141674253732456103774983358188317473860, 112299149158347774069079224861237069975, 192409969047313867540459549167233638120, 52560717143548208264188844553309600513, 209294007943747095607573416682772182613, 65285862009539442533024037477398617382, 141465096635701758351979378177631042196, 282970656853503001128091562858564344839, 50475483578642585644452991078499278745, 162546597698227455939743094437394415689, 65258447920153625609456176138520078583, 25184730952052088803921023041299838584, 228883100940853988548836641050823478387, 234342509561041384559923481191578502671, 96929129863331626375704681481278825323, 288533470498072097357398960101692503873, 202238020435442160571930572760188491021, 179010548891454398845389500871076122861, 210509821764943794358893224681677583929, 301357944197101288505771002301759006254, 188933290023352627523422420332593360537, 207946655777875200521742190622482472884, 288626263488145443150622420747070805416, 75616301779108425588545170038742534166, 58163857263381687168244101022135667109, 297006021514663344215599115965804102114, 297690420826548736122127126645053452341, 88307045391242971429880119414942510712, 186427606153958359494215188169120285788, 135488686276533521058776859854524444361, 185380054960856211260651416683468161990, 175033658667416561573078028845860911744, 223026004671602541191897755812121342354, 34657268786986063209312902409995458857, 120560332690000675303295481174067849230, 55304621833927249516093996383526467671, 111480233798478730015825495041130765708, 188996716801525995463705449722399676888, 276300230605454487705048192796463035731, 195951365841304132244984630163178946841, 97383655947416522972353051984313703380, 94486945760999630041197414137963583839, 180706938513681126017333618518691884990, 291355503207799224380050183085704824037, 69034413486375685936282884707402207337, 147750870458026934714106830614187010708, 45030500748522416863096615057804736553, 242760053973560804002707125041520857401, 78549841097746795170488790352479728712, 2356186555504071026416878904180857750, 250486437623828232647064146324392061051, 23443836455198610186212360005846025976, 174557226633145985326629017377610499133, 105578481831185315088267357915446186040, 275620780071666328887795273613981325091, 23435505408737317601794562472269448966, 153209223406380813663608757935808571040, 298537417505667302508269715871007454162, 203833907122687718347615710181705388877, 41923370405573382737900061813058979798, 3762696947926387653032627637114050038, 201362054098012734707571348865729525585, 285561801443127226417656620776228615886, 111526376057659222252771678197929357387, 203857473647840873587593099562928738804, 44500972779851392967974092230683443589, 131565609415497588649207556985146740667, 118140388348838985266223643241117982200, 151449885527204880099343472664885565851, 296392921256617994387220911796693904909, 171323803851876663161606688343678019752, 77152982746512263077542395226111426871, 71648764903315646849225859605038798241, 204032734481806785543119754456569617316, 6308687907566364067313782129902290691, 16601010504475415688487155708691097587, 267844409827567109183739120606590016153, 8224746302136608660764206696943998066, 66759882079234093195284745682061177129, 246382951504754280882643835151081337286, 255668159720160142170457715248631352728, 198682585307670767869381177003851088434, 52435298055396076040371814840062860322, 71487031168170283085378067681578926209, 19270201008106231446848331516948751837, 259975200953378762173082382130139147342, 100957428421542421187997144087873975651, 208596806512779765020431672051552927799, 299145970783704112359526450087000033589, 150947534399996219237186223933189906692, 2048564430495506099844799218948689248, 18962488382754079143174369765373573160, 123031997265327646442638576943887737076, 244982544573374061178705105734141424990, 146410849043938910996544914770892579969, 223289253099676841267315311685506771609, 51374350072145272462874563304717832675, 11071799523780604861063183113721965515, 64879815349665030137608387728274669513, 80407660651138778640313857555610913997, 303240361297474032656368918727922343524, 103535171867293830164396688627880762056, 80560992291681297484967629700766125368, 143230791823232014720768325847406122476, 188716605362804777650654549500430035344, 232870220205325961834389425482865329315, 283584919111555062850512413920721407255, 206566027046056486360456937040463884619, 157265544558229360994066706355140059167, 234540100059557817987307855523008271441, 145080729935010940836509908225154438654, 87632901547252991486640361323948527297, 132851295075144433057295220850764336697, 119332580967710872282556206817561230364, 252662535367310697404410284791596079390, 116953597995893914045234747272641030589, 100249498080127826743176896590140549012, 136127222991007877469608037092253387587, 293872159333237281344632727438901916796, 188380258232793584033919525452891729603, 1610116068556601814921533488550773010, 227538093179017809788576278302184723209, 96083211912155805281570727244009758189, 177565192075026414675108774674272650977, 48610376097473152433617435307712235835, 247706157308906487216795222963091222950, 158089460554439410339817265377357657075, 242596743543458727108836420358578527964, 157838486547678450498998359338995593594, 154936428786673098370270244313756793764, 230069001282099253337070315838992422706, 302203905412042965194022309363722872023, 278925578180003228386990239779184911424, 2121847168422140085785053284950978779, 88186566913792352545205577594300112005, 127051055548524716972172930848069016819, 216775577660712694343189516378309335187, 44934779747684486400910901018161470888, 32429597712898788634301884219187226083, 219683174528279300995710495669083670544, 37001671152735870067433052249003677244, 40408367335919429215031155701333780256, 156957056705864208022145617831060134907, 180077610045061934161783737112285900966, 59357544819520045255625797086421901884, 77751400794807935281264495346525107329, 4517615764752715802675887411287287137, 76319782726782483955139757169428276003, 176009402215469456144386392247781430661, 283055695252017869386094188584670242363, 20001716567499724882317501875143788088, 125228382132280749989067609697418628387, 144053090751393640875176862167012247830, 15289106046221987660093620422889539867, 111243866573605033251079958638430165633, 169264885994758018612038619809803723688, 11895954311759483419234457833286931577, 273147053963507607445612310063799123998, 158981773284803069491507978382595811562, 41293513794446810141896116395025053234, 57441237860743029006005815967510568612, 109171476551418034153338841133917497633, 136539712287056106151501004438585146777, 278918550892367788720071091355436733468, 211360251223022250021398148918837686812, 254351242496347083009146404917085951637, 130260153203964833202474997491055897705, 221930288825889900517852991745469270910, 66354211799382156899053592476719001842, 127898620670768976254134750731374490934, 298131830425274848646460016809595859328, 132109510144911727511061804395381822418, 210917766469026421985352121201196497206, 5441137715689271309917542693016936841, 209516950406881264617228336887254107528, 92275151703152148383106907311559718841, 46255650973652148247469464088017660080, 182628529221607295465655096378164148336, 52574278547120304143820897608762444985, 63698472804719856407197390836793525437, 30457182690865024857724004613999433676, 212073418196280214618461610817423630022, 48875930775858981513092672396243080640, 113234797533868946026347891158142991388, 256534108458875318962058222544020064164, 22522715662428558833985333846937440705, 97553118958308509177643330175409499003, 197088081433425221073434635573357125592, 157303116668734020456228309942188293059, 110316346669278795114546305726864504681, 228887397917708007004920589862367347873, 112210930213921962308944716344585917343, 95017760786235266842788931502689331157, 303479014347753799316861720146531596843, 138677197920058856282155251074088437081, 285912176726299387362893467150449209426, 120309832759140713296686339140142433386, 279125897926861811239250830750932241600, 289502053647872994218190050825294169535, 262459212837236162171047720358005836712, 290390838897912466575239533978002826151, 292988850197951752250595007039860868400, 34796135808311610468205608686622819504, 25206338413385638687826160218013868658, 42180804482932648992176529097078580055, 195897225052351816559125785179252565465, 290060760535408066224831756224248708027, 34243626514368402883316460494646065629, 159497726968729366867935528734367549832, 267785772871046662107247674801793846921, 47342328853090920958565777290912999560, 194980176549393239742230551297786993434, 88020247887557921707284362381274951852, 255474100333005567974457204812640809071, 93324791124684170744053910877870176609, 69542826141091170218040988642070014011, 188678529221313094426441439309063681864, 56030802691247887446204447769438570825, 74312207153349149422500961216106557393, 153811406554673020809393530896156460494, 130232956128662318657579623819323546361, 241587755919930468705435097001858194189, 150548598672513907492388638742866339038, 38780469811591978249139697733603217652, 237554030153815380781978075720171312418, 96541634878634946114738393982914693394, 83284071476491638125716901346418260661, 277535192833115492238855935055373371297, 92291115416977028401374199691398676627, 105634075531674200869064066234662065605, 59669321288506854711632528171527160495, 24913178886798791108798737682436779604, 191902245938756063865405758957515936934, 200833770402179506644143905670947994664, 249327029439265065126080906281744759655, 2368715218056973901783211260781833927, 133209645820509536502329231321782644514, 170083361139958757944996287868734988169, 143242266754832252556264383809361085258, 198438133508477313319510861550461456953, 226416574016152349355240811564666677855, 131995850810926550122710727062184985075, 206211971624338783828953817981719254101, 95022339713176475801874420969255633409, 39239785273544046574575511790952158726, 6761950061835300419279903725369635970, 160849355761964483498641169767552240859, 44129081383649229398785011378026849128, 116611486899507912253396257166983831123, 102748760887182142877957834312659347601, 100973668783270797012352094429175531207, 110548564207426762905750742091610942634, 205424582078496700107783237952155124442, 210932790939110827079725957948996247757, 54413304958149902897514912130730392489, 181315803651356180100745517014898850424, 183346938138867395962624263310328788228, 133507835720650939452036529283981720094, 244220649646693249242542702657146329679, 111814540087048948955999016117121133729, 210757262617434713384638061648414714521, 31712005436857719771604404352654183712, 299210790483067037892753875410776716305, 34216439939230284515095120240039231491, 246820219620854547856488049434101568744, 298588211282375015522910461809769779222, 53320103067319149790078933423751044737, 164977173816081040725650999609390274279, 234782977255751828939911143180631329578, 61521250269407451751766565186333346163, 119529895182262920689181379893081203421, 154588465395872896210615516764102943961, 153034255402211966905777978896125271527, 65497510688725487475002809757533544579, 76824114145168270682129892469858568031, 218064880554787781811938382300930885801, 196850060586188141836799779247809406205, 176023892018381269394229104598502170110, 32491776807255207889633110137157036238, 41150198830446315717651890670848632754, 260753023840843193587871227195221789744, 48345408122882987831052823644867513356, 80045935233531979816083287928071697883, 131878104259519592871955471048058374000, 15534379538690707223440448056318568055, 131291412522855581131329717355299310716, 37018675243998552749630837151597269431, 144343493968520204610097930388908478903, 67236444178494959708570043908346657722, 102574100831305499879105427279131095784, 249069309513964056714882166119752611668, 210718130986716991560768592011623825976, 266242407402824082344585571101593909650, 205203132247422842477137158586071965100, 301157372202750742637385626243753030679, 40886620741595313792996852647181029560, 253361171396328884567373946949359324229, 50071128101197582041162516700015376269, 106002417001877546867386840932652850816, 224086864980106045542532841236299648038, 42103921294151508500634063253613482845, 49777138159264482913170680298952908154, 24324534484842395819609478778764950811, 204106593629836179932302789646808274058, 266707066043760482642609614924857456238, 18723835069315957900598472598907945204, 244338819469013923747256697307964210342, 36296287172854997655950896217230267111, 292888671179451539882069138267865661448, 287111415651274690627399445990831389362, 79940439572496625318602146625920961720, 288270505176661814341807462681727466925, 153921178962139214138689743179633342125, 263564317934507756965522450042219801757, 197993323684501153884855839599466707355, 72143993205715719344183507132882267579, 67511075584002491895239101559049103979, 231396344630318648781207380069016790960, 268490084177254392405211695854127631350, 45968181401712207064942095991325993181, 34472329776995578971329318400545600788, 112967316661320871429337739209994987784, 209508577387521479468956337084132598710, 194445696189141465862938111222574992064, 229942079198360020568341753187100646148, 47944382795398541172186729027517882654, 54806201653083974379270761512143387910, 93457347627015900562505045196097224001, 152033139738914238723733340538181549419, 123719026823969669345162603978875451754, 154704533151410142607151617227929824563, 32428281285686815618553795197210513625, 265229864831280807254743597731258298440, 14904705423314872103792141735779112532, 177442398230615511669857060547212895616, 144918716871520627851549439448066637518, 203019416536984157536348865479415073573, 288452420706913930307744155709559750006, 282516471994395201735206793889605510595, 150722332251745138694381051866105655391, 234504581837296595003379465512031425988, 44178766618576668748878202507789103195, 217129489675072754441642067295058817201, 245087939287551829934600756568137757979, 240954534396950014938672406581264782638] msg=\u0026#39;\u0026#39; for i in range(len(ciphertext)): msg+=\u0026#39;1\u0026#39; if(pow(ciphertext[i],(p-1)//2,p)==1) else \u0026#39;0\u0026#39; print(long_to_bytes(int(msg,2))) #b\u0026#39;moectf{minus_one_1s_n0t_qu4dr4tic_r4sidu4_when_p_mod_f0ur_equ41_to_thr33}\u0026#39; 应当注意的是，要理解bytes_to_long()和long_to_bytes()的工作原理\nnew_system # from random import randint from Crypto.Util.number import getPrime,bytes_to_long flag = b\u0026#39;moectf{???????????????}\u0026#39; gift = bytes_to_long(flag) def parametergenerate(): q = getPrime(256) gift1 = randint(1, q) gift2 = (gift - gift1) % q x = randint(1, q) assert gift == (gift1 + gift2) % q return q , x , gift1, gift2 def encrypt(m , q , x): a = randint(1, q) c = (a*x + m) % q return [a , c] q , x , gift1 , gift2 = parametergenerate() print(encrypt(gift1 , q , x)) print(encrypt(gift2 , q , x)) print(encrypt(gift , q , x)) print(f\u0026#39;q = {q}\u0026#39;) 题中所示加密方式主要为 a*x+m=c mod q\n有：a1*x+m1=c1 mod q\na2*x+m2=c2 mod q\n加和有：(a1+a2)*x+(m1+m2)=(c1+c2) mod q\na3*x+m =c3 mod q\n其中，m=m1+m2\n故可以消去m1+m2得到x，从而得到最终结果:\nfrom Crypto.Util.number import * a1,c1=[48152794364522745851371693618734308982941622286593286738834529420565211572487, 21052760152946883017126800753094180159601684210961525956716021776156447417961] a2,c2=[48649737427609115586886970515713274413023152700099032993736004585718157300141, 6060718815088072976566240336428486321776540407635735983986746493811330309844] a3,c3=[30099883325957937700435284907440664781247503171217717818782838808179889651361, 85333708281128255260940125642017184300901184334842582132090488518099650581761] q = 105482865285555225519947662900872028851795846950902311343782163147659668129411 x=pow(a1+a2-a3,-1,q)*(c1+c2-c3)%q print(long_to_bytes((c3-a3*x)%q)) #b\u0026#39;moectf{gift_1s_present}\u0026#39; RSA_revenge # from Crypto.Util.number import getPrime, isPrime, bytes_to_long from secret import flag def emirp(x): y = 0 while x !=0: y = y*2 + x%2 x = x//2 return y while True: p = getPrime(512) q = emirp(p) if isPrime(q): break n = p*q e = 65537 m = bytes_to_long(flag) c = pow(m,e,n) print(f\u0026#34;{n = }\u0026#34;) print(f\u0026#34;{c = }\u0026#34;) 根据核心代码：\ndef emirp(x): y = 0 while x !=0: y = y*2 + x%2 x = x//2 return y p和q的二进制表示完全相反，可以爆破：\nfrom Crypto.Util.number import * n = 141326884939079067429645084585831428717383389026212274986490638181168709713585245213459139281395768330637635670530286514361666351728405851224861268366256203851725349214834643460959210675733248662738509224865058748116797242931605149244469367508052164539306170883496415576116236739853057847265650027628600443901 c = 47886145637416465474967586561554275347396273686722042112754589742652411190694422563845157055397690806283389102421131949492150512820301748529122456307491407924640312270962219946993529007414812671985960186335307490596107298906467618684990500775058344576523751336171093010950665199612378376864378029545530793597 e = 65537 result=[] def get(a,b,k): if k==256: if a*b==n: result.append([a,b]) for i in range(2): for j in range(2): a1=a+i*2**k+j*2**(511-k) b1=b+i*2**(511-k)+j*2**k if a*b\u0026gt;n: #i和j不能太大 continue if (a1*b1)%2**(k+1) != (n%2**(k+1)): #低位要是相同的，不同就没必要下一组 continue if (a1+2**(511-k))*(b1+2**(511-k))\u0026lt;n: #i,j过于小，即使下一步最大也达不到目的(就是预先给a,b加上一个下一步可能的最大值，发现还是小就不行) continue get(a1,b1,k+1) get(0,0,0) [p,q]=result[0] print(long_to_bytes(pow(c,inverse(e, (p-1)*(q-1)),n))) #b\u0026#39;moectf{WA!y0u@er***g00((d))}\u0026#39; One more bit # \u0026#39;\u0026#39;\u0026#39; pk = (134133840507194879124722303971806829214527933948661780641814514330769296658351734941972795427559665538634298343171712895678689928571804399278111582425131730887340959438180029645070353394212857682708370490223871309129948337487286534021548834043845658248447393803949524601871557448883163646364233913283438778267, 83710839781828547042000099822479827455150839630087752081720660846682103437904198705287610613170124755238284685618099812447852915349294538670732128599161636818193216409714024856708796982283165572768164303554014943361769803463110874733906162673305654979036416246224609509772196787570627778347908006266889151871) ciphertext = 73228838248853753695300650089851103866994923279710500065528688046732360241259421633583786512765328703209553157156700672911490451923782130514110796280837233714066799071157393374064802513078944766577262159955593050786044845920732282816349811296561340376541162788570190578690333343882441362690328344037119622750 \u0026#39;\u0026#39;\u0026#39; from Crypto.Util.number import getStrongPrime, bytes_to_long, GCD, inverse from Crypto.Util.Padding import pad from secret import flag import random def genKey(nbits,dbits): p = getStrongPrime(nbits//2) #512 bits q = getStrongPrime(nbits//2) n = p*q phi = (p-1)*(q-1) while True: d = random.getrandbits(dbits) #258 bits if d.bit_length() == dbits: if GCD(d, phi) == 1: e = inverse(d, phi) pk = (n, e) sk = (p, q, d) return pk, sk nbits = 1024 dbits = 258 message = pad(flag,16) msg = pad(message, 16) m = bytes_to_long(msg) pk= genKey(nbits, dbits)[0] n, e = pk ciphertext = pow(m, e, n) with open(\u0026#34;data.txt\u0026#34;,\u0026#34;w\u0026#34;) as f: f.write(f\u0026#34;pk = {pk}\\n\u0026#34;) f.write(f\u0026#34;ciphertext = {ciphertext}\\n\u0026#34;) f.close() 看到e特别大\u0026ndash;\u0026gt;d很小，小私钥攻击：wiener attack 但是其界为d\u0026lt;1/3N^(1/4)，此处d为258bits，N为1024bits\u0026lt;4258=1032bits。故选择boneh_durfee attack（d小于N^0.292，这里1024*0.292=299\u0026gt;258√）\nfrom __future__ import print_function import time ############################################ # Config ########################################## \u0026#34;\u0026#34;\u0026#34; Setting debug to true will display more informations about the lattice, the bounds, the vectors... \u0026#34;\u0026#34;\u0026#34; debug = True \u0026#34;\u0026#34;\u0026#34; Setting strict to true will stop the algorithm (and return (-1, -1)) if we don\u0026#39;t have a correct upperbound on the determinant. Note that this doesn\u0026#39;t necesseraly mean that no solutions will be found since the theoretical upperbound is usualy far away from actual results. That is why you should probably use `strict = False` \u0026#34;\u0026#34;\u0026#34; strict = False \u0026#34;\u0026#34;\u0026#34; This is experimental, but has provided remarkable results so far. It tries to reduce the lattice as much as it can while keeping its efficiency. I see no reason not to use this option, but if things don\u0026#39;t work, you should try disabling it \u0026#34;\u0026#34;\u0026#34; helpful_only = True dimension_min = 7 # stop removing if lattice reaches that dimension ############################################ # Functions ########################################## # display stats on helpful vectors def helpful_vectors(BB, modulus): nothelpful = 0 for ii in range(BB.dimensions()[0]): if BB[ii,ii] \u0026gt;= modulus: nothelpful += 1 print(nothelpful, \u0026#34;/\u0026#34;, BB.dimensions()[0], \u0026#34; vectors are not helpful\u0026#34;) # display matrix picture with 0 and X def matrix_overview(BB, bound): for ii in range(BB.dimensions()[0]): a = (\u0026#39;%02d \u0026#39; % ii) for jj in range(BB.dimensions()[1]): a += \u0026#39;0\u0026#39; if BB[ii,jj] == 0 else \u0026#39;X\u0026#39; if BB.dimensions()[0] \u0026lt; 60: a += \u0026#39; \u0026#39; if BB[ii, ii] \u0026gt;= bound: a += \u0026#39;~\u0026#39; print(a) # tries to remove unhelpful vectors # we start at current = n-1 (last vector) def remove_unhelpful(BB, monomials, bound, current): # end of our recursive function if current == -1 or BB.dimensions()[0] \u0026lt;= dimension_min: return BB # we start by checking from the end for ii in range(current, -1, -1): # if it is unhelpful: if BB[ii, ii] \u0026gt;= bound: affected_vectors = 0 affected_vector_index = 0 # let\u0026#39;s check if it affects other vectors for jj in range(ii + 1, BB.dimensions()[0]): # if another vector is affected: # we increase the count if BB[jj, ii] != 0: affected_vectors += 1 affected_vector_index = jj # level:0 # if no other vectors end up affected # we remove it if affected_vectors == 0: print(\u0026#34;* removing unhelpful vector\u0026#34;, ii) BB = BB.delete_columns([ii]) BB = BB.delete_rows([ii]) monomials.pop(ii) BB = remove_unhelpful(BB, monomials, bound, ii-1) return BB # level:1 # if just one was affected we check # if it is affecting someone else elif affected_vectors == 1: affected_deeper = True for kk in range(affected_vector_index + 1, BB.dimensions()[0]): # if it is affecting even one vector # we give up on this one if BB[kk, affected_vector_index] != 0: affected_deeper = False # remove both it if no other vector was affected and # this helpful vector is not helpful enough # compared to our unhelpful one if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) \u0026lt; abs(bound - BB[ii, ii]): print(\u0026#34;* removing unhelpful vectors\u0026#34;, ii, \u0026#34;and\u0026#34;, affected_vector_index) BB = BB.delete_columns([affected_vector_index, ii]) BB = BB.delete_rows([affected_vector_index, ii]) monomials.pop(affected_vector_index) monomials.pop(ii) BB = remove_unhelpful(BB, monomials, bound, ii-1) return BB # nothing happened return BB \u0026#34;\u0026#34;\u0026#34; Returns: * 0,0 if it fails * -1,-1 if `strict=true`, and determinant doesn\u0026#39;t bound * x0,y0 the solutions of `pol` \u0026#34;\u0026#34;\u0026#34; def boneh_durfee(pol, modulus, mm, tt, XX, YY): \u0026#34;\u0026#34;\u0026#34; Boneh and Durfee revisited by Herrmann and May finds a solution if: * d \u0026lt; N^delta * |x| \u0026lt; e^delta * |y| \u0026lt; e^0.5 whenever delta \u0026lt; 1 - sqrt(2)/2 ~ 0.292 \u0026#34;\u0026#34;\u0026#34; # substitution (Herrman and May) PR.\u0026lt;u, x, y\u0026gt; = PolynomialRing(ZZ) Q = PR.quotient(x*y + 1 - u) # u = xy + 1 polZ = Q(pol).lift() UU = XX*YY + 1 # x-shifts gg = [] for kk in range(mm + 1): for ii in range(mm - kk + 1): xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk gg.append(xshift) gg.sort() # x-shifts list of monomials monomials = [] for polynomial in gg: for monomial in polynomial.monomials(): if monomial not in monomials: monomials.append(monomial) monomials.sort() # y-shifts (selected by Herrman and May) for jj in range(1, tt + 1): for kk in range(floor(mm/tt) * jj, mm + 1): yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk) yshift = Q(yshift).lift() gg.append(yshift) # substitution # y-shifts list of monomials for jj in range(1, tt + 1): for kk in range(floor(mm/tt) * jj, mm + 1): monomials.append(u^kk * y^jj) # construct lattice B nn = len(monomials) BB = Matrix(ZZ, nn) for ii in range(nn): BB[ii, 0] = gg[ii](0, 0, 0) for jj in range(1, ii + 1): if monomials[jj] in gg[ii].monomials(): BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY) # Prototype to reduce the lattice if helpful_only: # automatically remove BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1) # reset dimension nn = BB.dimensions()[0] if nn == 0: print(\u0026#34;failure\u0026#34;) return 0,0 # check if vectors are helpful if debug: helpful_vectors(BB, modulus^mm) # check if determinant is correctly bounded det = BB.det() bound = modulus^(mm*nn) if det \u0026gt;= bound: print(\u0026#34;We do not have det \u0026lt; bound. Solutions might not be found.\u0026#34;) print(\u0026#34;Try with highers m and t.\u0026#34;) if debug: diff = (log(det) - log(bound)) / log(2) print(\u0026#34;size det(L) - size e^(m*n) = \u0026#34;, floor(diff)) if strict: return -1, -1 else: print(\u0026#34;det(L) \u0026lt; e^(m*n) (good! If a solution exists \u0026lt; N^delta, it will be found)\u0026#34;) # display the lattice basis if debug: matrix_overview(BB, modulus^mm) # LLL if debug: print(\u0026#34;optimizing basis of the lattice via LLL, this can take a long time\u0026#34;) BB = BB.LLL() if debug: print(\u0026#34;LLL is done!\u0026#34;) # transform vector i \u0026amp; j -\u0026gt; polynomials 1 \u0026amp; 2 if debug: print(\u0026#34;looking for independent vectors in the lattice\u0026#34;) found_polynomials = False for pol1_idx in range(nn - 1): for pol2_idx in range(pol1_idx + 1, nn): # for i and j, create the two polynomials PR.\u0026lt;w,z\u0026gt; = PolynomialRing(ZZ) pol1 = pol2 = 0 for jj in range(nn): pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY) pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY) # resultant PR.\u0026lt;q\u0026gt; = PolynomialRing(ZZ) rr = pol1.resultant(pol2) # are these good polynomials? if rr.is_zero() or rr.monomials() == [1]: continue else: print(\u0026#34;found them, using vectors\u0026#34;, pol1_idx, \u0026#34;and\u0026#34;, pol2_idx) found_polynomials = True break if found_polynomials: break if not found_polynomials: print(\u0026#34;no independant vectors could be found. This should very rarely happen...\u0026#34;) return 0, 0 rr = rr(q, q) # solutions soly = rr.roots() if len(soly) == 0: print(\u0026#34;Your prediction (delta) is too small\u0026#34;) return 0, 0 soly = soly[0][0] ss = pol1(q, soly) solx = ss.roots()[0][0] # return solx, soly def example(): ############################################ # How To Use This Script ########################################## # # The problem to solve (edit the following values) # # the modulus #N = 0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db # the public exponent #e = 0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517 N,e=(134133840507194879124722303971806829214527933948661780641814514330769296658351734941972795427559665538634298343171712895678689928571804399278111582425131730887340959438180029645070353394212857682708370490223871309129948337487286534021548834043845658248447393803949524601871557448883163646364233913283438778267, 83710839781828547042000099822479827455150839630087752081720660846682103437904198705287610613170124755238284685618099812447852915349294538670732128599161636818193216409714024856708796982283165572768164303554014943361769803463110874733906162673305654979036416246224609509772196787570627778347908006266889151871) # the hypothesis on the private exponent (the theoretical maximum is 0.292) delta = .18 # this means that d \u0026lt; N^delta # # Lattice (tweak those values) # # you should tweak this (after a first run), (e.g. increment it until a solution is found) m = 4 # size of the lattice (bigger the better/slower) # you need to be a lattice master to tweak these t = int((1-2*delta) * m) # optimization from Herrmann and May X = 2*floor(N^delta) # this _might_ be too much Y = floor(N^(1/2)) # correct if p, q are ~ same size # # Don\u0026#39;t touch anything below # # Problem put in equation P.\u0026lt;x,y\u0026gt; = PolynomialRing(ZZ) A = int((N+1)/2) pol = 1 + x * (A + y) # # Find the solutions! # # Checking bounds if debug: print(\u0026#34;=== checking values ===\u0026#34;) print(\u0026#34;* delta:\u0026#34;, delta) print(\u0026#34;* delta \u0026lt; 0.292\u0026#34;, delta \u0026lt; 0.292) print(\u0026#34;* size of e:\u0026#34;, int(log(e)/log(2))) print(\u0026#34;* size of N:\u0026#34;, int(log(N)/log(2))) print(\u0026#34;* m:\u0026#34;, m, \u0026#34;, t:\u0026#34;, t) # boneh_durfee if debug: print(\u0026#34;=== running algorithm ===\u0026#34;) start_time = time.time() solx, soly = boneh_durfee(pol, e, m, t, X, Y) # found a solution? if solx \u0026gt; 0: print(\u0026#34;=== solution found ===\u0026#34;) if False: print(\u0026#34;x:\u0026#34;, solx) print(\u0026#34;y:\u0026#34;, soly) d = int(pol(solx, soly) / e) print(\u0026#34;private key found:\u0026#34;, d) else: print(\u0026#34;=== no solution was found ===\u0026#34;) if debug: print((\u0026#34;=== %s seconds ===\u0026#34; % (time.time() - start_time))) if __name__ == \u0026#34;__main__\u0026#34;: example() === checking values === * delta: 0.180000000000000 * delta \u0026lt; 0.292 True * size of e: 1022 * size of N: 1023 * m: 4 , t: 2 === running algorithm === * removing unhelpful vector 0 6 / 18 vectors are not helpful det(L) \u0026lt; e^(m*n) (good! If a solution exists \u0026lt; N^delta, it will be found) 00 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ~ 01 X X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 02 0 0 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ~ 03 0 0 X X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 04 0 0 X X X 0 0 0 0 0 0 0 0 0 0 0 0 0 05 0 0 0 0 0 X 0 0 0 0 0 0 0 0 0 0 0 0 ~ 06 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 0 0 0 ~ 07 0 0 0 0 0 X X X 0 0 0 0 0 0 0 0 0 0 08 0 0 0 0 0 X X X X 0 0 0 0 0 0 0 0 0 09 0 0 0 0 0 0 0 0 0 X 0 0 0 0 0 0 0 0 ~ 10 0 0 0 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 ~ 11 0 0 0 0 0 0 0 0 0 X X X 0 0 0 0 0 0 12 0 0 0 0 0 0 0 0 0 X X X X 0 0 0 0 0 13 0 0 0 0 0 0 0 0 0 X X X X X 0 0 0 0 14 X X 0 X X 0 0 0 0 0 0 0 0 0 X 0 0 0 ... found them, using vectors 0 and 1 === solution found === private key found: 420129172617694367639603712165881242192973923283572937883375494685279140840871 === 0.5826888084411621 seconds === from Crypto.Util.number import * d=420129172617694367639603712165881242192973923283572937883375494685279140840871 pk = (134133840507194879124722303971806829214527933948661780641814514330769296658351734941972795427559665538634298343171712895678689928571804399278111582425131730887340959438180029645070353394212857682708370490223871309129948337487286534021548834043845658248447393803949524601871557448883163646364233913283438778267, 83710839781828547042000099822479827455150839630087752081720660846682103437904198705287610613170124755238284685618099812447852915349294538670732128599161636818193216409714024856708796982283165572768164303554014943361769803463110874733906162673305654979036416246224609509772196787570627778347908006266889151871) ciphertext = 73228838248853753695300650089851103866994923279710500065528688046732360241259421633583786512765328703209553157156700672911490451923782130514110796280837233714066799071157393374064802513078944766577262159955593050786044845920732282816349811296561340376541162788570190578690333343882441362690328344037119622750 print(long_to_bytes(pow(ciphertext, d, pk[0]))) #b\u0026#39;moectf{Ju5t_0n3_st3p_m0r3_th4n_wi3n3r_4ttack!}\\x02\\x02\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0026#39; EzPack # from Crypto.Util.number import * from secret import flag import random p = 2050446265000552948792079248541986570794560388346670845037360320379574792744856498763181701382659864976718683844252858211123523214530581897113968018397826268834076569364339813627884756499465068203125112750486486807221544715872861263738186430034771887175398652172387692870928081940083735448965507812844169983643977 assert len(flag) == 42 def encode(msg): return bin(bytes_to_long(msg))[2:].zfill(8*len(msg)) def genkey(len): sums = 0 keys = [] for i in range(len): k = random.randint(1,7777) x = sums + k keys.append(x) sums += x return keys key = genkey(42*8) #42个字节的key def enc(m, keys): msg = encode(m) print(len(keys)) print(len(msg)) assert len(msg) == len(keys) s = sum((k if (int(p,2) == 1) else 1) for p, k in zip(msg, keys)) # k_i=int(p,2)*(k-1)+1 print(msg) for p0,k in zip(msg,keys): print(int(p0,2)) return pow(7,s,p) #s cipher = enc(flag,key) with open(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;) as fs: fs.write(str(key)+\u0026#39;\\n\u0026#39;) fs.write(str(cipher)) \u0026#39;\u0026#39;\u0026#39; keys=[2512, 8273, 12634, 30674, 54372, 110891, 225777, 446062, 892810, 1785685, 3571708, 7147068, 14289112, 28581265, 57161832, 114326780, 228655143, 457308739, 914613209, 1829227243, 3658458827, 7316918156, 14633835709, 29267669449, 58535340274, 117070675429, 234141353537, 468282707867, 936565418057, 1873130833882, 3746261665097, 7492523334841, 14985046665026, 29970093335100, 59940186663803, 119880373334560, 239760746668580, 479521493330955, 959042986661920, 1918085973328245, 3836171946658774, 7672343893313790, 15344687786626452, 30689375573254014, 61378751146507609, 122757502293019301, 245515004586037627, 491030009172070631, 982060018344144683, 1964120036688286447, 3928240073376575459, 7856480146753153389, 15712960293506306981, 31425920587012612885, 62851841174025225788, 125703682348050445198, 251407364696100892217, 502814729392201782618, 1005629458784403568168, 2011258917568807140729, 4022517835137614281251, 8045035670275228555578, 16090071340550457117716, 32180142681100914229759, 64360285362201828463801, 128720570724403656926675, 257441141448807313850906, 514882282897614627701265, 1029764565795229255408504, 2059529131590458510813903, 4119058263180917021625157, 8238116526361834043252651, 16476233052723668086506605, 32952466105447336173015212, 65904932210894672346028391, 131809864421789344692057159, 263619728843578689384114273, 527239457687157378768225776, 1054478915374314757536453130, 2108957830748629515072903482, 4217915661497259030145809453, 8435831322994518060291616941, 16871662645989036120583234821, 33743325291978072241166466503, 67486650583956144482332935255, 134973301167912288964665874402, 269946602335824577929331748356, 539893204671649155858663493472, 1079786409343298311717326984659, 2159572818686596623434653971397, 4319145637373193246869307947813, 8638291274746386493738615889494, 17276582549492772987477231778035, 34553165098985545974954463561777, 69106330197971091949908927120612, 138212660395942183899817854240492, 276425320791884367799635708486222, 552850641583768735599271416972059, 1105701283167537471198542833939104, 2211402566335074942397085667883662, 4422805132670149884794171335762669, 8845610265340299769588342671528165, 17691220530680599539176685343057386, 35382441061361199078353370686115257, 70764882122722398156706741372225860, 141529764245444796313413482744456668, 283059528490889592626826965488911035, 566119056981779185253653930977821634, 1132238113963558370507307861955640321, 2264476227927116741014615723911280986, 4528952455854233482029231447822565639, 9057904911708466964058462895645127095, 18115809823416933928116925791290255513, 36231619646833867856233851582580513753, 72463239293667735712467703165161028768, 144926478587335471424935406330322056929, 289852957174670942849870812660644108857, 579705914349341885699741625321288218320, 1159411828698683771399483250642576439539, 2318823657397367542798966501285152878316, 4637647314794735085597933002570305753950, 9275294629589470171195866005140611507792, 18550589259178940342391732010281223016646, 37101178518357880684783464020562446033819, 74202357036715761369566928041124892071360, 148404714073431522739133856082249784137080, 296809428146863045478267712164499568280437, 593618856293726090956535424328999136559879, 1187237712587452181913070848657998273114192, 2374475425174904363826141697315996546230541, 4748950850349808727652283394631993092459573, 9497901700699617455304566789263986184923051, 18995803401399234910609133578527972369842492, 37991606802798469821218267157055944739687775, 75983213605596939642436534314111889479370964, 151966427211193879284873068628223778958747280, 303932854422387758569746137256447557917492698, 607865708844775517139492274512895115834989332, 1215731417689551034278984549025790231669975267, 2431462835379102068557969098051580463339948074, 4862925670758204137115938196103160926679900174, 9725851341516408274231876392206321853359802098, 19451702683032816548463752784412643706719600452, 38903405366065633096927505568825287413439197256, 77806810732131266193855011137650574826878395661, 155613621464262532387710022275301149653756795871, 311227242928525064775420044550602299307513590328, 622454485857050129550840089101204598615027178579, 1244908971714100259101680178202409197230054358243, 2489817943428200518203360356404818394460108715912, 4979635886856401036406720712809636788920217429160, 9959271773712802072813441425619273577840434861240, 19918543547425604145626882851238547155680869723940, 39837087094851208291253765702477094311361739445426, 79674174189702416582507531404954188622723478892192, 159348348379404833165015062809908377245446957783393, 318696696758809666330030125619816754490893915565991, 637393393517619332660060251239633508981787831136714, 1274786787035238665320120502479267017963575662274552, 2549573574070477330640241004958534035927151324542637, 5099147148140954661280482009917068071854302649086450, 10198294296281909322560964019834136143708605298174964, 20396588592563818645121928039668272287417210596350768, 40793177185127637290243856079336544574834421192698279, 81586354370255274580487712158673089149668842385397248, 163172708740510549160975424317346178299337684770794481, 326345417481021098321950848634692356598675369541591385, 652690834962042196643901697269384713197350739083184268, 1305381669924084393287803394538769426394701478166367322, 2610763339848168786575606789077538852789402956332735792, 5221526679696337573151213578155077705578805912665470003, 10443053359392675146302427156310155411157611825330938298, 20886106718785350292604854312620310822315223650661876155, 41772213437570700585209708625240621644630447301323755487, 83544426875141401170419417250481243289260894602647509758, 167088853750282802340838834500962486578521789205295017423, 334177707500565604681677669001924973157043578410590038265, 668355415001131209363355338003849946314087156821180077585, 1336710830002262418726710676007699892628174313642360153656, 2673421660004524837453421352015399785256348627284720302669, 5346843320009049674906842704030799570512697254569440606871, 10693686640018099349813685408061599141025394509138881216453, 21387373280036198699627370816123198282050789018277762434854, 42774746560072397399254741632246396564101578036555524866863, 85549493120144794798509483264492793128203156073111049733124, 171098986240289589597018966528985586256406312146222099470414, 342197972480579179194037933057971172512812624292444198940801, 684395944961158358388075866115942345025625248584888397879306, 1368791889922316716776151732231884690051250497169776795755940, 2737583779844633433552303464463769380102500994339553591514630, 5475167559689266867104606928927538760205001988679107183025927, 10950335119378533734209213857855077520410003977358214366055125, 21900670238757067468418427715710155040820007954716428732107891, 43801340477514134936836855431420310081640015909432857464217560, 87602680955028269873673710862840620163280031818865714928434554, 175205361910056539747347421725681240326560063637731429856866112, 350410723820113079494694843451362480653120127275462859713735058, 700821447640226158989389686902724961306240254550925719427468675, 1401642895280452317978779373805449922612480509101851438854937184, 2803285790560904635957558747610899845224961018203702877709878728, 5606571581121809271915117495221799690449922036407405755419752058, 11213143162243618543830234990443599380899844072814811510839508476, 22426286324487237087660469980887198761799688145629623021679016540, 44852572648974474175320939961774397523599376291259246043358031405, 89705145297948948350641879923548795047198752582518492086716066784, 179410290595897896701283759847097590094397505165036984173432131573, 358820581191795793402567519694195180188795010330073968346864263603, 717641162383591586805135039388390360377590020660147936693728524105, 1435282324767183173610270078776780720755180041320295873387457050201, 2870564649534366347220540157553561441510360082640591746774914096017, 5741129299068732694441080315107122883020720165281183493549828196414, 11482258598137465388882160630214245766041440330562366987099656389597, 22964517196274930777764321260428491532082880661124733974199312779679, 45929034392549861555528642520856983064165761322249467948398625562547, 91858068785099723111057285041713966128331522644498935896797251124485, 183716137570199446222114570083427932256663045288997871793594502244534, 367432275140398892444229140166855864513326090577995743587189004492253, 734864550280797784888458280333711729026652181155991487174378008988092, 1469729100561595569776916560667423458053304362311982974348756017973832, 2939458201123191139553833121334846916106608724623965948697512035947248, 5878916402246382279107666242669693832213217449247931897395024071895189, 11757832804492764558215332485339387664426434898495863794790048143791797, 23515665608985529116430664970678775328852869796991727589580096287580052, 47031331217971058232861329941357550657705739593983455179160192575158303, 94062662435942116465722659882715101315411479187966910358320385150319248, 188125324871884232931445319765430202630822958375933820716640770300635542, 376250649743768465862890639530860405261645916751867641433281540601272930, 752501299487536931725781279061720810523291833503735282866563081202544501, 1505002598975073863451562558123441621046583667007470565733126162405094699, 3010005197950147726903125116246883242093167334014941131466252324810183187, 6020010395900295453806250232493766484186334668029882262932504649620366850, 12040020791800590907612500464987532968372669336059764525865009299240740087, 24080041583601181815225000929975065936745338672119529051730018598481474936, 48160083167202363630450001859950131873490677344239058103460037196962951698, 96320166334404727260900003719900263746981354688478116206920074393925903823, 192640332668809454521800007439800527493962709376956232413840148787851806734, 385280665337618909043600014879601054987925418753912464827680297575703613637, 770561330675237818087200029759202109975850837507824929655360595151407230906, 1541122661350475636174400059518404219951701675015649859310721190302814454988, 3082245322700951272348800119036808439903403350031299718621442380605628916694, 6164490645401902544697600238073616879806806700062599437242884761211257832552, 12328981290803805089395200476147233759613613400125198874485769522422515664363, 24657962581607610178790400952294467519227226800250397748971539044845031325511, 49315925163215220357580801904588935038454453600500795497943078089690062650607, 98631850326430440715161603809177870076908907201001590995886156179380125303446, 197263700652860881430323207618355740153817814402003181991772312358760250608697, 394527401305721762860646415236711480307635628804006363983544624717520501214668, 789054802611443525721292830473422960615271257608012727967089249435041002433401, 1578109605222887051442585660946845921230542515216025455934178498870082004860316, 3156219210445774102885171321893691842461085030432050911868356997740164009722969, 6312438420891548205770342643787383684922170060864101823736713995480328019450051, 12624876841783096411540685287574767369844340121728203647473427990960656038893520, 25249753683566192823081370575149534739688680243456407294946855981921312077786571, 50499507367132385646162741150299069479377360486912814589893711963842624155580018, 100999014734264771292325482300598138958754720973825629179787423927685248311158895, 201998029468529542584650964601196277917509441947651258359574847855370496622316776, 403996058937059085169301929202392555835018883895302516719149695710740993244632514, 807992117874118170338603858404785111670037767790605033438299391421481986489267228, 1615984235748236340677207716809570223340075535581210066876598782842963972978532003, 3231968471496472681354415433619140446680151071162420133753197565685927945957064720, 6463936942992945362708830867238280893360302142324840267506395131371855891914126642, 12927873885985890725417661734476561786720604284649680535012790262743711783828258155, 25855747771971781450835323468953123573441208569299361070025580525487423567656514453, 51711495543943562901670646937906247146882417138598722140051161050974847135313030771, 103422991087887125803341293875812494293764834277197444280102322101949694270626055321, 206845982175774251606682587751624988587529668554394888560204644203899388541252116942, 413691964351548503213365175503249977175059337108789777120409288407798777082504227735, 827383928703097006426730351006499954350118674217579554240818576815597554165008460137, 1654767857406194012853460702012999908700237348435159108481637153631195108330016916120, 3309535714812388025706921404025999817400474696870318216963274307262390216660033831205, 6619071429624776051413842808051999634800949393740636433926548614524780433320067664346, 13238142859249552102827685616103999269601898787481272867853097229049560866640135329143, 26476285718499104205655371232207998539203797574962545735706194458099121733280270656061, 52952571436998208411310742464415997078407595149925091471412388916198243466560541314191, 105905142873996416822621484928831994156815190299850182942824777832396486933121082632509, 211810285747992833645242969857663988313630380599700365885649555664792973866242165261378, 423620571495985667290485939715327976627260761199400731771299111329585947732484330525293, 847241142991971334580971879430655953254521522398801463542598222659171895464968661051091, 1694482285983942669161943758861311906509043044797602927085196445318343790929937322101215, 3388964571967885338323887517722623813018086089595205854170392890636687581859874644201224, 6777929143935770676647775035445247626036172179190411708340785781273375163719749288403103, 13555858287871541353295550070890495252072344358380823416681571562546750327439498576808298, 27111716575743082706591100141780990504144688716761646833363143125093500654878997153611098, 54223433151486165413182200283561981008289377433523293666726286250187001309757994307225117, 108446866302972330826364400567123962016578754867046587333452572500374002619515988614446964, 216893732605944661652728801134247924033157509734093174666905145000748005239031977228894066, 433787465211889323305457602268495848066315019468186349333810290001496010478063954457794970, 867574930423778646610915204536991696132630038936372698667620580002992020956127908915584709, 1735149860847557293221830409073983392265260077872745397335241160005984041912255817831170809, 3470299721695114586443660818147966784530520155745490794670482320011968083824511635662341057, 6940599443390229172887321636295933569061040311490981589340964640023936167649023271324685744, 13881198886780458345774643272591867138122080622981963178681929280047872335298046542649370322, 27762397773560916691549286545183734276244161245963926357363858560095744670596093085298742245, 55524795547121833383098573090367468552488322491927852714727717120191489341192186170597482333, 111049591094243666766197146180734937104976644983855705429455434240382978682384372341194961544, 222099182188487333532394292361469874209953289967711410858910868480765957364768744682389922039, 444198364376974667064788584722939748419906579935422821717821736961531914729537489364779843923, 888396728753949334129577169445879496839813159870845643435643473923063829459074978729559694098, 1776793457507898668259154338891758993679626319741691286871286947846127658918149957459119383155, 3553586915015797336518308677783517987359252639483382573742573895692255317836299914918238766632, 7107173830031594673036617355567035974718505278966765147485147791384510635672599829836477531912, 14214347660063189346073234711134071949437010557933530294970295582769021271345199659672955068674, 28428695320126378692146469422268143898874021115867060589940591165538042542690399319345910137450, 56857390640252757384292938844536287797748042231734121179881182331076085085380798638691820270168, 113714781280505514768585877689072575595496084463468242359762364662152170170761597277383640545287, 227429562561011029537171755378145151190992168926936484719524729324304340341523194554767281088472, 454859125122022059074343510756290302381984337853872969439049458648608680683046389109534562177698, 909718250244044118148687021512580604763968675707745938878098917297217361366092778219069124356481, 1819436500488088236297374043025161209527937351415491877756197834594434722732185556438138248710810, 3638873000976176472594748086050322419055874702830983755512395669188869445464371112876276497420419, 7277746001952352945189496172100644838111749405661967511024791338377738890928742225752552994839729, 14555492003904705890378992344201289676223498811323935022049582676755477781857484451505105989681735, 29110984007809411780757984688402579352446997622647870044099165353510955563714968903010211979362741, 58221968015618823561515969376805158704893995245295740088198330707021911127429937806020423958729961, 116443936031237647123031938753610317409787990490591480176396661414043822254859875612040847917457472, 232887872062475294246063877507220634819575980981182960352793322828087644509719751224081695834910850, 465775744124950588492127755014441269639151961962365920705586645656175289019439502448163391669822178, 931551488249901176984255510028882539278303923924731841411173291312350578038879004896326783339648822, 1863102976499802353968511020057765078556607847849463682822346582624701156077758009792653566679298283, 3726205952999604707937022040115530157113215695698927365644693165249402312155516019585307133358596851, 7452411905999209415874044080231060314226431391397854731289386330498804624311032039170614266717186964, 14904823811998418831748088160462120628452862782795709462578772660997609248622064078341228533434381077, 29809647623996837663496176320924241256905725565591418925157545321995218497244128156682457066868755075, 59619295247993675326992352641848482513811451131182837850315090643990436994488256313364914133737517146, 119238590495987350653984705283696965027622902262365675700630181287980873988976512626729828267475028635, 238477180991974701307969410567393930055245804524731351401260362575961747977953025253459656534950056881, 476954361983949402615938821134787860110491609049462702802520725151923495955906050506919313069900116878, 953908723967898805231877642269575720220983218098925405605041450303846991911812101013838626139800231143, 1907817447935797610463755284539151440441966436197850811210082900607693983823624202027677252279600467825, 3815634895871595220927510569078302880883932872395701622420165801215387967647248404055354504559200929557, 7631269791743190441855021138156605761767865744791403244840331602430775935294496808110709009118401859798, 15262539583486380883710042276313211523535731489582806489680663204861551870588993616221418018236803719203, 30525079166972761767420084552626423047071462979165612979361326409723103741177987232442836036473607437361, 61050158333945523534840169105252846094142925958331225958722652819446207482355974464885672072947214878831, 122100316667891047069680338210505692188285851916662451917445305638892414964711948929771344145894429759854, 244200633335782094139360676421011384376571703833324903834890611277784829929423897859542688291788859515844] cipher=1210552586072154479867426776758107463169244511186991628141504400199024936339296845132507655589933479768044598418932176690108379140298480790405551573061005655909291462247675584868840035141893556748770266337895571889128422577613223452797329555381197215533551339146807187891070847348454214231505098834813871022509186 \u0026#39;\u0026#39;\u0026#39; enc实现了一个乘积背包加密，其中\n$$ g_i=7^k_i \\mod p \\ (m_i=1) $$\n$$ g_i=7^1 \\mod p \\ (m_i=0) $$\n求出s，然后利用贪心算法(k是超距增加的)求m，又p-1素因数分解是光滑的，可以使用Pohlig-Hellman算法求解s(离散对数问题，在sage中用discrete_log即可)\n\u0026lt;代码较官方wp略微优化\u0026gt;\nfrom Crypto.Util.number import * keys=[2512, 8273, 12634, 30674, 54372, 110891, 225777, 446062, 892810, 1785685, 3571708, 7147068, 14289112, 28581265, 57161832, 114326780, 228655143, 457308739, 914613209, 1829227243, 3658458827, 7316918156, 14633835709, 29267669449, 58535340274, 117070675429, 234141353537, 468282707867, 936565418057, 1873130833882, 3746261665097, 7492523334841, 14985046665026, 29970093335100, 59940186663803, 119880373334560, 239760746668580, 479521493330955, 959042986661920, 1918085973328245, 3836171946658774, 7672343893313790, 15344687786626452, 30689375573254014, 61378751146507609, 122757502293019301, 245515004586037627, 491030009172070631, 982060018344144683, 1964120036688286447, 3928240073376575459, 7856480146753153389, 15712960293506306981, 31425920587012612885, 62851841174025225788, 125703682348050445198, 251407364696100892217, 502814729392201782618, 1005629458784403568168, 2011258917568807140729, 4022517835137614281251, 8045035670275228555578, 16090071340550457117716, 32180142681100914229759, 64360285362201828463801, 128720570724403656926675, 257441141448807313850906, 514882282897614627701265, 1029764565795229255408504, 2059529131590458510813903, 4119058263180917021625157, 8238116526361834043252651, 16476233052723668086506605, 32952466105447336173015212, 65904932210894672346028391, 131809864421789344692057159, 263619728843578689384114273, 527239457687157378768225776, 1054478915374314757536453130, 2108957830748629515072903482, 4217915661497259030145809453, 8435831322994518060291616941, 16871662645989036120583234821, 33743325291978072241166466503, 67486650583956144482332935255, 134973301167912288964665874402, 269946602335824577929331748356, 539893204671649155858663493472, 1079786409343298311717326984659, 2159572818686596623434653971397, 4319145637373193246869307947813, 8638291274746386493738615889494, 17276582549492772987477231778035, 34553165098985545974954463561777, 69106330197971091949908927120612, 138212660395942183899817854240492, 276425320791884367799635708486222, 552850641583768735599271416972059, 1105701283167537471198542833939104, 2211402566335074942397085667883662, 4422805132670149884794171335762669, 8845610265340299769588342671528165, 17691220530680599539176685343057386, 35382441061361199078353370686115257, 70764882122722398156706741372225860, 141529764245444796313413482744456668, 283059528490889592626826965488911035, 566119056981779185253653930977821634, 1132238113963558370507307861955640321, 2264476227927116741014615723911280986, 4528952455854233482029231447822565639, 9057904911708466964058462895645127095, 18115809823416933928116925791290255513, 36231619646833867856233851582580513753, 72463239293667735712467703165161028768, 144926478587335471424935406330322056929, 289852957174670942849870812660644108857, 579705914349341885699741625321288218320, 1159411828698683771399483250642576439539, 2318823657397367542798966501285152878316, 4637647314794735085597933002570305753950, 9275294629589470171195866005140611507792, 18550589259178940342391732010281223016646, 37101178518357880684783464020562446033819, 74202357036715761369566928041124892071360, 148404714073431522739133856082249784137080, 296809428146863045478267712164499568280437, 593618856293726090956535424328999136559879, 1187237712587452181913070848657998273114192, 2374475425174904363826141697315996546230541, 4748950850349808727652283394631993092459573, 9497901700699617455304566789263986184923051, 18995803401399234910609133578527972369842492, 37991606802798469821218267157055944739687775, 75983213605596939642436534314111889479370964, 151966427211193879284873068628223778958747280, 303932854422387758569746137256447557917492698, 607865708844775517139492274512895115834989332, 1215731417689551034278984549025790231669975267, 2431462835379102068557969098051580463339948074, 4862925670758204137115938196103160926679900174, 9725851341516408274231876392206321853359802098, 19451702683032816548463752784412643706719600452, 38903405366065633096927505568825287413439197256, 77806810732131266193855011137650574826878395661, 155613621464262532387710022275301149653756795871, 311227242928525064775420044550602299307513590328, 622454485857050129550840089101204598615027178579, 1244908971714100259101680178202409197230054358243, 2489817943428200518203360356404818394460108715912, 4979635886856401036406720712809636788920217429160, 9959271773712802072813441425619273577840434861240, 19918543547425604145626882851238547155680869723940, 39837087094851208291253765702477094311361739445426, 79674174189702416582507531404954188622723478892192, 159348348379404833165015062809908377245446957783393, 318696696758809666330030125619816754490893915565991, 637393393517619332660060251239633508981787831136714, 1274786787035238665320120502479267017963575662274552, 2549573574070477330640241004958534035927151324542637, 5099147148140954661280482009917068071854302649086450, 10198294296281909322560964019834136143708605298174964, 20396588592563818645121928039668272287417210596350768, 40793177185127637290243856079336544574834421192698279, 81586354370255274580487712158673089149668842385397248, 163172708740510549160975424317346178299337684770794481, 326345417481021098321950848634692356598675369541591385, 652690834962042196643901697269384713197350739083184268, 1305381669924084393287803394538769426394701478166367322, 2610763339848168786575606789077538852789402956332735792, 5221526679696337573151213578155077705578805912665470003, 10443053359392675146302427156310155411157611825330938298, 20886106718785350292604854312620310822315223650661876155, 41772213437570700585209708625240621644630447301323755487, 83544426875141401170419417250481243289260894602647509758, 167088853750282802340838834500962486578521789205295017423, 334177707500565604681677669001924973157043578410590038265, 668355415001131209363355338003849946314087156821180077585, 1336710830002262418726710676007699892628174313642360153656, 2673421660004524837453421352015399785256348627284720302669, 5346843320009049674906842704030799570512697254569440606871, 10693686640018099349813685408061599141025394509138881216453, 21387373280036198699627370816123198282050789018277762434854, 42774746560072397399254741632246396564101578036555524866863, 85549493120144794798509483264492793128203156073111049733124, 171098986240289589597018966528985586256406312146222099470414, 342197972480579179194037933057971172512812624292444198940801, 684395944961158358388075866115942345025625248584888397879306, 1368791889922316716776151732231884690051250497169776795755940, 2737583779844633433552303464463769380102500994339553591514630, 5475167559689266867104606928927538760205001988679107183025927, 10950335119378533734209213857855077520410003977358214366055125, 21900670238757067468418427715710155040820007954716428732107891, 43801340477514134936836855431420310081640015909432857464217560, 87602680955028269873673710862840620163280031818865714928434554, 175205361910056539747347421725681240326560063637731429856866112, 350410723820113079494694843451362480653120127275462859713735058, 700821447640226158989389686902724961306240254550925719427468675, 1401642895280452317978779373805449922612480509101851438854937184, 2803285790560904635957558747610899845224961018203702877709878728, 5606571581121809271915117495221799690449922036407405755419752058, 11213143162243618543830234990443599380899844072814811510839508476, 22426286324487237087660469980887198761799688145629623021679016540, 44852572648974474175320939961774397523599376291259246043358031405, 89705145297948948350641879923548795047198752582518492086716066784, 179410290595897896701283759847097590094397505165036984173432131573, 358820581191795793402567519694195180188795010330073968346864263603, 717641162383591586805135039388390360377590020660147936693728524105, 1435282324767183173610270078776780720755180041320295873387457050201, 2870564649534366347220540157553561441510360082640591746774914096017, 5741129299068732694441080315107122883020720165281183493549828196414, 11482258598137465388882160630214245766041440330562366987099656389597, 22964517196274930777764321260428491532082880661124733974199312779679, 45929034392549861555528642520856983064165761322249467948398625562547, 91858068785099723111057285041713966128331522644498935896797251124485, 183716137570199446222114570083427932256663045288997871793594502244534, 367432275140398892444229140166855864513326090577995743587189004492253, 734864550280797784888458280333711729026652181155991487174378008988092, 1469729100561595569776916560667423458053304362311982974348756017973832, 2939458201123191139553833121334846916106608724623965948697512035947248, 5878916402246382279107666242669693832213217449247931897395024071895189, 11757832804492764558215332485339387664426434898495863794790048143791797, 23515665608985529116430664970678775328852869796991727589580096287580052, 47031331217971058232861329941357550657705739593983455179160192575158303, 94062662435942116465722659882715101315411479187966910358320385150319248, 188125324871884232931445319765430202630822958375933820716640770300635542, 376250649743768465862890639530860405261645916751867641433281540601272930, 752501299487536931725781279061720810523291833503735282866563081202544501, 1505002598975073863451562558123441621046583667007470565733126162405094699, 3010005197950147726903125116246883242093167334014941131466252324810183187, 6020010395900295453806250232493766484186334668029882262932504649620366850, 12040020791800590907612500464987532968372669336059764525865009299240740087, 24080041583601181815225000929975065936745338672119529051730018598481474936, 48160083167202363630450001859950131873490677344239058103460037196962951698, 96320166334404727260900003719900263746981354688478116206920074393925903823, 192640332668809454521800007439800527493962709376956232413840148787851806734, 385280665337618909043600014879601054987925418753912464827680297575703613637, 770561330675237818087200029759202109975850837507824929655360595151407230906, 1541122661350475636174400059518404219951701675015649859310721190302814454988, 3082245322700951272348800119036808439903403350031299718621442380605628916694, 6164490645401902544697600238073616879806806700062599437242884761211257832552, 12328981290803805089395200476147233759613613400125198874485769522422515664363, 24657962581607610178790400952294467519227226800250397748971539044845031325511, 49315925163215220357580801904588935038454453600500795497943078089690062650607, 98631850326430440715161603809177870076908907201001590995886156179380125303446, 197263700652860881430323207618355740153817814402003181991772312358760250608697, 394527401305721762860646415236711480307635628804006363983544624717520501214668, 789054802611443525721292830473422960615271257608012727967089249435041002433401, 1578109605222887051442585660946845921230542515216025455934178498870082004860316, 3156219210445774102885171321893691842461085030432050911868356997740164009722969, 6312438420891548205770342643787383684922170060864101823736713995480328019450051, 12624876841783096411540685287574767369844340121728203647473427990960656038893520, 25249753683566192823081370575149534739688680243456407294946855981921312077786571, 50499507367132385646162741150299069479377360486912814589893711963842624155580018, 100999014734264771292325482300598138958754720973825629179787423927685248311158895, 201998029468529542584650964601196277917509441947651258359574847855370496622316776, 403996058937059085169301929202392555835018883895302516719149695710740993244632514, 807992117874118170338603858404785111670037767790605033438299391421481986489267228, 1615984235748236340677207716809570223340075535581210066876598782842963972978532003, 3231968471496472681354415433619140446680151071162420133753197565685927945957064720, 6463936942992945362708830867238280893360302142324840267506395131371855891914126642, 12927873885985890725417661734476561786720604284649680535012790262743711783828258155, 25855747771971781450835323468953123573441208569299361070025580525487423567656514453, 51711495543943562901670646937906247146882417138598722140051161050974847135313030771, 103422991087887125803341293875812494293764834277197444280102322101949694270626055321, 206845982175774251606682587751624988587529668554394888560204644203899388541252116942, 413691964351548503213365175503249977175059337108789777120409288407798777082504227735, 827383928703097006426730351006499954350118674217579554240818576815597554165008460137, 1654767857406194012853460702012999908700237348435159108481637153631195108330016916120, 3309535714812388025706921404025999817400474696870318216963274307262390216660033831205, 6619071429624776051413842808051999634800949393740636433926548614524780433320067664346, 13238142859249552102827685616103999269601898787481272867853097229049560866640135329143, 26476285718499104205655371232207998539203797574962545735706194458099121733280270656061, 52952571436998208411310742464415997078407595149925091471412388916198243466560541314191, 105905142873996416822621484928831994156815190299850182942824777832396486933121082632509, 211810285747992833645242969857663988313630380599700365885649555664792973866242165261378, 423620571495985667290485939715327976627260761199400731771299111329585947732484330525293, 847241142991971334580971879430655953254521522398801463542598222659171895464968661051091, 1694482285983942669161943758861311906509043044797602927085196445318343790929937322101215, 3388964571967885338323887517722623813018086089595205854170392890636687581859874644201224, 6777929143935770676647775035445247626036172179190411708340785781273375163719749288403103, 13555858287871541353295550070890495252072344358380823416681571562546750327439498576808298, 27111716575743082706591100141780990504144688716761646833363143125093500654878997153611098, 54223433151486165413182200283561981008289377433523293666726286250187001309757994307225117, 108446866302972330826364400567123962016578754867046587333452572500374002619515988614446964, 216893732605944661652728801134247924033157509734093174666905145000748005239031977228894066, 433787465211889323305457602268495848066315019468186349333810290001496010478063954457794970, 867574930423778646610915204536991696132630038936372698667620580002992020956127908915584709, 1735149860847557293221830409073983392265260077872745397335241160005984041912255817831170809, 3470299721695114586443660818147966784530520155745490794670482320011968083824511635662341057, 6940599443390229172887321636295933569061040311490981589340964640023936167649023271324685744, 13881198886780458345774643272591867138122080622981963178681929280047872335298046542649370322, 27762397773560916691549286545183734276244161245963926357363858560095744670596093085298742245, 55524795547121833383098573090367468552488322491927852714727717120191489341192186170597482333, 111049591094243666766197146180734937104976644983855705429455434240382978682384372341194961544, 222099182188487333532394292361469874209953289967711410858910868480765957364768744682389922039, 444198364376974667064788584722939748419906579935422821717821736961531914729537489364779843923, 888396728753949334129577169445879496839813159870845643435643473923063829459074978729559694098, 1776793457507898668259154338891758993679626319741691286871286947846127658918149957459119383155, 3553586915015797336518308677783517987359252639483382573742573895692255317836299914918238766632, 7107173830031594673036617355567035974718505278966765147485147791384510635672599829836477531912, 14214347660063189346073234711134071949437010557933530294970295582769021271345199659672955068674, 28428695320126378692146469422268143898874021115867060589940591165538042542690399319345910137450, 56857390640252757384292938844536287797748042231734121179881182331076085085380798638691820270168, 113714781280505514768585877689072575595496084463468242359762364662152170170761597277383640545287, 227429562561011029537171755378145151190992168926936484719524729324304340341523194554767281088472, 454859125122022059074343510756290302381984337853872969439049458648608680683046389109534562177698, 909718250244044118148687021512580604763968675707745938878098917297217361366092778219069124356481, 1819436500488088236297374043025161209527937351415491877756197834594434722732185556438138248710810, 3638873000976176472594748086050322419055874702830983755512395669188869445464371112876276497420419, 7277746001952352945189496172100644838111749405661967511024791338377738890928742225752552994839729, 14555492003904705890378992344201289676223498811323935022049582676755477781857484451505105989681735, 29110984007809411780757984688402579352446997622647870044099165353510955563714968903010211979362741, 58221968015618823561515969376805158704893995245295740088198330707021911127429937806020423958729961, 116443936031237647123031938753610317409787990490591480176396661414043822254859875612040847917457472, 232887872062475294246063877507220634819575980981182960352793322828087644509719751224081695834910850, 465775744124950588492127755014441269639151961962365920705586645656175289019439502448163391669822178, 931551488249901176984255510028882539278303923924731841411173291312350578038879004896326783339648822, 1863102976499802353968511020057765078556607847849463682822346582624701156077758009792653566679298283, 3726205952999604707937022040115530157113215695698927365644693165249402312155516019585307133358596851, 7452411905999209415874044080231060314226431391397854731289386330498804624311032039170614266717186964, 14904823811998418831748088160462120628452862782795709462578772660997609248622064078341228533434381077, 29809647623996837663496176320924241256905725565591418925157545321995218497244128156682457066868755075, 59619295247993675326992352641848482513811451131182837850315090643990436994488256313364914133737517146, 119238590495987350653984705283696965027622902262365675700630181287980873988976512626729828267475028635, 238477180991974701307969410567393930055245804524731351401260362575961747977953025253459656534950056881, 476954361983949402615938821134787860110491609049462702802520725151923495955906050506919313069900116878, 953908723967898805231877642269575720220983218098925405605041450303846991911812101013838626139800231143, 1907817447935797610463755284539151440441966436197850811210082900607693983823624202027677252279600467825, 3815634895871595220927510569078302880883932872395701622420165801215387967647248404055354504559200929557, 7631269791743190441855021138156605761767865744791403244840331602430775935294496808110709009118401859798, 15262539583486380883710042276313211523535731489582806489680663204861551870588993616221418018236803719203, 30525079166972761767420084552626423047071462979165612979361326409723103741177987232442836036473607437361, 61050158333945523534840169105252846094142925958331225958722652819446207482355974464885672072947214878831, 122100316667891047069680338210505692188285851916662451917445305638892414964711948929771344145894429759854, 244200633335782094139360676421011384376571703833324903834890611277784829929423897859542688291788859515844] cipher=1210552586072154479867426776758107463169244511186991628141504400199024936339296845132507655589933479768044598418932176690108379140298480790405551573061005655909291462247675584868840035141893556748770266337895571889128422577613223452797329555381197215533551339146807187891070847348454214231505098834813871022509186 p = 2050446265000552948792079248541986570794560388346670845037360320379574792744856498763181701382659864976718683844252858211123523214530581897113968018397826268834076569364339813627884756499465068203125112750486486807221544715872861263738186430034771887175398652172387692870928081940083735448965507812844169983643977 s = 363965742933281351259442199216117822475210003294088371760914916341815880641228470807683148775152284520244 #g^s=cipher mod p G=GF(p) g=7 s=discrete_log(G(cipher),G(g)) assert pow(7,s,p)==cipher t=len(keys) x=[0 for _ in range(t)] #贪心求解 for i in range(1,t+1): if s \u0026gt;= keys[t-i]: x[t-i]=1 s=s-keys[t-i] else: x[t-i]=0 x=\u0026#34;\u0026#34;.join(map(str, x)) print(long_to_bytes(int(int(x,2)))) #b\u0026#39;moectf{429eaa156f6961d6bc655c1887ebb779ec}\u0026#39; ezLGC # from sage.all import * from random import getrandbits, randint from secrets import randbelow from Crypto.Util.number import getPrime,isPrime,inverse from Crypto.Util.Padding import pad from Crypto.Cipher import AES from secret import priKey, flag from hashlib import sha1 import os q = getPrime(160) while True: t0 = q*getrandbits(864) if isPrime(t0+1): p = t0 + 1 break x = priKey assert p % q == 1 h = randint(1,p-1) g = pow(h,(p-1)//q,p) y = pow(g,x,p) def sign(z, k): r = pow(g,k,p) % q s = (inverse(k,q)*(z+r*priKey)) % q return (r,s) def verify(m,s,r): z = int.from_bytes(sha1(m).digest(), \u0026#39;big\u0026#39;) u1 = (inverse(s,q)*z) % q u2 = (inverse(s,q)*r) % q r0 = ((pow(g,u1,p)*pow(y,u2,p)) % p) % q return r0 == r def lcg(a, b, q, x): while True: x = (a * x + b) % q yield x msg = [os.urandom(16) for i in range(5)] a, b, x = [randbelow(q) for _ in range(3)] prng = lcg(a, b, q, x) sigs = [] for m, k in zip(msg,prng): z = int.from_bytes(sha1(m).digest(), \u0026#34;big\u0026#34;) % q r, s = sign(z, k) assert verify(m, s, r) sigs.append((r,s)) print(f\u0026#34;{g = }\u0026#34;) print(f\u0026#34;{h = }\u0026#34;) print(f\u0026#34;{q = }\u0026#34;) print(f\u0026#34;{p = }\u0026#34;) print(f\u0026#34;{msg = }\u0026#34;) print(f\u0026#34;{sigs = }\u0026#34;) key = sha1(str(priKey).encode()).digest()[:16] iv = os.urandom(16) cipher = AES.new(key, AES.MODE_CBC,iv) ct = cipher.encrypt(pad(flag,16)) print(f\u0026#34;{iv = }\u0026#34;) print(f\u0026#34;{ct = }\u0026#34;) \u0026#39;\u0026#39;\u0026#39; g = 81569684196645348869992756399797937971436996812346070571468655785762437078898141875334855024163673443340626854915520114728947696423441493858938345078236621180324085934092037313264170158390556505922997447268262289413542862021771393535087410035145796654466502374252061871227164352744675750669230756678480403551 h = 13360659280755238232904342818943446234394025788199830559222919690197648501739683227053179022521444870802363019867146013415532648906174842607370958566866152133141600828695657346665923432059572078189013989803088047702130843109809724983853650634669946823993666248096402349533564966478014376877154404963309438891 q = 1303803697251710037027345981217373884089065173721 p = 135386571420682237420633670579115261427110680959831458510661651985522155814624783887385220768310381778722922186771694358185961218902544998325115481951071052630790578356532158887162956411742570802131927372034113509208643043526086803989709252621829703679985669846412125110620244866047891680775125948940542426381 msg = [b\u0026#39;I\\xf0\\xccy\\xd5~\\xed\\xf8A\\xe4\\xdf\\x91+\\xd4_$\u0026#39;, b\u0026#39;~\\xa0\\x9bCB\\xef\\xc3SY4W\\xf9Aa\\rO\u0026#39;, b\u0026#39;\\xe6\\x96\\xf4\\xac\\n9\\xa7\\xc4\\xef\\x82S\\xe9 XpJ\u0026#39;, b\u0026#39;3,\\xbb\\xe2-\\xcc\\xa1o\\xe6\\x93+\\xe8\\xea=\\x17\\xd1\u0026#39;, b\u0026#39;\\x8c\\x19PHN\\xa8\\xbc\\xfc\\xa20r\\xe5\\x0bMwJ\u0026#39;] sigs = [(913082810060387697659458045074628688804323008021, 601727298768376770098471394299356176250915124698), (406607720394287512952923256499351875907319590223, 946312910102100744958283218486828279657252761118), (1053968308548067185640057861411672512429603583019, 1284314986796793233060997182105901455285337520635), (878633001726272206179866067197006713383715110096, 1117986485818472813081237963762660460310066865326), (144589405182012718667990046652227725217611617110, 1028458755419859011294952635587376476938670485840)] iv = b\u0026#39;M\\xdf\\x0e\\x7f\\xeaj\\x17PE\\x97\\x8e\\xee\\xaf:\\xa0\\xc7\u0026#39; ct = b\u0026#34;\\xa8a\\xff\\xf1[(\\x7f\\xf9\\x93\\xeb0J\\xc43\\x99\\xb25:\\xf5\u0026gt;\\x1c?\\xbd\\x8a\\xcd)i)\\xdd\\x87l1\\xf5L\\xc5\\xc5\u0026#39;N\\x18\\x8d\\xa5\\x9e\\x84\\xfe\\x80\\x9dm\\xcc\u0026#34; \u0026#39;\u0026#39;\u0026#39; 签名有：\n$$ r = g^k \\mod q $$\nlcg线性同余生成器：\\( x_{i+1}=a*x_{i}+b\\mod q \\)\nk的生成\ndef lcg(a, b, q, x): while True: x = (a * x + b) % q yield x 取两组签名：\n$$ k_1=s_1^{-1}(H(m_1)+r_1d) \\mod q $$\n$$ k_2=s_2^{-1}(H(m_2)+r_2d) \\mod q $$\n则k可以表示为： \\( k_i=u_i*d+v_i \\mod q \\) 其中u和v可以计算得到（m,r,s均已知）\n可以利用线性关系恢复d，进而得到flag\nfrom sage.all import * from Crypto.Util.number import * from Crypto.Cipher import AES from hashlib import sha1 g = 81569684196645348869992756399797937971436996812346070571468655785762437078898141875334855024163673443340626854915520114728947696423441493858938345078236621180324085934092037313264170158390556505922997447268262289413542862021771393535087410035145796654466502374252061871227164352744675750669230756678480403551 h = 13360659280755238232904342818943446234394025788199830559222919690197648501739683227053179022521444870802363019867146013415532648906174842607370958566866152133141600828695657346665923432059572078189013989803088047702130843109809724983853650634669946823993666248096402349533564966478014376877154404963309438891 q = 1303803697251710037027345981217373884089065173721 p = 135386571420682237420633670579115261427110680959831458510661651985522155814624783887385220768310381778722922186771694358185961218902544998325115481951071052630790578356532158887162956411742570802131927372034113509208643043526086803989709252621829703679985669846412125110620244866047891680775125948940542426381 msg = [b\u0026#39;I\\xf0\\xccy\\xd5~\\xed\\xf8A\\xe4\\xdf\\x91+\\xd4_$\u0026#39;, b\u0026#39;~\\xa0\\x9bCB\\xef\\xc3SY4W\\xf9Aa\\rO\u0026#39;, b\u0026#39;\\xe6\\x96\\xf4\\xac\\n9\\xa7\\xc4\\xef\\x82S\\xe9 XpJ\u0026#39;, b\u0026#39;3,\\xbb\\xe2-\\xcc\\xa1o\\xe6\\x93+\\xe8\\xea=\\x17\\xd1\u0026#39;, b\u0026#39;\\x8c\\x19PHN\\xa8\\xbc\\xfc\\xa20r\\xe5\\x0bMwJ\u0026#39;] sigs = [(913082810060387697659458045074628688804323008021, 601727298768376770098471394299356176250915124698), (406607720394287512952923256499351875907319590223, 946312910102100744958283218486828279657252761118), (1053968308548067185640057861411672512429603583019, 1284314986796793233060997182105901455285337520635), (878633001726272206179866067197006713383715110096, 1117986485818472813081237963762660460310066865326), (144589405182012718667990046652227725217611617110, 1028458755419859011294952635587376476938670485840)] iv = b\u0026#39;M\\xdf\\x0e\\x7f\\xeaj\\x17PE\\x97\\x8e\\xee\\xaf:\\xa0\\xc7\u0026#39; ct = b\u0026#34;\\xa8a\\xff\\xf1[(\\x7f\\xf9\\x93\\xeb0J\\xc43\\x99\\xb25:\\xf5\u0026gt;\\x1c?\\xbd\\x8a\\xcd)i)\\xdd\\x87l1\\xf5L\\xc5\\xc5\u0026#39;N\\x18\\x8d\\xa5\\x9e\\x84\\xfe\\x80\\x9dm\\xcc\u0026#34; hash_msgs=[int.from_bytes(sha1(m).digest(), \u0026#39;big\u0026#39;)%q for m in msg] R=[sigs[i][0] for i in range(len(sigs))] S=[sigs[i][1] for i in range(len(sigs))] msinv=[hash_msgs[i] * inverse_mod(S[i],q) % q for i in range(5)] # rsinv=[R[i] * inverse_mod(S[i],q) % q for i in range(5)] PR=PolynomialRing(GF(q), \u0026#39;d\u0026#39;) d=PR.gen() k1=rsinv[1]*d+msinv[1] k2=rsinv[2]*d+msinv[2] k3=rsinv[3]*d+msinv[3] k4=rsinv[4]*d+msinv[4] g=(k4-k3)*(k2-k1)-(k3-k2)^2 roots=g.roots() d=roots[1][0] key=sha1(str(d).encode()).digest()[:16] cipher = AES.new(key, AES.MODE_CBC, iv) print(cipher.decrypt(ct)) hidden-poly # from Crypto.Util.Padding import pad from Crypto.Util.number import * from Crypto.Cipher import AES import os q = 264273181570520944116363476632762225021 key = os.urandom(16) iv = os.urandom(16) root = 122536272320154909907460423807891938232 f = sum([a*root**i for i,a in enumerate(key)]) assert key.isascii() assert f % q == 0 with open(\u0026#39;flag.txt\u0026#39;,\u0026#39;rb\u0026#39;) as f: flag = f.read() cipher = AES.new(key,AES.MODE_CBC, iv) ciphertext = cipher.encrypt(pad(flag,16)).hex() with open(\u0026#39;output.txt\u0026#39;,\u0026#39;w\u0026#39;) as f: f.write(f\u0026#34;{iv = }\u0026#34; + \u0026#34;\\n\u0026#34;) f.write(f\u0026#34;{ciphertext = }\u0026#34; + \u0026#34;\\n\u0026#34;) \u0026#39;\u0026#39;\u0026#39; iv = b\u0026#39;Gc\\xf2\\xfd\\x94\\xdc\\xc8\\xbb\\xf4\\x84\\xb1\\xfd\\x96\\xcd6\\\\\u0026#39; ciphertext = \u0026#39;d23eac665cdb57a8ae7764bb4497eb2f79729537e596600ded7a068c407e67ea75e6d76eb9e23e21634b84a96424130e\u0026#39; \u0026#39;\u0026#39;\u0026#39; 可以得到一个系数多项式：\n$$ f= \\sum_{i=0}^{15} a_i*x^i $$\n同时得到他的一个根\\( r_0 \\)(即root)有 \\( f(r_0)=0 \\mod q \\)\n这里用AES128-CBC对flag进行了加密，key未知，iv已知。恢复flag需要key。\n根据提示LLL，参考一些资料。构造格矩阵恢复系数\nfrom Crypto.Util.number import * from Crypto.Cipher import AES from Crypto.Util.Padding import pad from sage.all import * q = 264273181570520944116363476632762225021 x0 = 122536272320154909907460423807891938232 K = 1\u0026lt;\u0026lt;1024 real = [K*ZZ(x0)**i for i in range(16)] M = block_matrix([ [zero_matrix(1,16),Matrix(ZZ,1,1,[K*q])], [identity_matrix(16),Matrix(ZZ,16,1,real)] ]) v = M.LLL() iv = b\u0026#39;Gc\\xf2\\xfd\\x94\\xdc\\xc8\\xbb\\xf4\\x84\\xb1\\xfd\\x96\\xcd6\\\\\u0026#39; ciphertext =\u0026#39;d23eac665cdb57a8ae7764bb4497eb2f79729537e596600ded7a068c407e67ea75e6d76eb9e23e21634b84a96424130e\u0026#39; cipher0 = bytes.fromhex(ciphertext) key = \u0026#34;\u0026#34;.join([chr(v[0][i]) for i in range(0,16)]).encode() cipher = AES.new(key,AES.MODE_CBC, iv) m = cipher.decrypt(cipher0) print(m) #b\u0026#39;moectf{th3_first_blood_0f_LLL!@#$}\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\\x0e\u0026#39; babe-Lifting # from Crypto.Util.number import * from secret import flag p = getPrime(512) q = getPrime(512) n = p*q e = 0x1001 d = inverse(e, (p-1)*(q-1)) bit_leak = 400 d_leak = d \u0026amp; ((1\u0026lt;\u0026lt;bit_leak)-1) msg = bytes_to_long(flag) cipher = pow(msg,e,n) pk = (n, e) with open(\u0026#39;output.txt\u0026#39;,\u0026#39;w\u0026#39;) as f: f.write(f\u0026#34;pk = {pk}\\n\u0026#34;) f.write(f\u0026#34;cipher = {cipher}\\n\u0026#34;) f.write(f\u0026#34;hint = {d_leak}\\n\u0026#34;) f.close() \u0026#39;\u0026#39;\u0026#39; pk = (53282434320648520638797489235916411774754088938038649364676595382708882567582074768467750091758871986943425295325684397148357683679972957390367050797096129400800737430005406586421368399203345142990796139798355888856700153024507788780229752591276439736039630358687617540130010809829171308760432760545372777123, 4097) cipher = 14615370570055065930014711673507863471799103656443111041437374352195976523098242549568514149286911564703856030770733394303895224311305717058669800588144055600432004216871763513804811217695900972286301248213735105234803253084265599843829792871483051020532819945635641611821829176170902766901550045863639612054 hint = 1550452349150409256147460237724995145109078733341405037037945312861833198753379389784394833566301246926188176937280242129 \u0026#39;\u0026#39;\u0026#39; d低位泄露\nfrom sage.all import * from tqdm import trange from Crypto.Util.number import * def get_full_p(p_low, n,d_low): PR.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(n)) d_lowbits = 400 nbits = 1024 p_lowbits = p_low.nbits() f = 2^(p_lowbits-2)*x + p_low f = f.monic() roots = f.small_roots(X=2^(nbits//2-p_lowbits+2), beta=0.49) if roots: x0 = int(roots[0]) p = gcd(2^(d_lowbits-2)*x0 + p_low, n) return ZZ(p) def find_p_low(d_low, e, n): X = var(\u0026#39;X\u0026#39;) for k in trange(1, e+1): results = solve_mod([e*d_low*X == k*n*X + k*X + X-k*X**2 - k*n], 1\u0026lt;\u0026lt;400) for x in results: p_low = ZZ(x[0]) p = get_full_p(p_low, n,d_low) if p and p != 1: return p n,e = (53282434320648520638797489235916411774754088938038649364676595382708882567582074768467750091758871986943425295325684397148357683679972957390367050797096129400800737430005406586421368399203345142990796139798355888856700153024507788780229752591276439736039630358687617540130010809829171308760432760545372777123, 4097) c = 14615370570055065930014711673507863471799103656443111041437374352195976523098242549568514149286911564703856030770733394303895224311305717058669800588144055600432004216871763513804811217695900972286301248213735105234803253084265599843829792871483051020532819945635641611821829176170902766901550045863639612054 d_low = 1550452349150409256147460237724995145109078733341405037037945312861833198753379389784394833566301246926188176937280242129 p =find_p_low(d_low, e, n) print(p) q = n//int(p) print(long_to_bytes(int(pow(c,inverse(e,(p-1)*(q-1)),n)))) 16%|█▌ | 649/4097 [05:39\u0026lt;30:03, 1.91it/s] 7144273005548131650853551395450069494964453188044847460634934841292232344248252187221815476738439420589974335544836614484175154121314660816095732214012317 b\u0026#39;moectf{7h3_st4rt_0f_c0pp3rsmith!}\u0026#39; EzMatrix # from Crypto.Util.number import * from secret import FLAG, secrets, SECERT_T assert len(secrets) == 16 assert FLAG == b\u0026#39;moectf{\u0026#39; + secrets + b\u0026#39;}\u0026#39; assert len(SECERT_T) \u0026lt;= 127 class LFSR: def __init__(self): self._s = list(map(int, list(\u0026#34;{:0128b}\u0026#34;.format(bytes_to_long(secrets)))))#_s为128位 for _ in range(8 * len(secrets)): #8*16=128次循环 self.clock() def clock(self): b = self._s[0] c = 0 for t in SECERT_T: c ^= self._s[t] self._s = self._s[1:] + [c] return b def stream(self, length): return [self.clock() for _ in range(length)] c = LFSR() stream = c.stream(256) print(\u0026#34;\u0026#34;.join(map(str, stream))[:-5]) # 11111110011011010000110110100011110110110101111000101011001010110011110011000011110001101011001100000011011101110000111001100111011100010111001100111101010011000110110101011101100001010101011011101000110001111110100000011110010011010010100100000000110 LFSR线性反馈位移寄存器，大小为128，已知251个输出，参考WP，需要求其反馈多项式和初始值\n$$ a_{i+n}=(c_1,c_2,···，c_n)*(a_1)^T $$\n收集2*n组数据，把c看作变量，求c\n收集结果，爆破5bits，求解\nfrom sage.all import * from Crypto.Util.number import * for i in range(32): output = \u0026#34;11111110011011010000110110100011110110110101111000101011001010110011110011000011110001101011001100000011011101110000111001100111011100010111001100111101010011000110110101011101100001010101011011101000110001111110100000011110010011010010100100000000110\u0026#34; pad=bin(i)[2:].zfill(5) output+=pad F=GF(2) n=128 V=VectorSpace(F,n) vec=V(list(map(int,output[n:]))) M=[] for i in range(n-1,2*n-1): m=[] for j in range(n): m.append(output[i-j]) M.append(m) M=matrix(F,M) try: sol=M.solve_right(vec) except ValueError: continue poly=list(sol) B=Matrix(F,n,n) for i in range(n): B[i,n-1]=poly[n-1-i] for i in range(n-1): B[i+1,i]=1 try: B_inv = B**-1 t=V(list(map(int,list(output[:n])))) print(b\u0026#34;moectf{\u0026#34;+long_to_bytes(int(\u0026#34;\u0026#34;.join(map(str,t*B_inv**(n))),2))+b\u0026#34;}\u0026#34;) except ZeroDivisionError: continue b\u0026#39;moectf{JH\\xd5\\xd6\\xed\\x82\\x03\\x07y\\xa2Z\\x11\\x1c\\xda\\xa3e}\u0026#39; b\u0026#39;moectf{k\\x85\\xaa\\x847\\xcb\\xbb\\x9a\\x81)TB\\xa9\\xee\\x04\\xae}\u0026#39; b\u0026#39;moectf{\\xc3\\xb0t=\\x98\\x037\\xa0(\\x98\\x15\\n\\xb0\\xaf\\xc8\\xb9}\u0026#39; b\u0026#39;moectf{T\\x05\\x9dr\\xf0\\xd3\\xfc\\xdd\\xef\\x00bOw\\x11G\\x10}\u0026#39; b\u0026#39;moectf{\\x8e,\\xccqq\\xd7\\xdf\\xe4\\xf6\\x90G\\x88\\x95\\xa5P\\xcd}\u0026#39; b\u0026#39;moectf{\\xaa\\xb8}%\\rW\\xe4\\xa6\\x94\\x81\\x1cb\\x99s\\xb3\\xf1}\u0026#39; b\u0026#39;moectf{\\xb5\\x06\\xe6\\xc7\\x88\\x0bU1\\xca\\xeb\\xd1D\\x06[ki}\u0026#39; b\u0026#39;moectf{K\\xc3\\xb2H\\xb2M\\xd3\\xa5\\x82\\x89\\x02#\\xa0\\xa9d\\xfa}\u0026#39; b\u0026#39;moectf{\\xcb\\x00\\x81F\\x9b\\x15\u0026gt;{G\\xf4\\x98_q!\\xfc\\xf5}\u0026#39; b\u0026#39;moectf{e4sy_lin3ar_sys!}\u0026#39; b\u0026#34;moectf{\\x8c\\x9e\\xed\\xa3+\\xf9\\xe1\u0026#39;\\xa7}\\xfe\\xb5,4\\x1c]}\u0026#34; b\u0026#39;moectf{qmdK\\x0e\\x84\\xb2\\xd5\\x0f\\x15\\x90uM\\xb0\\xdb4}\u0026#39; ","externalUrl":null,"permalink":"/post/moectf2024-crypto/","section":"文章","summary":"\u003ch2 class=\"relative group\"\u003e现代密码学入门指北 \n    \u003cdiv id=\"%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e根据已有信息，得到d=10937306181556310949935858914795529677662422361690470235893559064877687528573\u003c/p\u003e","title":"MoeCTF-crypto","type":"post"},{"content":" 没e也能玩 # 看到e=65537，直接算即可。\n一眼秒了 # from Crypto.Util.number import * from gmpy2 import * from serct import flag p = getPrime(512) q = getPrime(512) n = p*q m = bytes_to_long(flag) e = 65537 c = powmod(m, e, n) print(n) print(c) 52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153 48757373363225981717076130816529380470563968650367175499612268073517990636849798038662283440350470812898424299904371831068541394247432423751879457624606194334196130444478878533092854342610288522236409554286954091860638388043037601371807379269588474814290382239910358697485110591812060488786552463208464541069 yafu分解得到p,q\nfac: factoring 52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153 fac: using pretesting plan: normal fac: no tune info: using qs/gnfs crossover of 95 digits div: primes less than 10000 fmt: 1000000 iterations Total factoring time = 0.4196 seconds ***factors found*** P154 = 7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956045093 P154 = 7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956044421 ans = 1 直接计算即可\nBase # 丢cyberchef就行\nxor # from Crypto.Util.number import bytes_to_long,long_to_bytes from pwn import xor key = b\u0026#39;New_Star_CTF\u0026#39; c1= 8091799978721254458294926060841 m1 = long_to_bytes(c1^bytes_to_long(key)) c2= b\u0026#39;;:\\x1c1\u0026lt;\\x03\u0026gt;*\\x10\\x11u;\u0026#39; m2=xor(key,c2) print(m1+m2) \u0026#39;\u0026#39;\u0026#39; c1= 8091799978721254458294926060841 c2= b\u0026#39;;:\\x1c1\u0026lt;\\x03\u0026gt;*\\x10\\x11u;\u0026#39; \u0026#39;\u0026#39;\u0026#39; #b\u0026#39;flag{0ops!_you_know_XOR!}\u0026#39; Strange King # 猜测ksjr是flag变化得到\na=\u0026#39;ksjr{EcxvpdErSvcDgdgEzxqjql}\u0026#39; b=\u0026#39;flag\u0026#39; for i in range(len(b)): print(ord(a[i])-ord(b[i])) 得到：5 7 9 11 -\u0026gt;变异凯撒\na=\u0026#39;ksjr{EcxvpdErSvcDgdgEzxqjql}\u0026#39;.lower() c=\u0026#39;\u0026#39; for i in range(len(b)): if a[i]==\u0026#39;{\u0026#39; or a[i]==\u0026#39;}\u0026#39;: c+=a[i] continue c+=chr((ord(a[i])-5-2*i-ord(\u0026#39;a\u0026#39;))%26+ord(\u0026#39;a\u0026#39;)) print(c) 得到：flag{pleasedonotstoplearing}\n改大小写-\u0026gt;flag{PleaseDoNotStopLearing}\n(最开始尝试的时候，把{}直接去掉不作i的增量位，发现不行，才又尝试带上)\n这是几次方？ 疑惑！ # from Crypto.Util.number import * flag = b\u0026#39;flag{*****}\u0026#39; p = getPrime(512) q = getPrime(512) n = p*q e = 65537 m = bytes_to_long(flag) c = pow(m, e, n) hint = p^e + 10086 print(\u0026#34;c =\u0026#34;, c) print(\u0026#34;[n, e] =\u0026#34;, [n, e]) print(\u0026#34;hint =\u0026#34;, hint) \u0026#39;\u0026#39;\u0026#39; c = 36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762 [n, e] = [124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261, 65537] hint = 12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390 \u0026#39;\u0026#39;\u0026#39; p=hint^(e+10086)\nfrom Crypto.Util.number import * c = 36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762 n= 124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261 e= 65537 hint = 12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390 p=hint^e+10086 q=n//p phi=(p-1)*(q-1) d=inverse(e, phi) print(long_to_bytes(pow(c, d, n))) b'flag{yihuo_yuan_lai_xian_ji_suan_liang_bian_de2333}'\nSince you konw something # from pwn import xor #The Python pwntools library has a convenient xor() function that can XOR together data of different types and lengths from Crypto.Util.number import bytes_to_long key = ?? #extremely short FLAG = \u0026#39;flag{????????}\u0026#39; c = bytes_to_long(xor(FLAG,key)) print(\u0026#34;c={}\u0026#34;.format(c)) \u0026#39;\u0026#39;\u0026#39; c=218950457292639210021937048771508243745941011391746420225459726647571 \u0026#39;\u0026#39;\u0026#39; 其key和data都为byte类型\nfrom Crypto.Util.number import long_to_bytes from pwn import xor c=218950457292639210021937048771508243745941011391746420225459726647571 da=long_to_bytes(c) list_key=[] list_b=[b\u0026#39;a\u0026#39;,b\u0026#39;b\u0026#39;,b\u0026#39;c\u0026#39;,b\u0026#39;d\u0026#39;,b\u0026#39;e\u0026#39;,b\u0026#39;f\u0026#39;,b\u0026#39;g\u0026#39;,b\u0026#39;h\u0026#39;,b\u0026#39;i\u0026#39;,b\u0026#39;j\u0026#39;,b\u0026#39;k\u0026#39;,b\u0026#39;l\u0026#39;,b\u0026#39;m\u0026#39;,b\u0026#39;n\u0026#39;,b\u0026#39;o\u0026#39;,b\u0026#39;p\u0026#39;,b\u0026#39;q\u0026#39;,b\u0026#39;r\u0026#39;,b\u0026#39;s\u0026#39;,b\u0026#39;t\u0026#39;,b\u0026#39;u\u0026#39;,b\u0026#39;v\u0026#39;,b\u0026#39;w\u0026#39;,b\u0026#39;x\u0026#39;,b\u0026#39;y\u0026#39;,b\u0026#39;z\u0026#39;] for a in list_b: for b in list_b: list_key.append(a+b) for key in list_key: m=xor(key,da) if b\u0026#39;flag\u0026#39; in m: print(m) list_key先尝试只有一组list_b，没有结果，尝试两组，得到：\nb'flag{Y0u_kn0w_th3_X0r_b3tt3r}'\nJust one and more than two # from Crypto.Util.number import * flag = b\u0026#39;flag{?????}\u0026#39; m1 = bytes_to_long(flag[:len(flag)//2]) m2 = bytes_to_long(flag[len(flag)//2:]) e = 65537 p, q, r= (getPrime(512) for _ in range(3)) N=p*q*r c1 = pow(m1, e, p) c2 = pow(m2, e, N) print(f\u0026#39;p={p}\\nq={q}\\nr={r}\\nc1={c1}\\nc2={c2}\u0026#39;) \u0026#39;\u0026#39;\u0026#39; p=11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133 q=11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393 r=12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371 c1=8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451 c2=1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445 \u0026#39;\u0026#39;\u0026#39; 考虑RSA的原理\nfrom Crypto.Util.number import * p=11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133 q=11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393 r=12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371 c1=8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451 c2=1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445 N=p*q*r e=65537 d1=inverse(e, (p-1)) d2=inverse(e, (q-1)*(r-1)*(p-1)) m1=pow(c1, d1, p) m2=pow(c2, d2, N) k1=long_to_bytes(m1) k2=long_to_bytes(m2) print(k1+k2) 得到flag: b'flag{Y0u_re4lly_kn0w_Euler_4nd_N3xt_Eu1er_is_Y0u!}'\n茶里茶气 # 对操作进行逆运算，先算v2：\np = 446302455051275584229157195942211 v2 = 0 derta = 462861781278454071588539315363 for i in range(32): v2 += derta;v2 %= p print( \u0026#34;v2 =\u0026#34; , v2 ) #v2 = 14811577000910530290833258091616 接着算v0和v1:\nfrom Crypto.Util.number import * l = 199 p = 446302455051275584229157195942211 v0 = 190997821330413928409069858571234 v1 = 137340509740671759939138452113480 v2 = 14811577000910530290833258091616 v3 = 489552116384728571199414424951 v4 = 469728069391226765421086670817 v5 = 564098252372959621721124077407 v6 = 335640247620454039831329381071 derta = 462861781278454071588539315363 for i in range(32): v2 = (v2 - derta) % p update_v0 = (v1 + v2) ^ (8 * v1 + v5) ^ ((v1 \u0026gt;\u0026gt; 7) + v6);v0 = (v0 - update_v0) % p update_v1 = (v0 + v2) ^ (8 * v0 + v3) ^ ((v0 \u0026gt;\u0026gt; 7) + v4);v1 = (v1 - update_v1) % p v0h=hex(v0) v1h=hex(v1) 最后flag:\nv0_integer = int(v0h, 16) v1_integer = int(v1h, 16) a = (v0_integer \u0026lt;\u0026lt; (l // 2)) + v1_integer a=hex(a) flag=\u0026#39;\u0026#39; for i in range(2, len(a), 2): char_hex = a[i:i+2] char = chr(int(char_hex, 16)) flag += char print(flag) flag{f14gg9_te2_1i_7ea_7}\n欧拉欧拉！！ # from Crypto.Util.number import * flag = b\u0026#39;flag{*********}\u0026#39; m = bytes_to_long(flag) def get_prime(bits): while True: p = getPrime(bits) x = (1 \u0026lt;\u0026lt; bits) - 1 ^ p for i in range(-10, 11): if isPrime(x + i): return p, x + i, i p, q, i = get_prime(512) print(\u0026#34;p =\u0026#34;, p). print(\u0026#34;q =\u0026#34;, q) n = p * q e = 65537 c = pow(m, e, n) print(\u0026#34;c =\u0026#34;, c) print(\u0026#34;n =\u0026#34;, n) print(\u0026#34;i =\u0026#34;, i) \u0026#39;\u0026#39;\u0026#39; c = 14859652090105683079145454585893160422247900801288656111826569181159038438427898859238993694117308678150258749913747829849091269373672489350727536945889312021893859587868138786640133976196803958879602927438349289325983895357127086714561807181967380062187404628829595784290171905916316214021661729616120643997 n = 18104347461003907895610914021247683508445228187648940019610703551961828343286923443588324205257353157349226965840638901792059481287140055747874675375786201782262247550663098932351593199099796736521757473187142907551498526346132033381442243277945568526912391580431142769526917165011590824127172120180838162091 i = -3 \u0026#39;\u0026#39;\u0026#39; x = (1 \u0026lt;\u0026lt; bits) - 1 ^ p，1左移512位后-1再与p异或，其实是二进制512个1与p异或，结果就相当于其十进制相减，即x=2**512-1-p,那么解方程就可以得到p和q：\nfrom Crypto.Util.number import * from gmpy2 import * def solve(a, b, c): d = (b*b - 4*a*c) if d \u0026lt; 0: return 0,0 x1 = (-b + iroot(d,2)[0]) // (2*a) x2 = (-b - iroot(d,2)[0]) // (2*a) return x1, x2 a=1 b=4-2**512 c=18104347461003907895610914021247683508445228187648940019610703551961828343286923443588324205257353157349226965840638901792059481287140055747874675375786201782262247550663098932351593199099796736521757473187142907551498526346132033381442243277945568526912391580431142769526917165011590824127172120180838162091 p,q = solve(a, b, c) e=65537 c=14859652090105683079145454585893160422247900801288656111826569181159038438427898859238993694117308678150258749913747829849091269373672489350727536945889312021893859587868138786640133976196803958879602927438349289325983895357127086714561807181967380062187404628829595784290171905916316214021661729616120643997 phi=(p-1)*(q-1) d=inverse(e,phi) print(long_to_bytes(pow(c,d,p*q))) 得到：b'flag{y0u_really_kn0w_the_phi}'\n不过吧，这里的n可以直接在网站上分解。。。\n圣石匕首 # emmm这是个RSA小dp的攻击脚本，看不懂（大概知道是格），但是运行就好了（需要saga）\nimport gmpy2 beta=0.37 delta=0.01 n=round((1-2*beta-2*delta)/((1-beta)^2-2*delta-beta),6) e= 3668637434348843171145584606519031375027610199908169273169275927238735031431533260375377791001464799116453803408104076615710166171199990283470548282669948353598733020244755959461974603778630346457439345913209321194112256348302765254052193562603687450740346132207444615610078198488883539133291840346099727880587092122957231085658576850601488737629051252914095889313671875244094452330062619943781809984690384476868543570724769198985172300665613239047649089399919032152539462701309393130614829962670866062380816370571057536421400102100259975636785825540933280194583888638501981649650640939392658268133881679239293596283 N= 9748523098652101859947730585916490335896800943242955095820326993765071194474558998322598145898741779502734772138283011560029368500998354183150180904846368209977332058847768859238711047784703104535311583123388923571789764758869419482184613566672922481672444028753365755071127320541645016370072493604532087980626825687519083734367691341907014061379844209864141989961751681235215504772582878202048494707090104738899927036896915997556102574747166491969027546256022019959716418675672979328622656831990050058120299353807110233202113906317969377201045402271911946244076903611612303290556012512559696538977841061277173754331 c= 5374936627659221745209010619827617207565185520404653329184605916859755641352457088986635357806048863755173540232471505333583684733535121482637476692432365062808450583470788320547816186936317927449796090525477205337038591439577855884910604383190932340306435201976465543731935147881754136301375206828970248293731391543905441514528959500307972606931927112031018356411970001312995489429650903529877904694901310020882390008248466887950986326522740278880600110217817950511478637493101027659292006016454642135508207492151610829525082829566392116546434101694921106423469015683277992978077101831969525458693031031468092418427 n=int(n+1) #print(n) m=int(n*(1-beta)) X=int(pow(N,delta)) Y=int(pow(N,delta+beta)) Z.\u0026lt;x,y\u0026gt;=ZZ[] L=Matrix(ZZ,n,n) f=e*x-y for i in range(n): g=list(N^max(0,m-i)*x^(n-1-i)*f^i) for j in range(len(g)): L[i,j]=g[j][0]*X^(n-1-j)*Y^j L=L.LLL()[0] coeff=[] for i in range(n): coeff.append((L[i]//(X^(n-1-i)*Y^i),\u0026#39;x\u0026#39;+\u0026#39;**\u0026#39;+str(n-1-i)+\u0026#39;*y\u0026#39;+\u0026#39;**\u0026#39;+str(i))) s=\u0026#39;\u0026#39; for i in range(len(coeff)): s+=str(coeff[i][0])+\u0026#39;*\u0026#39;+coeff[i][1]+\u0026#39;+\u0026#39; f=eval(s[:-1]) factored_f = f.factor() first_polynomial = factored_f[0][0] first_coefficient = first_polynomial.coefficients()[0] k = first_coefficient + 1 dp = first_polynomial.coefficients()[1] p=(e*dp-1)//k+1 q=N//p phi=(p-1)*(q-1) d=gmpy2.invert(e,phi) m=pow(c,d,N) print(bytes.fromhex(hex(m)[2:])) b'flag{small_dp_is_not_secure_adhfaiuhaph}'\n故事新编1 # 维吉尼亚编码，开始没看出来。。。\nfrom hashlib import md5 zen1 = \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; key1 = def enc1(plaintext, key): def shift_char(c, k): return chr(((ord(c) - ord(\u0026#39;A\u0026#39;) + (ord(k) - ord(\u0026#39;A\u0026#39;))) % 26) + ord(\u0026#39;A\u0026#39;)) plaintext = plaintext.upper() key = key.upper() ciphertext = [] key_index = 0 for char in plaintext: if char.isalpha(): ciphertext.append(shift_char(char, key[key_index % len(key)])) key_index += 1 else: ciphertext.append(char) return \u0026#39;\u0026#39;.join(ciphertext) print(\u0026#39;enc = \\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39; + enc1(zen1, key1)+\u0026#39;\\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39;) flag = b\u0026#39;flag{\u0026#39;+md5(zen1.encode()).hexdigest().encode()+b\u0026#39;}\u0026#39; print(flag) #---------------------------------------------- enc = \u0026#39;\u0026#39;\u0026#39; TYBNBBZNT WF TYUMMK NAIB HYFZ. XFIFBKWG AM CXBMYK BVNF CNITBWBB. GVEJMX QL VXBHRJ NITV VIFXZRP. WPFXEYQ QG OWNUXZ MBTV QBEJMBKTNXL. TYSN JL JXNMMF GZUO GMLNXL. GCSLTX QL VXBHRJ NITV WYGAS. SDUHT QL PXOSAWLF KMTXTJWYANZ VWNHMA. GCWWJTT VULMG NJYO\u0026#39;M AIYVQOY WHPNOA NH JFRSE UAM KOEMG. NDNIHCZB IZOPLCDTTBNR JSNLM QNZBNR. MFEGLT LPHOEL BRNYS IILM LQZRFNMR. CGFXAG RPJMBKBNEG GVDYOVMW. \u0026#39;\u0026#39;\u0026#39; 使用网站Vigenere Solver | guballa.de爆破\nfrom hashlib import md5 zen1 = \u0026#34;BEAUTIFUL IS BETTER THAN UGLY.\\nEXPLICIT IS BETTER THAN IMPLICIT.\\nSIMPLE IS BETTER THAN COMPLEX.\\nCOMPLEX IS BETTER THAN COMPLICATED.\\nFLAT IS BETTER THAN NESTED.\\nSPARSE IS BETTER THAN DENSE.\\nFLAGA IS VEGENERE\\nREADABILITY COUNTS.\\nSPECIAL CASES AREN\u0026#39;T SPECIAL ENOUGH TO BREAK THE RULES.\\nALTHOUGH PRACTICALITY BEATS PURITY.\\nERRORS SHOULD NEVER PASS SILENTLY.\\nUNLESS EXPLICITLY SILENCED.\\n\u0026#34; key1 = \u0026#34;subtitution\u0026#34; def enc1(plaintext, key): def shift_char(c, k): return chr(((ord(c) - ord(\u0026#39;A\u0026#39;) + (ord(k) - ord(\u0026#39;A\u0026#39;))) % 26) + ord(\u0026#39;A\u0026#39;)) plaintext = plaintext.upper() key = key.upper() ciphertext = [] key_index = 0 for char in plaintext: if char.isalpha():#判断是否为字母 ciphertext.append(shift_char(char, key[key_index % len(key)])) #key[key_index % len(key)]为取key的第key_index个字符，循环取 key_index += 1 else: ciphertext.append(char) return \u0026#39;\u0026#39;.join(ciphertext) print(\u0026#39;enc = \\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39; + enc1(zen1, key1)+\u0026#39;\\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39;) flag = b\u0026#39;flag{\u0026#39;+md5(zen1.encode()).hexdigest().encode()+b\u0026#39;}\u0026#39; print(flag) #---------------------------------------------- \u0026#39;\u0026#39;\u0026#39;enc =\u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; TYBNBBZNT WF TYUMMK NAIB HYFZ. XFIFBKWG AM CXBMYK BVNF CNITBWBB. GVEJMX QL VXBHRJ NITV VIFXZRP. WPFXEYQ QG OWNUXZ MBTV QBEJMBKTNXL. TYSN JL JXNMMF GZUO GMLNXL. GCSLTX QL VXBHRJ NITV WYGAS. SDUHT QL PXOSAWLF KMTXTJWYANZ VWNHMA. GCWWJTT VULMG NJYO\u0026#39;M AIYVQOY WHPNOA NH JFRSE UAM KOEMG. NDNIHCZB IZOPLCDTTBNR JSNLM QNZBNR. MFEGLT LPHOEL BRNYS IILM LQZRFNMR. CGFXAG RPJMBKBNEG GVDYOVMW. \u0026#39;\u0026#39;\u0026#39; #b\u0026#39;flag{a3518a1ac8e33c7f66ed606f91c71211}\u0026#39; 故事新编2 # 同上。。。\nfrom hashlib import md5 zen2 = \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; key2 = dict1 = {\u0026#39;A\u0026#39;: 0, \u0026#39;B\u0026#39;: 1, \u0026#39;C\u0026#39;: 2, \u0026#39;D\u0026#39;: 3, \u0026#39;E\u0026#39;: 4, \u0026#39;F\u0026#39;: 5, \u0026#39;G\u0026#39;: 6, \u0026#39;H\u0026#39;: 7, \u0026#39;I\u0026#39;: 8, \u0026#39;J\u0026#39;: 9, \u0026#39;K\u0026#39;: 10, \u0026#39;L\u0026#39;: 11, \u0026#39;M\u0026#39;: 12, \u0026#39;N\u0026#39;: 13, \u0026#39;O\u0026#39;: 14, \u0026#39;P\u0026#39;: 15, \u0026#39;Q\u0026#39;: 16, \u0026#39;R\u0026#39;: 17, \u0026#39;S\u0026#39;: 18, \u0026#39;T\u0026#39;: 19, \u0026#39;U\u0026#39;: 20, \u0026#39;V\u0026#39;: 21, \u0026#39;W\u0026#39;: 22, \u0026#39;X\u0026#39;: 23, \u0026#39;Y\u0026#39;: 24, \u0026#39;Z\u0026#39;: 25} dict2 = {0: \u0026#39;A\u0026#39;, 1: \u0026#39;B\u0026#39;, 2: \u0026#39;C\u0026#39;, 3: \u0026#39;D\u0026#39;, 4: \u0026#39;E\u0026#39;, 5: \u0026#39;F\u0026#39;, 6: \u0026#39;G\u0026#39;, 7: \u0026#39;H\u0026#39;, 8: \u0026#39;I\u0026#39;, 9: \u0026#39;J\u0026#39;, 10: \u0026#39;K\u0026#39;, 11: \u0026#39;L\u0026#39;, 12: \u0026#39;M\u0026#39;, 13: \u0026#39;N\u0026#39;, 14: \u0026#39;O\u0026#39;, 15: \u0026#39;P\u0026#39;, 16: \u0026#39;Q\u0026#39;, 17: \u0026#39;R\u0026#39;, 18: \u0026#39;S\u0026#39;, 19: \u0026#39;T\u0026#39;, 20: \u0026#39;U\u0026#39;, 21: \u0026#39;V\u0026#39;, 22: \u0026#39;W\u0026#39;, 23: \u0026#39;X\u0026#39;, 24: \u0026#39;Y\u0026#39;, 25: \u0026#39;Z\u0026#39;} def generate_key(message, key): for i in range(len(message)): if message[i].isalpha() == False: pass else: key += message[i] return key def enc2(message, key): message = message.upper() key = key.upper() key_new = generate_key(message, key) cipher_text = \u0026#39;\u0026#39; i = 0 for letter in message: if letter.isalpha(): x = (dict1[letter]+dict1[key_new[i]]) % 26 i += 1 cipher_text += dict2[x] else: cipher_text += letter return cipher_text print(\u0026#39;enc = \\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39; + enc2(zen2, key2)+\u0026#39;\\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39;) flag = b\u0026#39;flag{\u0026#39;+md5(zen2.encode()).hexdigest().encode()+b\u0026#39;}\u0026#39; print(flag) #---------------------------------------------- enc = \u0026#39;\u0026#39;\u0026#39; AH ILV XUDX WY UFJWTCVMF, VJFWWS YHQ UMSJBTRZSS NG KNLWL. XTTKE LPCHER HY SFW-- TUH GVWMSLLEMC CAPY BQT --FFAMFUT HYM GZ BC VX. OMOPCOYD TFTH ZOG FAJ GVH VK VUCIHQS YF FGEGM VRZFNA MIM\u0026#39;RX ICKUA. HBH MK TCHNVV WBTP URJAZ. SMXAHYXA UEIRV DW FFEXU PYZARV OLRV JWLAX APA. BY XYX PMCCMSLGGOPQTG PW PMGO XA IKILTQB, VB\u0026#39;K H BRG BRIX. XQ TPR QFHLFMHVWETQTG PW MMHJ XA IKILTQB, VB EEY TC T USLS TDMN. \u0026#39;\u0026#39;\u0026#39; 这个与故事新编1不同点在于，这里的加密空间是定义的dict，而不是ascll表。通过使用故事新编1中网站破解的autokey功能破解。\nfrom hashlib import md5 zen2 = \u0026#34;IN THE FACE OF AMBIGUITY, REFUSE THE TEMPTATION TO GUESS.\\n\\ THERE SHOULD BE ONE-- AND PREFERABLY ONLY ONE --OBVIOUS WAY TO DO IT.\\n\\ ALTHOUGH THAT WAY MAY NOT BE OBVIOUS AT FIRST UNLESS YOU\u0026#39;RE DUTCH.\\n\\ NOW IS BETTER THAN NEVER.\\n\\ ALTHOUGH NEVER IS OFTEN BETTER THAN RIGHT NOW.\\n\\ IF THE IMPLEMENTATION IS HARD TO EXPLAIN, IT\u0026#39;S A BAD IDEA.\\n\u0026#34; key2 = \u0026#34;supersubtitution\u0026#34; dict1 = {\u0026#39;A\u0026#39;: 0, \u0026#39;B\u0026#39;: 1, \u0026#39;C\u0026#39;: 2, \u0026#39;D\u0026#39;: 3, \u0026#39;E\u0026#39;: 4, \u0026#39;F\u0026#39;: 5, \u0026#39;G\u0026#39;: 6, \u0026#39;H\u0026#39;: 7, \u0026#39;I\u0026#39;: 8, \u0026#39;J\u0026#39;: 9, \u0026#39;K\u0026#39;: 10, \u0026#39;L\u0026#39;: 11, \u0026#39;M\u0026#39;: 12, \u0026#39;N\u0026#39;: 13, \u0026#39;O\u0026#39;: 14, \u0026#39;P\u0026#39;: 15, \u0026#39;Q\u0026#39;: 16, \u0026#39;R\u0026#39;: 17, \u0026#39;S\u0026#39;: 18, \u0026#39;T\u0026#39;: 19, \u0026#39;U\u0026#39;: 20, \u0026#39;V\u0026#39;: 21, \u0026#39;W\u0026#39;: 22, \u0026#39;X\u0026#39;: 23, \u0026#39;Y\u0026#39;: 24, \u0026#39;Z\u0026#39;: 25} dict2 = {0: \u0026#39;A\u0026#39;, 1: \u0026#39;B\u0026#39;, 2: \u0026#39;C\u0026#39;, 3: \u0026#39;D\u0026#39;, 4: \u0026#39;E\u0026#39;, 5: \u0026#39;F\u0026#39;, 6: \u0026#39;G\u0026#39;, 7: \u0026#39;H\u0026#39;, 8: \u0026#39;I\u0026#39;, 9: \u0026#39;J\u0026#39;, 10: \u0026#39;K\u0026#39;, 11: \u0026#39;L\u0026#39;, 12: \u0026#39;M\u0026#39;, 13: \u0026#39;N\u0026#39;, 14: \u0026#39;O\u0026#39;, 15: \u0026#39;P\u0026#39;, 16: \u0026#39;Q\u0026#39;, 17: \u0026#39;R\u0026#39;, 18: \u0026#39;S\u0026#39;, 19: \u0026#39;T\u0026#39;, 20: \u0026#39;U\u0026#39;, 21: \u0026#39;V\u0026#39;, 22: \u0026#39;W\u0026#39;, 23: \u0026#39;X\u0026#39;, 24: \u0026#39;Y\u0026#39;, 25: \u0026#39;Z\u0026#39;} def generate_key(message, key): for i in range(len(message)): if message[i].isalpha() == False: pass else: key += message[i] return key def enc2(message, key): message = message.upper() key = key.upper() key_new = generate_key(message, key) cipher_text = \u0026#39;\u0026#39; i = 0 for letter in message: if letter.isalpha(): x = (dict1[letter]+dict1[key_new[i]]) % 26 i += 1 cipher_text += dict2[x] else: cipher_text += letter return cipher_text print(\u0026#39;enc = \\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39; + enc2(zen2, key2)+\u0026#39;\\\u0026#39;\\\u0026#39;\\\u0026#39;\u0026#39;) flag = b\u0026#39;flag{\u0026#39;+md5(zen2.encode()).hexdigest().encode()+b\u0026#39;}\u0026#39; print(flag) #---------------------------------------------- enc = \u0026#39;\u0026#39;\u0026#39; AH ILV XUDX WY UFJWTCVMF, VJFWWS YHQ UMSJBTRZSS NG KNLWL. XTTKE LPCHER HY SFW-- TUH GVWMSLLEMC CAPY BQT --FFAMFUT HYM GZ BC VX. OMOPCOYD TFTH ZOG FAJ GVH VK VUCIHQS YF FGEGM VRZFNA MIM\u0026#39;RX ICKUA. HBH MK TCHNVV WBTP URJAZ. SMXAHYXA UEIRV DW FFEXU PYZARV OLRV JWLAX APA. BY XYX PMCCMSLGGOPQTG PW PMGO XA IKILTQB, VB\u0026#39;K H BRG BRIX. XQ TPR QFHLFMHVWETQTG PW MMHJ XA IKILTQB, VB EEY TC T USLS TDMN. \u0026#39;\u0026#39;\u0026#39; #b\u0026#39;flag{1e3b9bc1e20bde4b0ca0c30a8aa20122}\u0026#39; 没 e 这能玩？ # from Crypto.Util.number import * import random import sympy import gmpy2 m = bytes_to_long(b\u0026#39;flag{*****}\u0026#39;) p = getPrime(512) q = getPrime(512) r = getPrime(512) h1 = 1*p + 1*q + 1*r h2 = 2*p + 3*q + 3*r h3 = 9*p + 9*q + 6*r print( \u0026#34;hint_of_pqr=\u0026#34; , h1 , h2 , h3 ) e = getPrime(64) a_big_prime = getPrime( 512 ) hint = pow(a_big_prime,e,2**512) print( \u0026#34;big_prime is: \u0026#34; , a_big_prime ) print( \u0026#34;hint is: \u0026#34; , hint ) n = p*q*r c = pow( m , e , n ) print( \u0026#34;c=\u0026#34; , c ) \u0026#34;\u0026#34;\u0026#34; hint_of_pqr= 31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497 83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760 248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172 big_prime is: 10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379 hint is: 1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571 c= 999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310 \u0026#34;\u0026#34;\u0026#34; 求p,q,r,n\nq=h2+h3//3-5*h1 r=h2-2*h1-q p=h3//3-2*h1-q n=p*q*r 求e,d\ne = discrete_log(2**512, hint, a_big_prime) d = inverse(e,(p-1)*(q-1)*(r-1)) from Crypto.Util.number import * from sympy import * h1 = 31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497 h2 = 83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760 h3 = 248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172 q=h2+h3//3-5*h1 r=h2-2*h1-q p=h3//3-2*h1-q n=p*q*r a_big_prime = 10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379 hint = 1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571 e = discrete_log(2**512, hint, a_big_prime) d = inverse(e,(p-1)*(q-1)*(r-1)) c= 999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310 print(long_to_bytes(pow(c,d,n))) #b\u0026#39;flag{th1s_2s_A_rea119_f34ggg}\u0026#39; 不用谢喵 # from Crypto.Util.number import long_to_bytes as l2b , bytes_to_long as b2l c = 0xf2040fe3063a5b6c65f66e1d2bf47b4cddb206e4ddcf7524932d25e92d57d3468398730b59df851cbac6d65073f9e138 d = 0xf9899749fec184d81afecd35da430bc394686e847d72141b3a955a4f6e920e7d91cb599d92ba2a6ba51860bb5b32f22])) #l2b(c)[0:16]是iv，l2b(d)[16:32]是与iv异或但是没有和key异或的flag1 part1=l2b( b2l(l2b(c)[0:16]) ^ b2l(l2b(d)[16:32])) #l2b(c)[16:32]是与key异或后flag1，l2b(d)[32:48]是flag2与加密后的flag1异或的结果 part2=l2b( b2l(l2b(c)[16:32]) ^ b2l(l2b(d)[32:48])) print(part1+part2) #b\u0026#39;flag{HOw_c4REfu1Ly_yOu_O65ERve!}\u0026#39; 两个黄鹂鸣翠柳 # Related Message Attack，使用half-gcd求解公共部分\nfrom Crypto.Util.number import * def HGCD(a, b): if 2 * b.degree() \u0026lt;= a.degree() or a.degree() == 1: return 1, 0, 0, 1 x = a.parent().gen() m = a.degree() // 2 a_top, a_bot = a.quo_rem(x**m) b_top, b_bot = b.quo_rem(x**m) R00, R01, R10, R11 = HGCD(a_top, b_top) c = R00 * a + R01 * b d = R10 * a + R11 * b q, e = c.quo_rem(d) d_top, d_bot = d.quo_rem(x ** (m // 2)) e_top, e_bot = e.quo_rem(x ** (m // 2)) S00, S01, S10, S11 = HGCD(d_top, e_top) RET00 = S01 * R00 + (S00 - q * S01) * R10 RET01 = S01 * R01 + (S00 - q * S01) * R11 RET10 = S11 * R00 + (S10 - q * S11) * R10 RET11 = S11 * R01 + (S10 - q * S11) * R11 return RET00, RET01, RET10, RET11 def GCD(a, b): q, r = a.quo_rem(b) if r == 0: return b R00, R01, R10, R11 = HGCD(a, b) c = R00 * a + R01 * b d = R10 * a + R11 * b if d == 0: return c.monic() q, r = c.quo_rem(d) if r == 0: return d return GCD(d, r) e = 683 c1 = 56853945083742777151835031127085909289912817644412648006229138906930565421892378967519263900695394136817683446007470305162870097813202468748688129362479266925957012681301414819970269973650684451738803658589294058625694805490606063729675884839653992735321514315629212636876171499519363523608999887425726764249 c2 = 89525609620932397106566856236086132400485172135214174799072934348236088959961943962724231813882442035846313820099772671290019212756417758068415966039157070499263567121772463544541730483766001321510822285099385342314147217002453558227066228845624286511538065701168003387942898754314450759220468473833228762416 N = 147146340154745985154200417058618375509429599847435251644724920667387711123859666574574555771448231548273485628643446732044692508506300681049465249342648733075298434604272203349484744618070620447136333438842371753842299030085718481197229655334445095544366125552367692411589662686093931538970765914004878579967 delta = 93400488537789082145777768934799642730988732687780405889371778084733689728835104694467426911976028935748405411688535952655119354582508139665395171450775071909328192306339433470956958987928467659858731316115874663323404280639312245482055741486933758398266423824044429533774224701791874211606968507262504865993 ifflag=false for t in range(-255,255):#两个多项式中x相差不过255*2*delta PR.\u0026lt;x\u0026gt;=PolynomialRing(Zmod(N)) f1 = x^e - c1 f2 = (x+t*delta)^e-c2 x_same= GCD (f1,f2)#共同的f1的系数 m1 = int(-x_same.monic().coefficients()[0]) for i in range(255): m = (m1 % N - i * delta) % N if m\u0026gt;0: flag=long_to_bytes(m) if b\u0026#39;flag\u0026#39; in flag: ifflag=true print(f\u0026#34;flag={flag}\u0026#34;) break if ifflag: break #flag=b\u0026#39;flag{V_me_the_flag}\u0026#39; Related Message Attack # 攻击条件 # 当 Alice 使用同一公钥对两个具有某种线性关系的消息 M1 与 M2 进行加密，并将加密后的消息 C1，C2 发送给了 Bob 时，我们就可能可以获得对应的消息 M1 与 M2。这里我们假设模数为 N，两者之间的线性关系如下\nM1≡f(M2)modN\n其中 f 为一个线性函数，比如说 f=ax+b。\n在具有较小错误概率下的情况下，其复杂度为 O(elog2N)。\n这一攻击由 Franklin，Reiter 提出。\n攻击原理 # C1≡Me1modN，并且 M1≡f(M2)modN，那么 M2 是 f(x)e≡C1modN 的一个解，即它是方程 f(x)e−C1 在模 N 意义下的一个根。同样的，M2 是 xe−C2 在模 N 意义下的一个根。所以说 x−M2 同时整除以上两个多项式。因此，可以求得两个多项式的最大公因子，如果最大公因子恰好是线性的话，那么就求得了 M2。需要注意的是，在 e=3 的情况下，最大公因子一定是线性的。\n俱以我之名 # 类似维纳攻击的原理,由All_in_my_name与Golden_Oath（N^4量级）和x的关系可以得出具体的Golden_Oath\n进而由Golden_Oath和n得到p，q\nfrom Crypto.Util.number import * from sympy import symbols, Eq, solve n = 141425071303405369267688583480971314815032581405819618511016190023245950842423565456025578726768996255928405749476366742320062773129810617755239412667111588691998380868379955660483185372558973059599254495581547016729479937763213364591413126146102483671385285672028642742654014426993054793378204517214486744679 c = 104575090683421063990494118954150936075812576661759942057772865980855195301985579098801745928083817885393369435101522784385677092942324668770336932487623099755265641877712097977929937088259347596039326198580193524065645826424819334664869152049049342316256537440449958526473368110002271943046726966122355888321 y = 217574365691698773158073738993996550494156171844278669077189161825491226238745356969468902038533922854535578070710976002278064001201980326028443347187697136216041235312192490502479015081704814370278142850634739391445817028960623318683701439854891399013393469200033510113406165952272497324443526299141544564964545937461632903355647411273477731555390580525472533399606416576667193890128726061970653201509841276177937053500663438053151477018183074107182442711656306515049473061426018576304621373895497210927151796054531814746265988174146635716820986208719319296233956243559891444122410388128465897348458862921336261068868678669349968117097659195490792407141240846445006330031546721426459458395606505793093432806236790060342049066284307119546018491926250151057087562126580602631912562103705681810139118673506298916800665912859765635644796622382867334481599049728329203920912683317422430015635091565073203588723830512169316991557606976424732212785533550238950903858852917097354055547392337744369560947616517041907362337902584102983344969307971888314998036201926257375424706901999793914432814775462333942995267009264203787170147555384279151485485660683109778282239772043598128219664150933315760352868905799949049880756509591090387073778041 e = 65537 class ContinuedFraction(): def __init__(self, y, n): self.number_list = [] self.fraction_list = [] self.GenerateNumberList(y, n) self.GenerateFractionList() def GenerateNumberList(self, y, n): while y != 1: quotient = y // n remainder = y % n self.number_list.append(quotient) y = n n = remainder def GenerateFractionList(self): self.fraction_list.append([self.number_list[0], 1]) for i in range(1, len(self.number_list)): y = self.number_list[i] n = 1 for j in range(i): temp = y y = n + y * self.number_list[i - j - 1] n = temp self.fraction_list.append([y, n]) N = pow(n,4) Golden_Oath=0 a = ContinuedFraction(y, N).fraction_list for k, x in a: # 判断哪一个是我们所需的 x if b\u0026#39;end\u0026#39; in long_to_bytes(x): print(long_to_bytes(x)) Golden_Oath = (x*y-1)//k print(Golden_Oath) break p, q = symbols(\u0026#39;p q\u0026#39;) equation1 = Eq(p * q, n) equation2 = Eq((p-114)*(p-514)*(p+114)*(p+514)*(q-1919)*(q-810)*(q+1919)*(q+810), Golden_Oath) solutions = solve((equation1, equation2), (p, q)) for sol in solutions: p,q=map(int,sol) if p\u0026gt;0 and q\u0026gt;0: break print(long_to_bytes(pow(c,inverse(e,(p-1)*(q-1)),n))) #b\u0026#39;flag{rE@L_d@m@9e_15_7h3_mo5t_au7hEn7ic_dam49E}\u0026#39; easy_ecc # 椭圆曲线加密，数据给全了,只用计算m=c1-k*c2\nfrom Crypto.Util.number import * p = 64408890408990977312449920805352688472706861581336743385477748208693864804529 a = 111430905433526442875199303277188510507615671079377406541731212384727808735043 b = 89198454229925288228295769729512965517404638795380570071386449796440992672131 k = 86388708736702446338970388622357740462258632504448854088010402300997950626097 E = EllipticCurve(GF(p),[a,b])#构建椭圆曲线E c1 = E((10968743933204598092696133780775439201414778610710138014434989682840359444219,50103014985350991132553587845849427708725164924911977563743169106436852927878)) c2 = E((16867464324078683910705186791465451317548022113044260821414766837123655851895,35017929439600128416871870160299373917483006878637442291141472473285240957511)) c_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582 c_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569 m = c1 - k*c2 flag = long_to_bytes(int(c_left//m[0])) + long_to_bytes(int(c_right//m[1])) print(flag) RSA?cmd5! # 注意到\ndef get_s(m0, d0, n0): hm0 = get_MD5(m0) hm1 = bytes_to_long(hm0.encode()) s0 = pow(hm1, d0, n0) return s0 对s处理得到m的md5值\nm_hash = long_to_bytes(pow(s,e,n))#b\u0026#39;86133884de98baada58a8c4de66e15b8\u0026#39; 可以网站查找或者爆破（查表快\nfrom Crypto.Util.number import * import itertools from hashlib import md5 c = 119084320846787611587774426118526847905825678869032529318497425064970463356147909835330423466179802531093233559613714033492951177656433798856482195873924140269461792479008703758436687940228268475598134411304167494814557384094637387369282900460926092035234233538644197114822992825439656673482850515654334379332 s = 5461514893126669960233658468203682813465911805334274462134892270260355037191167357098405392972668890146716863374229152116784218921275571185229135409696720018765930919309887205786492284716906060670649040459662723215737124829497658722113929054827469554157634284671989682162929417551313954916635460603628116503 [n,e] = [139458221347981983099030378716991183653410063401398496859351212711302933950230621243347114295539950275542983665063430931475751013491128583801570410029527087462464558398730501041018349125941967135719526654701663270142483830687281477000567117071676521061576952568958398421029292366101543468414270793284704549051, 65537] def get_flag(m0): # 请用这个函数来转m得到flag import hashlib flag = \u0026#39;flag{th1s_1s_my_k3y:\u0026#39; + m0 + \u0026#39;0x\u0026#39; + hashlib.sha256(m0.encode()).hexdigest() + \u0026#39;}\u0026#39; print(flag) m_hash = long_to_bytes(pow(s,e,n)) #b\u0026#39;86133884de98baada58a8c4de66e15b8\u0026#39;查表得m m=\u0026#39;adm0n12\u0026#39; get_flag(m) #flag{th1s_1s_my_k3y:adm0n120xbfab06114aa460b85135659e359fe443f9d91950ca95cbb2cbd6f88453e2b08b} 格格你好棒 # 参考【CTF-Crypto】格密码基础（例题较多，非常适合入门！）_ctf crypto-CSDN博客\n记$(p+2*r)3a+q=kb+h=\u0026gt;p\u0026rsquo;3a+q\u0026rsquo;=kb$\n从而：\n$$ \\begin{pmatrix} p\u0026rsquo;\u0026amp; -k\\end{pmatrix}\\begin{pmatrix} 1 \u0026amp; 3a \\ 0 \u0026amp; b\\end{pmatrix}=\\begin{pmatrix} p\u0026rsquo; \u0026amp; -q\u0026rsquo;\\end{pmatrix} $$\n根据Hermite定理：\n这里的矩阵\nn=2 det(L)=1*b=2384473327543107262477269141248562917518395867365960655318142892515553817531439357316940290934095375085624218120779709239118821966188906173260307431682367028597612973683887401344727494920856592020970209197406324257478251502340099862501536622889923455273016634520507179507645734423860654584092233709560055803703801064153206431244982586989154685048854436858839309457140702847482240801158808592615931654823643778920270174913454238149949865979522520566288822366419746 n^(1/2)*det(L)^(1/n)=2384473327543107262477269141248562917518395867365960655318142892515553817531439357316940290934095375085624218120779709239118821966188906173260307431682367028597612973683887401344727494920856592020970209197406324257478251502340099862501536622889923455273016634520507179507645734423860654584092233709560055803703801064153206431244982586989154685048854436858839309457140702847482240801158808592615931654823643778920270174913454238149949865979522520566288822366419746~1536bits |(p\u0026#39;,q\u0026#39;)|~~512bits 满足定理，可以通过LLL算法直接计算p\u0026rsquo;,q'\nL = Matrix(ZZ,[[1,3*a], [0,b]]) p,q = L.LLL()[0] # 这里的 [0] 是取其中的最小向量 p,q = abs(p),abs(q) 然后对p=p\u0026rsquo;-2*r,q=q\u0026rsquo;+h进行爆破求解\nfor r in tqdm(range(2**8,2**9)): for h in range(70): pp = p - 2*r qq = q + h phi = (pp-1)*(qq-1) if gcd(phi,65537) != 1: continue m = power_mod(c,inverse_mod(65537,phi),pp*qq) if b\u0026#39;flag\u0026#39; in long_to_bytes(m): print(r,h) print(pp,qq) print(long_to_bytes(m)) exit(0) #b\u0026#39;flag{u_are_@_master_of_latt1ce_Crypt0gr@phy}\u0026#39; 学以致用 # 这里主要是求解三个多项式：\n$$ f_1=x^3-c_1 $$\n$$ f_2=y^3-c_2 $$\n$$ f_3=(x+y+bytes_to_long(gift))^3-c_3 $$\n参考论文LNCS 1070 - Low-Exponent RSA with Related Messages中的\n通过groebner_basis()来确定一个合适的方程组（注意$pad[:len(pad) // 2] + b\u0026quot;\u0026quot; + msg + b\u0026quot;\u0026quot; + pad[len(pad) // 2:]$加*的flag\nfrom sage.all import * from Crypto.Util.number import long_to_bytes, bytes_to_long n = 17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447 c1 = 8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573 c2 = 14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878 c3 = 8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600 gift = b\u0026#39;GoOd_byE_nEw_5t@r\u0026#39; x, y = PolynomialRing(Zmod(n), \u0026#39;x, y\u0026#39;).gens() f1 = x**3 - c1 f2 = y**3 - c2 f3 = (x + y + bytes_to_long(gift))**3 - c3 gb = Ideal(f1, f2, f3).groebner_basis() f1, f2 = gb flag1 = int(-f1.coefficients()[1]) flag2 = int(-f2.coefficients()[1]) print((long_to_bytes(flag1)).split(b\u0026#39;*\u0026#39;)[2]+(long_to_bytes(flag2).split(b\u0026#39;*\u0026#39;)[1])) #b\u0026#39;flag{W1Sh_you_Bec0me_an_excelL3nt_crypt0G2@pher}\u0026#39; ","externalUrl":null,"permalink":"/post/newstarctf2024-crypto/","section":"文章","summary":"\u003ch2 class=\"relative group\"\u003e没e也能玩 \n    \u003cdiv id=\"%E6%B2%A1e%E4%B9%9F%E8%83%BD%E7%8E%A9\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B2%A1e%E4%B9%9F%E8%83%BD%E7%8E%A9\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e看到e=65537，直接算即可。\u003c/p\u003e","title":"NewStarCTF-crypto","type":"post"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Credentials # 凯撒加密\n题目给了两个txt文件，是对应的用户名和密码，搜索\u0026quot;osman\u0026quot;\n在337行\n观察估计为凯撒加密\na=\u0026#39;ZJPB{e6g180g9f302g8d8gddg1i2174d0e212}\u0026#39; b=\u0026#39;WGMY\u0026#39; for i in range(len(b)): print(ord(a[i])-ord(b[i])) #3 #3 #3 #-23 key为3\na=\u0026#39;ZJPB{e6g180g9f302g8d8gddg1i2174d0e212}\u0026#39; result=\u0026#39;\u0026#39; for i in range(len(a)): #如果a[i]不是字母，则跳过 if a[i] == \u0026#39;{\u0026#39; or a[i] == \u0026#39;}\u0026#39;or a[i] in [\u0026#39;0\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;3\u0026#39;,\u0026#39;4\u0026#39;,\u0026#39;5\u0026#39;,\u0026#39;6\u0026#39;,\u0026#39;7\u0026#39;,\u0026#39;8\u0026#39;,\u0026#39;9\u0026#39;]: result+=a[i] elif i\u0026lt;=3: result+=chr((ord(a[i])-3-ord(\u0026#39;A\u0026#39;))%26+ord(\u0026#39;A\u0026#39;)) else: result+=chr((ord(a[i])-3-ord(\u0026#39;a\u0026#39;))%26+ord(\u0026#39;a\u0026#39;)) print(result) #WGMY{b6d180d9c302d8a8daad1f2174a0b212} Rick\u0026rsquo;S Algorithm # 选择明/密文攻击\n选择明文，这里选择m（经过bytes_to_long）\nm = bytes_to_long(input(\u0026#34;Enter message to encrypt: \u0026#34;).encode()) print(f\u0026#34;Encrypted message: {pow(m, e, n)}\u0026#34;) 按照如下代码，尝试a=2,3,5,7,11\nfrom Crypto.Util.number import * i=0 a=int(input()) while True: try: print(f\u0026#39;n={a**i}\u0026#39;,long_to_bytes(a**i).decode()) except: input() i+=1 input() 找到：y，91，Tab键，Q可以分别得到m: 121，14641，9，81进而得到n\nneat=[] for i in [11**2,11**4,3**2,3**4]: print(i,long_to_bytes(i).decode()) ci=input() neat.append(int(ci)) print(i,neat) print(f\u0026#39;n={gcd(neat[0]*neat[0]-neat[1],neat[2]*neat[2]-neat[3]}\u0026#39;) #n=23750662897943044717175208576889923418123814293261675694379399511836708302928348734616799700113876123168314104376819267846868289072129675407081950436117746482866518541271980849300353051896569694317888832234462547742027546264027402777582788448248456184659060492279252722161625016174649270663116193015358806398303961106686993119808751242929118970845796565461108079399270550247929311029605002187933925040866884668814051696085538529640765930259359778768370074447256725601078446612982624876166667981996405956819291233930096523600870793415640957604430835584036953593471023884858264565713090998625976702312109959127714343793 选择密文：\nn=23750662897943044717175208576889923418123814293261675694379399511836708302928348734616799700113876123168314104376819267846868289072129675407081950436117746482866518541271980849300353051896569694317888832234462547742027546264027402777582788448248456184659060492279252722161625016174649270663116193015358806398303961106686993119808751242929118970845796565461108079399270550247929311029605002187933925040866884668814051696085538529640765930259359778768370074447256725601078446612982624876166667981996405956819291233930096523600870793415640957604430835584036953593471023884858264565713090998625976702312109959127714343793 e=0x557 c=8974327056212784056826723474683356995836303156943067014910453575409893794378658203355240262004665632725435494659595810347710319576261835202676647398596937623726591648481521698399632004297235936076507609816599038886020582287774923458460364659563815405705138448107134966795359142728750068576193521489696086194809089948868437965757321657467136037396308710749892527582667842268092048294455486107448715091119156943207263511286667320046615431714424470713026470504991505245045975662605080982602631461930116240918901019175431167058479034903304695736449956091406135978264421891075716081637061280410850542240036204864530576264 def get_M(): X = getPrime(5) Y = (c * (X ** e)) % n print(f\u0026#39;Y = {Y}\u0026#39;)#Y作为选择的密文 Z = int(input()) i = 0 while True: M = (n * i + Z) // X if b\u0026#39;{\u0026#39; in long_to_bytes(M): print(long_to_bytes(M)) break get_M() #wgmy{ce7a475ff0e122e6ac34c3765449f71d} ","externalUrl":null,"permalink":"/post/wargamesmyctf2024-crypto/","section":"文章","summary":"\u003ch1 class=\"relative group\"\u003eCredentials \n    \u003cdiv id=\"credentials\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#credentials\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e凯撒加密\u003c/strong\u003e\u003c/p\u003e","title":"wargames.MY CTF 2024-crypto","type":"post"},{"content":" 1.安装wsl # 网上教程挺多的，随便搜一下就有，就不赘述了\n我选用的是微软商店搜到的第一个Ubuntu，其他的也都可以\n2.安装anaconda # 网上搜索anaconda下载linux版（miniconda也可以）Download Now | Anaconda\n在我的电脑输入\\\\wsl$或者直接进入ubuntu的文件夹（如果有）\n把刚才下载好的文件，如Anaconda3-2024.10-1-Linux-x86_64.sh复制过去，进行安装\nbash Anaconda3-2024.10-1-Linux-x86_64.sh 后边基本上yes和回车即可\n可以用conda info检测一下是否安装到位\n3.创建sagemath虚拟环境 # 这里前边我下载的anaconda带的是3.12的python环境，安装的时候看自己的版本情况\nconda config --add channels conda-forge conda create -n sage sage python=3.12 一段时间后会有这个界面\n这就装好了\n4.vscode远程连接wsl # 安装插件wsl\n然后连接ubuntu\n创建一个文件夹用与存放sage文件然后打开\n安装SageMath Enhanced插件\n然后就可以运行了，写个test测试一下\n注意：\n启动点击小三角运行会有command not found，这是因为sage环境没有激活，使用：\nconda activate sage (先点击小三角，到新生成的终端内再激活)\n到此就可以了\n5.优化 # 1.安装库可以用\nconda install -n sage [package] 2.每次运行后都会有一个py文件，可以再写一个脚本（sage文件）删一下，如：清除py文件.sage\nimport os import glob def delete_specific_files(directory, file_extension): pattern = os.path.join(directory, f\u0026#39;*{file_extension}\u0026#39;) files_to_delete = glob.glob(pattern) for file_path in files_to_delete: try: os.remove(file_path) print(f\u0026#34;文件 {file_path} 已成功删除。\u0026#34;) except Exception as e: print(f\u0026#34;删除文件 {file_path} 时发生错误: {e}\u0026#34;) directory_to_search = \u0026#39;\u0026#39; file_extension_to_delete = \u0026#39;.py\u0026#39; delete_specific_files(directory_to_search, file_extension_to_delete) 3.可以在~/.bashrc文件末尾加一行\nconda activate sage 达到默认启动虚拟环境的效果，不用再激活环境\n","externalUrl":null,"permalink":"/post/wsl-vscode-sagemath%E6%95%99%E7%A8%8B/","section":"文章","summary":"\u003ch1 class=\"relative group\"\u003e1.安装wsl \n    \u003cdiv id=\"1%E5%AE%89%E8%A3%85wsl\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1%E5%AE%89%E8%A3%85wsl\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e网上教程挺多的，随便搜一下就有，就不赘述了\u003c/p\u003e","title":"wsl+vscode+sagemath教程","type":"post"},{"content":" Nanxer 一个Crypto玩家of it4keth2ee\n","externalUrl":null,"permalink":"/author/","section":"欢迎来到 Nanxer's blog! 🎉","summary":"\u003cstyle\u003e\n  .box{\n      width: 800px;\n      height: auto;\n      float: left;\n  \n      border-left: 5px solid #72ffb7;\n      background: #00000050;\n      color: #fff;\n      box-shadow: 0 5px 10px #00000030;\n      transition: all .5s;\n      margin: 10px;\n  \n  \t  .content{\n  \t  \tmargin: 30px;\n      }\n   }  \n  \n   .box:hover{\n    box-shadow: 0 5px 10px #ffffff;\n  }\n\u003c/style\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ch2 class=\"content\"\u003eNanxer\u003c/h2\u003e\n  \u003cp class=\"content\"\u003e一个Crypto玩家of it4keth2ee\u003c/p\u003e","title":"关于我","type":"page"},{"content":" variable-precision SWAR 算法（汉明重量）强网杯_2024_21_steps # 统计一个位数组中非0二进制位的数量。在数学上被称为“计算汉明重量（Hamming Weight)”，目前已知效率最好的通用算法为variable-precision SWAR 算法\n网上常见32bits的variable-precision SWAR算法求汉明重量\n//计算32位二进制的汉明重量 uint32_t swar(uint32_t i) { i = (i \u0026amp; 0x55555555) + ((i \u0026gt;\u0026gt; 1) \u0026amp; 0x55555555); i = (i \u0026amp; 0x33333333) + ((i \u0026gt;\u0026gt; 2) \u0026amp; 0x33333333); i = (i \u0026amp; 0x0F0F0F0F) + ((i \u0026gt;\u0026gt; 4) \u0026amp; 0x0F0F0F0F); i = (i * (0x01010101) \u0026gt;\u0026gt; 24); return i; } 其本质如图：\n第一次是计算数量，后面每一次位移都是在将之前的数量进行加和。\n那么对于本题的长度，可以有：\nB = A \u0026gt;\u0026gt; 1 B = B \u0026amp; 0x55555555555555555555555555555555 A = A \u0026amp; 0x55555555555555555555555555555555 A =A + B B = A \u0026gt;\u0026gt; 2 B = B \u0026amp; 0x33333333333333333333333333333333 A = A \u0026amp; 0x33333333333333333333333333333333 A = A + B B = A \u0026gt;\u0026gt; 4 B = B \u0026amp; 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f A = A \u0026amp; 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f A = A + B B = A \u0026gt;\u0026gt; 8 B = B \u0026amp; 0x00ff00ff00ff00ff00ff00ff00ff00ff A = A \u0026amp; 0x00ff00ff00ff00ff00ff00ff00ff00ff A = A + B B = A \u0026gt;\u0026gt; 16 B = B \u0026amp; 0x0000ffff0000ffff0000ffff0000ffff A = A \u0026amp; 0x0000ffff0000ffff0000ffff0000ffff A = A + B B = A \u0026gt;\u0026gt; 32 B = B \u0026amp; 0x00000000ffffffff00000000ffffffff A = A \u0026amp; 0x00000000ffffffff00000000ffffffff A = A + B B = A \u0026gt;\u0026gt; 64 B = B \u0026amp; 0x0000000000000000ffffffffffffffff A = A \u0026amp; 0x0000000000000000ffffffffffffffff A = A + B 这是种准确的算法，但是呢，本题要求21步，现在有28步，那么就得再审视一下算法过程了。\n这种移位加和，真正有用的是每一步的最后几位承载着1的数量的地方，那么前边的就不起作用。\n对于128bits，汉明重量最多128=2^7，那么8位足矣，就是说，当步骤进行到长度足以容纳8位时，就不用再进行位移了。\n举个例子(16bits=2^4)：\nA=0b0111010111001010#初始值 B=B\u0026gt;\u0026gt;1 =0b0011101011100101 B=B\u0026amp;0b0101010101010101 =0b0001000001000101 A=A\u0026amp;0b0101010101010101 =0b0101010101000000 A=A+B =0b0110010110000101 B=A\u0026gt;\u0026gt;2 =0b0001100101100001 B=B\u0026amp;0b0011001100110011 =0b0001000100100001 A=A\u0026amp;0b0011001100110011 =0b0010000100000001 A=A+B =0b0011001000100010 B=A\u0026gt;\u0026gt;4 =0b0000001100100010 B=B\u0026amp;0b0000111100001111 =0b0000001100000010 A=A\u0026amp;0b0000111100001111 =0b0000001000000010 A=A+B =0b0000010100000100 B=A\u0026gt;\u0026gt;8 =0b0000000000000101 B=B\u0026amp;0b0000000011111111 =0b0000000000000101#到这里以后，A和B“与”的值对AB的关键值就没有影响了 A=A\u0026amp;0b0000000011111111 =0b0000000000000100 A=A+B =0b0000000000001001=9 所以可以稍微省略一下\nB=B\u0026gt;\u0026gt;1 =0b0011101011100101 B=B\u0026amp;0b0101010101010101 =0b0001000001000101 A=A\u0026amp;0b0101010101010101 =0b0101010101000000 A=A+B =0b0110010110000101 B=A\u0026gt;\u0026gt;2 =0b0001100101100001 B=B\u0026amp;0b0011001100110011 =0b0001000100100001 A=A\u0026amp;0b0011001100110011 =0b0010000100000001 A=A+B =0b0011001000100010 B=A\u0026gt;\u0026gt;4 =0b0000001100100010 B=B\u0026amp;0b0000111100001111 =0b0000001100000010 A=A\u0026amp;0b0000111100001111 =0b0000001000000010 A=A+B =0b0000010100000100 B=A\u0026gt;\u0026gt;8 =0b0000000000000101 A=A+B =0b0000010100001001 A=A\u0026amp;0b11111 =0b0000000000001001=9 会发现，只要最后5位就够了（使用“与”来获取后5位），即使A中还有前边的10100000000，也不会干扰最终结果。\n那么对于128bits，可以：\nB = A \u0026gt;\u0026gt; 1 B = B \u0026amp; 0x55555555555555555555555555555555 A = A \u0026amp; 0x55555555555555555555555555555555 A = A + B B = A \u0026gt;\u0026gt; 2 B = B \u0026amp; 0x33333333333333333333333333333333 A = A \u0026amp; 0x33333333333333333333333333333333 A = A + B B = A \u0026gt;\u0026gt; 4 B = B \u0026amp; 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f A = A \u0026amp; 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f A = A + B B = A \u0026gt;\u0026gt; 8 A = A + B B = A \u0026gt;\u0026gt; 16 A = A + B B = A \u0026gt;\u0026gt; 32 A = A + B B = A \u0026gt;\u0026gt; 64 A = A + B A = A \u0026amp; 0b11111111 ","externalUrl":null,"permalink":"/post/hanming-weight/","section":"文章","summary":"\u003ch2 class=\"relative group\"\u003evariable-precision SWAR 算法（汉明重量）强网杯_2024_21_steps \n    \u003cdiv id=\"variable-precision-swar-%E7%AE%97%E6%B3%95%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E5%BC%BA%E7%BD%91%E6%9D%AF_2024_21_steps\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#variable-precision-swar-%E7%AE%97%E6%B3%95%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E5%BC%BA%E7%BD%91%E6%9D%AF_2024_21_steps\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e统计一个位数组中非0二进制位的数量\u003c/strong\u003e。在数学上被称为“计算汉明重量（Hamming Weight)”，目前已知效率最好的通用算法为variable-precision SWAR 算法\u003c/p\u003e","title":"汉明重量（qwb2024_21steps）","type":"post"},{"content":" 1.图片数据载入 # 为便于处理，我使用的是ppm格式的图片。其内容符合：\n第一行：Type //这里我采用P3格式 第二行：Width Height 第三行：Max_colord 第四行以后：RGB的data 对其直接用ifstream进行读取并储存至ImageData中：\n// 读取数据 int*** Read_File_Data(const string filename, int\u0026amp; Height, int\u0026amp; Width) { ifstream readfile(filename); if (!readfile) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Unable to open file!\u0026#34; \u0026lt;\u0026lt; endl; return nullptr; } string type; int maxColor; readfile \u0026gt;\u0026gt; type \u0026gt;\u0026gt; Width \u0026gt;\u0026gt; Height \u0026gt;\u0026gt; maxColor; if (Height \u0026lt;= 0 || Width \u0026lt;= 0) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Invalid Height or Width!\u0026#34; \u0026lt;\u0026lt; endl; return nullptr; } //初始化数据表 int*** ImageData = new int** [Height]; for (int i = 0; i \u0026lt; Height; i++) { ImageData[i] = new int* [Width]; for (int j = 0; j \u0026lt; Width; j++) ImageData[i][j] = new int[3]; } //读数据 for (int i = 0; i \u0026lt; Height; i++) for (int j = 0; j \u0026lt; Width; j++) readfile \u0026gt;\u0026gt; ImageData[i][j][0] \u0026gt;\u0026gt; ImageData[i][j][1] \u0026gt;\u0026gt; ImageData[i][j][2]; readfile.close(); return ImageData; } 2.四叉树构建与图像分割 # 构建QuadTree类，包含有 变量：\nint x, y, w, h; //四叉树的位置和大小 double ColorAverage, EColor; //均值和方差 bool Divided; //是否分割 QuadTree* topLeft; QuadTree* topRight; QuadTree* bottomLeft; QuadTree* bottomRight; 函数：\nQuadTree(int x, int y, int w, int h, int*** ImageData, int Width, int Height)； ~QuadTree()； void Divide(int*** ImageData, int Width, int Height, double key)；//判断是否分割到要求阈值范围 void MeanBlur(int*** ImageData, int Width, int Height)； 3.模糊模糊 # 3.1均值模糊 # 用四叉树区域内的平均RGB值替代该区域所有的RGB值实现模糊。\nint l = w * h; int* RGB = new int[3] {0, 0, 0}; for (int i = y; i \u0026lt; y + h; i++) { for (int j = x; j \u0026lt; x + w; j++) { for (int k = 0; k \u0026lt; 3; k++) { RGB[k] += ImageData[i][j][k]; } } } for (int k = 0; k \u0026lt; 3; k++) RGB[k] /= l; for (int i = y; i \u0026lt; (y + h); i++) { for (int j = x; j \u0026lt; (x + w); j++) { for (int k = 0; k \u0026lt; 3; k++) { ImageData[i][j][k] = RGB[k]; } } } 3.2高斯模糊 # 参考：高斯模糊(高斯滤波)原理以及计算过程_高斯滤波公式-CSDN博客 利用二维的正态分布来确定权重系数(先分布，再归一)：\n$$ G(x,y)=\\frac{1}{2\\pi\\sigma^2}e^{-\\frac{x^2+y^2}{2\\sigma^2}} $$\n即可以用以下代码创建高斯内核：\n//创建高斯内核 double sum = 0.0; int halfSize = kernelSize / 2; for (int i = -halfSize; i \u0026lt;= halfSize; i++) { for (int j = -halfSize; j \u0026lt;= halfSize; j++) { kernel[i + halfSize][j + halfSize] = exp(-(i * i + j * j) / (2.0 * sigma * sigma)) / (2.0 * PI * sigma * sigma); sum += kernel[i + halfSize][j + halfSize]; } } //归一化 for (int i = 0; i \u0026lt; kernelSize; i++) { for (int j = 0; j \u0026lt; kernelSize; j++) { kernel[i][j] /= sum; } } // 创建新的图像数据 int*** newImageData = new int** [Height]; for (int i = 0; i \u0026lt; Height; i++) { newImageData[i] = new int* [Width]; for (int j = 0; j \u0026lt; Width; j++) { newImageData[i][j] = new int[3]; } } // 进行模糊 for (int i = 0; i \u0026lt; Height; i++) for (int j = 0; j \u0026lt; Width; j++) for (int k = 0; k \u0026lt; 3; k++){ double blurredPixel = 0.0; for (int x = -halfSize; x \u0026lt;= halfSize; x++) { for (int y = -halfSize; y \u0026lt;= halfSize; y++) { int neighborX = j + x; int neighborY = i + y; if (neighborX \u0026gt;= 0 \u0026amp;\u0026amp; neighborX \u0026lt; Width \u0026amp;\u0026amp; neighborY \u0026gt;= 0 \u0026amp;\u0026amp; neighborY \u0026lt; Height) { blurredPixel += ImageData[neighborY][neighborX][k] * kernel[x + halfSize][y + halfSize]; } } } newImageData[i][j][k] = (int)(blurredPixel); } for (int i = 0; i \u0026lt; Height; i++) { for (int j = 0; j \u0026lt; Width; j++) { for (int k = 0; k \u0026lt; 3; k++) { ImageData[i][j][k] = newImageData[i][j][k]; } } } 4.图片数据输出 # 与步骤1逻辑相同，这里改用ofstream：\n// 输出数据 void Out_File_Data(const string filename, int*** ImageData, int height, int width) { ofstream outputFile(filename); if (!outputFile) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Unable to open output file!\u0026#34; \u0026lt;\u0026lt; endl; return; } outputFile \u0026lt;\u0026lt; \u0026#34;P3\u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; width \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; height \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;255\u0026#34; \u0026lt;\u0026lt; endl; for (int i = 0; i \u0026lt; height; i++) { for (int j = 0; j \u0026lt; width; j++) outputFile \u0026lt;\u0026lt; ImageData[i][j][0] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; ImageData[i][j][1] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; ImageData[i][j][2] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; outputFile \u0026lt;\u0026lt; endl; } outputFile.close(); } 5.效果展示 # 5.1终端 # 请输入文件路径(不包含双引号)：D:\\MyBags\\大学\\数据结构与算法\\大作业\\四叉树图像模糊\\test.ppm 文件读取中。。。。。。 均值模糊?[y/n]: y //----------------------------均值模糊-------------------------------// 请输入阈值：10 高斯模糊?[y/n]: y //----------------------------高斯模糊-------------------------------// 输入高斯模糊程度(大于1):5 //----------------------------处理完成-------------------------------// //-------------------------------------------------------------------// 5.2模糊 # 原图片：\n5.2.1均值模糊 # 阈值为10\n阈值为20\n5.2.2高斯模糊 # 模糊程度为5\n模糊程度为10\n6.完整代码 # main.cpp # #include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026#34;QuadTree.h\u0026#34; #include \u0026#34;FileReadAndOut.h\u0026#34; #include \u0026#34;Gaussian.h\u0026#34; int main() { int height, width; double key; string filename; char Choice = \u0026#39;Y\u0026#39;; // 定义变量 cout \u0026lt;\u0026lt; \u0026#34;请输入文件路径(不包含双引号)：\u0026#34;; cin \u0026gt;\u0026gt; filename; cout \u0026lt;\u0026lt; \u0026#34;文件读取中。。。。。。\u0026#34; \u0026lt;\u0026lt; endl; int*** ImageData = Read_File_Data(filename, height, width); if (!ImageData)return -1; // 读取文件数据 int*** ImageDataGauss = Read_File_Data(filename, height, width); if (!ImageData)return -1; // 读取文件数据 cout \u0026lt;\u0026lt; \u0026#34;均值模糊?[y/n]:\\t\u0026#34;; cin \u0026gt;\u0026gt; Choice; if (Choice == \u0026#39;Y\u0026#39; || Choice == \u0026#39;y\u0026#39;){ cout \u0026lt;\u0026lt; \u0026#34;//----------------------------均值模糊-------------------------------//\u0026#34; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;请输入阈值：\u0026#34;; cin \u0026gt;\u0026gt; key; QuadTree tree(0, 0, width, height,ImageData, height, width); // 建立四叉树 tree.Divide(ImageData, height, width, key); // 四叉树分割 tree.MeanBlur(ImageData, height, width); // 均值模糊处理 Out_File_Data(filename+\u0026#34;_MeanBlur.ppm\u0026#34;, ImageData, height, width); // 输出文件数据 } cout \u0026lt;\u0026lt; \u0026#34;高斯模糊?[y/n]:\\t\u0026#34;; cin \u0026gt;\u0026gt; Choice; if (Choice == \u0026#39;Y\u0026#39; || Choice == \u0026#39;y\u0026#39;) { cout \u0026lt;\u0026lt; \u0026#34;//----------------------------高斯模糊-------------------------------//\u0026#34; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;输入高斯模糊程度(大于1):\u0026#34;; cin \u0026gt;\u0026gt; key; GaussianBlur(ImageDataGauss, height, width, key); // 高斯模糊处理 Out_File_Data(filename + \u0026#34;_GaussianBlur.ppm\u0026#34;, ImageDataGauss, height, width); // 输出文件数据 } cout \u0026lt;\u0026lt; \u0026#34;//----------------------------处理完成-------------------------------//\u0026#34; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;//-------------------------------------------------------------------//\u0026#34; \u0026lt;\u0026lt; endl; Delete_Data(ImageData, height, width); // 释放内存 return 0; } QuadTree.h # #pragma once #include \u0026lt;vector\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; class QuadTree { private: int x, y, w, h; //四叉树的位置和大小 double ColorAverage, EColor; //均值和方差 bool Divided; //是否分割 QuadTree* topLeft; QuadTree* topRight; QuadTree* bottomLeft; QuadTree* bottomRight; public: QuadTree(int x, int y, int w, int h, int*** ImageData, int Width, int Height) : x(x), y(y), w(w), h(h), ColorAverage(0), EColor(0), Divided(false), topLeft(nullptr), topRight(nullptr), bottomLeft(nullptr), bottomRight(nullptr) { int l = w * h; vector\u0026lt;double\u0026gt; colord(l); double sum = 0.0; for (int i = y; i \u0026lt; (y + h); i++) { for (int j = x; j \u0026lt; (x + w); j++) { colord[(i - y) * w + (j - x)] = sqrt((pow(ImageData[i][j][0], 2) + pow(ImageData[i][j][1], 2) + pow(ImageData[i][j][2], 2)) / 3); sum += colord[(i - y) * w + (j - x)]; } } ColorAverage = sum / l; for (int i = 0; i \u0026lt; l; i++) EColor += pow(colord[i] - ColorAverage, 2); EColor = sqrt(EColor / l); } ~QuadTree() { delete topLeft; delete topRight; delete bottomLeft; delete bottomRight; } void Divide(int*** ImageData, int Width, int Height, double key) { if ((w == 1 \u0026amp;\u0026amp; h == 1) || (EColor \u0026lt;= key)) return; Divided = true; int newW = w / 2; int newH = h / 2; topLeft = new QuadTree(x, y, newW, newH, ImageData, Width, Height); topRight = new QuadTree(x + newW, y, newW, newH, ImageData, Width, Height); bottomLeft = new QuadTree(x, y + newH, newW, newH, ImageData, Width, Height); bottomRight = new QuadTree(x + newW, y + newH, newW, newH, ImageData, Width, Height); topLeft-\u0026gt;Divide(ImageData, Width, Height, key); topRight-\u0026gt;Divide(ImageData, Width, Height, key); bottomLeft-\u0026gt;Divide(ImageData, Width, Height, key); bottomRight-\u0026gt;Divide(ImageData, Width, Height, key); } void MeanBlur(int*** ImageData, int Width, int Height) { if (Divided) { topLeft-\u0026gt;MeanBlur(ImageData, Width, Height); topRight-\u0026gt;MeanBlur(ImageData, Width, Height); bottomLeft-\u0026gt;MeanBlur(ImageData, Width, Height); bottomRight-\u0026gt;MeanBlur(ImageData, Width, Height); } else { int l = w * h; int* RGB = new int[3] {0, 0, 0}; for (int i = y; i \u0026lt; y + h; i++) { for (int j = x; j \u0026lt; x + w; j++) { for (int k = 0; k \u0026lt; 3; k++) { RGB[k] += ImageData[i][j][k]; } } } for (int k = 0; k \u0026lt; 3; k++) RGB[k] /= l; for (int i = y; i \u0026lt; (y + h); i++) { for (int j = x; j \u0026lt; (x + w); j++) { for (int k = 0; k \u0026lt; 3; k++) { ImageData[i][j][k] = RGB[k]; } } } } } }; FileReadAndOut.h # #pragma once // 读取数据 int*** Read_File_Data(const string filename, int\u0026amp; Height, int\u0026amp; Width) { ifstream readfile(filename); if (!readfile) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Unable to open file!\u0026#34; \u0026lt;\u0026lt; endl; return nullptr; } string type; int maxColor; readfile \u0026gt;\u0026gt; type \u0026gt;\u0026gt; Width \u0026gt;\u0026gt; Height \u0026gt;\u0026gt; maxColor; if (Height \u0026lt;= 0 || Width \u0026lt;= 0) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Invalid Height or Width!\u0026#34; \u0026lt;\u0026lt; endl; return nullptr; } //初始化数据表 int*** ImageData = new int** [Height]; for (int i = 0; i \u0026lt; Height; i++) { ImageData[i] = new int* [Width]; for (int j = 0; j \u0026lt; Width; j++) ImageData[i][j] = new int[3]; } //读数据 for (int i = 0; i \u0026lt; Height; i++) for (int j = 0; j \u0026lt; Width; j++) readfile \u0026gt;\u0026gt; ImageData[i][j][0] \u0026gt;\u0026gt; ImageData[i][j][1] \u0026gt;\u0026gt; ImageData[i][j][2]; readfile.close(); return ImageData; } // 输出数据 void Out_File_Data(const string filename, int*** ImageData, int height, int width) { ofstream outputFile(filename); if (!outputFile) { cerr \u0026lt;\u0026lt; \u0026#34;Error: Unable to open output file!\u0026#34; \u0026lt;\u0026lt; endl; return; } outputFile \u0026lt;\u0026lt; \u0026#34;P3\u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; width \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; height \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;255\u0026#34; \u0026lt;\u0026lt; endl; for (int i = 0; i \u0026lt; height; i++) { for (int j = 0; j \u0026lt; width; j++) outputFile \u0026lt;\u0026lt; ImageData[i][j][0] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; ImageData[i][j][1] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; ImageData[i][j][2] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; outputFile \u0026lt;\u0026lt; endl; } outputFile.close(); } //释放空间 void Delete_Data(int*** ImageData, int height, int width) { for (int i = 0; i \u0026lt; height; i++) { for (int j = 0; j \u0026lt; width; j++) delete[] ImageData[i][j]; delete[] ImageData[i]; } delete[] ImageData; } Gaussian.h # #pragma once #include \u0026lt;vector\u0026gt; #define PI 3.14159265358979323846 void GaussianBlur(int*** ImageData, int Width, int Height, int blurLevel) { if (blurLevel \u0026lt; 1) blurLevel = 1; // 确保模糊程度至少为 1 const int kernelSize = 2 * blurLevel + 1; // 内核大小为 (2 * blurLevel + 1)：1为中心，blurlevel为半径 const double sigma = static_cast\u0026lt;double\u0026gt;(blurLevel); // 根据模糊程度设置 sigma std::vector\u0026lt;std::vector\u0026lt;double\u0026gt;\u0026gt; kernel(kernelSize, std::vector\u0026lt;double\u0026gt;(kernelSize)); //创建高斯内核 double sum = 0.0; int halfSize = kernelSize / 2; for (int i = -halfSize; i \u0026lt;= halfSize; i++) { for (int j = -halfSize; j \u0026lt;= halfSize; j++) { kernel[i + halfSize][j + halfSize] = exp(-(i * i + j * j) / (2.0 * sigma * sigma)) / (2.0 * PI * sigma * sigma); sum += kernel[i + halfSize][j + halfSize]; } } //归一 for (int i = 0; i \u0026lt; kernelSize; i++) { for (int j = 0; j \u0026lt; kernelSize; j++) { kernel[i][j] /= sum; } } // 创建新的图像数据 int*** newImageData = new int** [Height]; for (int i = 0; i \u0026lt; Height; i++) { newImageData[i] = new int* [Width]; for (int j = 0; j \u0026lt; Width; j++) { newImageData[i][j] = new int[3]; } } // 进行模糊 for (int i = 0; i \u0026lt; Height; i++) for (int j = 0; j \u0026lt; Width; j++) for (int k = 0; k \u0026lt; 3; k++){ double blurredPixel = 0.0; for (int x = -halfSize; x \u0026lt;= halfSize; x++) { for (int y = -halfSize; y \u0026lt;= halfSize; y++) { int neighborX = j + x; int neighborY = i + y; if (neighborX \u0026gt;= 0 \u0026amp;\u0026amp; neighborX \u0026lt; Width \u0026amp;\u0026amp; neighborY \u0026gt;= 0 \u0026amp;\u0026amp; neighborY \u0026lt; Height) { blurredPixel += ImageData[neighborY][neighborX][k] * kernel[x + halfSize][y + halfSize]; } } } newImageData[i][j][k] = (int)(blurredPixel); } for (int i = 0; i \u0026lt; Height; i++) { for (int j = 0; j \u0026lt; Width; j++) { for (int k = 0; k \u0026lt; 3; k++) { ImageData[i][j][k] = newImageData[i][j][k]; } } } for (int i = 0; i \u0026lt; Height; i++) { for (int j = 0; j \u0026lt; Width; j++) delete[] newImageData[i][j]; delete[] newImageData[i]; } delete[] newImageData; } ","externalUrl":null,"permalink":"/post/%E5%9B%9B%E5%8F%89%E6%A0%91%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/","section":"文章","summary":"\u003ch1 class=\"relative group\"\u003e1.图片数据载入 \n    \u003cdiv id=\"1%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E8%BD%BD%E5%85%A5\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E8%BD%BD%E5%85%A5\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e为便于处理，我使用的是ppm格式的图片。其内容符合：\u003c/p\u003e","title":"四叉树图像模糊","type":"post"},{"content":" 代码分析 # 核心思路 # 为每个医生建立一个病人队列，当有病人到达后，先将病人入一医生的病人队列，再将此医生加入模拟队列，其他仿照课本模拟银行。\n结构 # 病人结构 # // 病人结构体 struct Patient { int ArrivalTime; // 到达时间 int realArrivalTime; // 真实到达时间 int DepartureTime; // 离开时间=ArrivalTime+WaitTime+NeedTime int WaitTime; // 等待时间 int preWaitTime; // 之前的等待时间 int NeedTime; // 治疗时间 int PatientID; // 病人ID int danger; // 危险等级,0:normal,1:low int event; // 事件类型,0:arrival,1:departure int priority; // 优先级,event为0时，比较ArrivalTime+WaitTime，event为1时，比较DepartureTime 用于优先级队列的比较 }; 医生结构 # // 医生结构体 struct Doctor { int TotalPatientsNum; // 该医生总共处理病人数 int TotalTimeService; // 该医生总共服务时间 int DoctorID; // 医生ID int nowPatient; // 当前处理的病人ID int Pnum; //当前排队的病人数 int* PQueue; //排队病人队列 }; 模拟结构 # // 仿真结构体 struct Simulation { Patient* Patients; //病人数组 Doctor* Doctors; //医生数组 int SimulationTime; //模拟时间 int DoctorNum; //医生数量 int patientNum; //病人数量 int maxWaitTime; //最大等待时间 int pnummax; //手动排队病人最大数量 int Dnum; //当前工作医生人次 int* DQueue; //医生队列 int nowtime; //当前时间 int arrivalLow, arrivalHigh; //到达时间范围 int serviceLow, serviceHigh; //服务时间范围 }; 控制条件 # //*********Tools**********// bool GreenWindow = false; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = false; //是否手动输入 //*********Tools**********// 操作功能 # void initPatient(Patient\u0026amp; p, int AT, int NT,int PID, intD);//病人初始化 void initDoctor(Doctor\u0026amp; d, int DID);//医生初始化 int findDoctor(Simulation s, int danger,int nowtime);//寻找合适的医生 void inPQueue(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p);//病人入医生的队 int findPatient(Simulation s, Doctor\u0026amp; d);//找到优先级最前的病人 void inDQueue(Simulation\u0026amp; s, Doctor d);//医生入模拟的队 int outDQueue(Simulation\u0026amp; s);//医生出模拟的队 void curePatient(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p);//病人治疗完成 int gettime(Simulation s); //随机下一个到达时间间隔 int getneedtime(Simulation s);//随机治疗时间 bool isDQueueEmpty(Simulation s);//判医生队列空 void initSimulation(Simulation\u0026amp; s);//初始化仿真 void runSimulation(Simulation\u0026amp; s);//运行仿真 void printResult(Simulation s);//打印仿真结果 void curenextPatient(Simulation\u0026amp; s, Doctor\u0026amp; d);//预治疗下一个病人 void maxdelWaitTime(Simulation\u0026amp; s);//处理最大等待时间 模拟结果 # 示例数据 # 控制条件：\n//*********Tools**********// bool GreenWindow = false; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = false; //是否手动输入 //*********Tools**********// 结果：\nEnter the simulation time in minutes: 10 Enter the number of doctors: 2 Enter the range of arrival times in minutes: 5 5 Enter the range of service times in minutes: 6 6 ********Simulation Begin********** Time:0 Patient #1 arrives(Normal) Time:5 Patient #2 arrives(Normal) Time:6 Patient #1 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 6 Time:11 Patient #2 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 6 ********Simulation Summary******** Simulation of 11 minutes. Numbers of Patients:2 Average Patient Wait:0.00 minutes Doctor #1 Working 60.00% Doctor #2 Working 50.00% 任务一 # 问题一 # 模拟设定：绿色通道伤员可以在普通窗口和绿色通道窗口排队等候\n无绿色窗口 # 控制条件：\n//*********Tools**********// bool GreenWindow = false; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = true; //是否手动输入 //*********Tools**********// 结果：\nEnter the simulation time in minutes: 10 Enter the number of doctors: 2 Enter the range of arrival times in minutes: 4 4 Enter the range of service times in minutes: 5 5 总人数：3 ********Simulation Begin********** 输入#1的到达时间和紧急状况（0-普通，1-紧急）：0 0 Time:0 Patient #1 arrives(Normal) 输入#2的到达时间和紧急状况（0-普通，1-紧急）：4 1 Time:4 Patient #2 arrives(Danger) 输入#3的到达时间和紧急状况（0-普通，1-紧急）：8 0 Time:8 Patient #3 arrives(Normal) Time:5 Patient #1 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 5 Time:9 Patient #2 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 5 Time:13 Patient #3 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 5 ********Simulation Summary******** Simulation of 13 minutes. Numbers of Patients:3 Average Patient Wait:0.00 minutes Doctor #1 Working 70.00% Doctor #2 Working 50.00% 有绿色窗口 # 控制条件：\n//*********Tools**********// bool GreenWindow = true; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = true; //是否手动输入 //*********Tools**********// 结果：\nEnter the simulation time in minutes: 10 Enter the number of doctors: 2 Enter the range of arrival times in minutes: 4 4 Enter the range of service times in minutes: 3 3 总人数：3 ********Simulation Begin********** 输入#1的到达时间和紧急状况（0-普通，1-紧急）：0 0 Time:0 Patient #1 arrives(Normal) 输入#2的到达时间和紧急状况（0-普通，1-紧急）：4 1 Time:4 Patient #2 arrives(Danger) 输入#3的到达时间和紧急状况（0-普通，1-紧急）：8 0 Time:8 Patient #3 arrives(Normal) Time:3 Patient #1 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 3 Time:7 Patient #2 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 3 Time:11 Patient #3 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 3 ********Simulation Summary******** Simulation of 11 minutes. Numbers of Patients:3 Average Patient Wait:0.00 minutes Doctor #1 Working 30.00% Doctor #2 Working 50.00% 问题二 # 模拟设定：绿色通道伤员可以在绿色通道窗口排队等候，或者在普通窗口队列中插队。\n控制条件：\n//*********Tools**********// bool GreenWindow = true; //是否启用绿色窗口 bool Chadui = true; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = true; //是否手动输入 //*********Tools**********// 结果：\nEnter the simulation time in minutes: 10 Enter the number of doctors: 2 Enter the range of arrival times in minutes: 1 1 Enter the range of service times in minutes: 5 5 总人数：4 ********Simulation Begin********** 输入#1的到达时间和紧急状况（0-普通，1-紧急）：0 0 Time:0 Patient #1 arrives(Normal) 输入#2的到达时间和紧急状况（0-普通，1-紧急）：2 1 Time:2 Patient #2 arrives(Danger) 输入#3的到达时间和紧急状况（0-普通，1-紧急）：3 0 Time:3 Patient #3 arrives(Normal) 输入#4的到达时间和紧急状况（0-普通，1-紧急）：4 1 Time:4 Patient #4 arrives(Danger) Time:5 Patient #1 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 5 Time:7 Patient #2 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 5 Time:10 Patient #4 departs CuredbyDoctor #2;WaitTime: 1 CureCostTime: 5 Time:15 Patient #3 departs CuredbyDoctor #2;WaitTime: 7 CureCostTime: 5 ********Simulation Summary******** Simulation of 15 minutes. Numbers of Patients:4 Average Patient Wait:2.00 minutes Doctor #1 Working 50.00% Doctor #2 Working 100.00% 任务二 # 模拟设定：如果等待时间已到达最长等待时间，将优先救治等待时间长的绿色通道伤员，等待时间满的绿色通道伤员，可以更换窗口救治。\n控制条件：\n//*********Tools**********// bool GreenWindow = false; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = true; //是否有最大等待时间 bool handle = true; //是否手动输入 //*********Tools**********// 结果：\nEnter the simulation time in minutes: 10 Enter the number of doctors: 2 Enter the range of arrival times in minutes: 1 1 Enter the range of service times in minutes: 7 7 Enter the longest waiting time: 4 总人数：4 ********Simulation Begin********** 输入#1的到达时间和紧急状况（0-普通，1-紧急）：0 1 Time:0 Patient #1 arrives(Danger) 输入#2的到达时间和紧急状况（0-普通，1-紧急）：1 0 Time:1 Patient #2 arrives(Normal) 输入#3的到达时间和紧急状况（0-普通，1-紧急）：2 0 Time:2 Patient #3 arrives(Normal) 输入#4的到达时间和紧急状况（0-普通，1-紧急）：3 1 Time:3 Patient #4 arrives(Danger) Time:7 Patient #1 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 7 紧急病人#4达到最大等待时间 紧急病人#4达到最大等待时间 Time:8 Patient #2 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 7 Time:14 Patient #3 departs CuredbyDoctor #1;WaitTime: 5 CureCostTime: 7 Time:21 Patient #4 departs CuredbyDoctor #1;WaitTime: 11 CureCostTime: 7 ********Simulation Summary******** Simulation of 21 minutes. Numbers of Patients:4 Average Patient Wait:4.00 minutes Doctor #1 Working 100.00% Doctor #2 Working 70.00% 任务三 # 策略：有绿色窗口，当等待时间一定时可以插队\n理由：野战医院与普通医院不同在于这是以救命为主的，而是让紧急病人得到最大保障更为重要，所以一定要设置绿色窗口，还得插队。但考虑到普通病人，只在紧急病人等待时间上限时再开始插队\n控制条件：\n//*********Tools**********// bool GreenWindow = true; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = true; //是否有最大等待时间 bool handle = true; //是否手动输入 //*********Tools**********// 等待时间上限为12mins：\nEnter the simulation time in minutes: 50 Enter the number of doctors: 4 Enter the range of arrival times in minutes: 1 1 Enter the range of service times in minutes: 10 10 Enter the longest waiting time: 12 总人数：23 ********Simulation Begin********** 输入#1的到达时间和紧急状况（0-普通，1-紧急）：2 0 Time:2 Patient #1 arrives(Normal) 输入#2的到达时间和紧急状况（0-普通，1-紧急）：3 0 Time:3 Patient #2 arrives(Normal) 输入#3的到达时间和紧急状况（0-普通，1-紧急）：4 0 Time:4 Patient #3 arrives(Normal) 输入#4的到达时间和紧急状况（0-普通，1-紧急）：5 0 Time:5 Patient #4 arrives(Normal) 输入#5的到达时间和紧急状况（0-普通，1-紧急）：12 1 Time:12 Patient #5 arrives(Danger) Time:12 Patient #1 departs CuredbyDoctor #2;WaitTime: 0 CureCostTime: 10 输入#6的到达时间和紧急状况（0-普通，1-紧急）：14 1 Time:14 Patient #6 arrives(Danger) 输入#7的到达时间和紧急状况（0-普通，1-紧急）：16 1 Time:16 Patient #7 arrives(Danger) 输入#8的到达时间和紧急状况（0-普通，1-紧急）：18 1 Time:18 Patient #8 arrives(Danger) Time:13 Patient #2 departs CuredbyDoctor #3;WaitTime: 0 CureCostTime: 10 输入#9的到达时间和紧急状况（0-普通，1-紧急）：20 1 Time:20 Patient #9 arrives(Danger) 输入#10的到达时间和紧急状况（0-普通，1-紧急）：22 0 Time:22 Patient #10 arrives(Normal) Time:14 Patient #3 departs CuredbyDoctor #4;WaitTime: 0 CureCostTime: 10 输入#11的到达时间和紧急状况（0-普通，1-紧急）：24 1 Time:24 Patient #11 arrives(Danger) 输入#12的到达时间和紧急状况（0-普通，1-紧急）：16 0 Time:16 Patient #12 arrives(Normal) Time:22 Patient #5 departs CuredbyDoctor #1;WaitTime: 0 CureCostTime: 10 输入#13的到达时间和紧急状况（0-普通，1-紧急）：28 1 Time:28 Patient #13 arrives(Danger) Time:22 Patient #4 departs CuredbyDoctor #2;WaitTime: 7 CureCostTime: 10 输入#14的到达时间和紧急状况（0-普通，1-紧急）：30 0 Time:30 Patient #14 arrives(Normal) 输入#15的到达时间和紧急状况（0-普通，1-紧急）：32 0 Time:32 Patient #15 arrives(Normal) 输入#16的到达时间和紧急状况（0-普通，1-紧急）：33 0 Time:33 Patient #16 arrives(Normal) Time:28 Patient #8 departs CuredbyDoctor #3;WaitTime: 0 CureCostTime: 10 输入#17的到达时间和紧急状况（0-普通，1-紧急）：34 1 Time:34 Patient #17 arrives(Danger) 输入#18的到达时间和紧急状况（0-普通，1-紧急）：35 0 Time:35 Patient #18 arrives(Normal) Time:32 Patient #10 departs CuredbyDoctor #4;WaitTime: 0 CureCostTime: 10 输入#19的到达时间和紧急状况（0-普通，1-紧急）：36 0 Time:36 Patient #19 arrives(Normal) 输入#20的到达时间和紧急状况（0-普通，1-紧急）：37 1 Time:37 Patient #20 arrives(Danger) Time:32 Patient #7 departs CuredbyDoctor #2;WaitTime: 6 CureCostTime: 10 输入#21的到达时间和紧急状况（0-普通，1-紧急）：42 0 Time:42 Patient #21 arrives(Normal) 输入#22的到达时间和紧急状况（0-普通，1-紧急）：45 0 Time:45 Patient #22 arrives(Normal) Time:32 Patient #6 departs CuredbyDoctor #1;WaitTime: 8 CureCostTime: 10 输入#23的到达时间和紧急状况（0-普通，1-紧急）：48 1 Time:48 Patient #23 arrives(Danger) Time:33 Patient #9 departs CuredbyDoctor #3;WaitTime: 3 CureCostTime: 10 Time:34 Patient #11 departs CuredbyDoctor #4;WaitTime: 0 CureCostTime: 10 Time:42 Patient #12 departs CuredbyDoctor #2;WaitTime: 16 CureCostTime: 10 Time:42 Patient #13 departs CuredbyDoctor #1;WaitTime: 4 CureCostTime: 10 紧急病人#20达到最大等待时间 Time:48 Patient #15 departs CuredbyDoctor #3;WaitTime: 6 CureCostTime: 10 Time:52 Patient #16 departs CuredbyDoctor #4;WaitTime: 9 CureCostTime: 10 Time:52 Patient #14 departs CuredbyDoctor #2;WaitTime: 12 CureCostTime: 10 Time:52 Patient #17 departs CuredbyDoctor #1;WaitTime: 8 CureCostTime: 10 Time:53 Patient #18 departs CuredbyDoctor #3;WaitTime: 8 CureCostTime: 10 Time:54 Patient #19 departs CuredbyDoctor #4;WaitTime: 8 CureCostTime: 10 Time:62 Patient #21 departs CuredbyDoctor #2;WaitTime: 10 CureCostTime: 10 Time:62 Patient #23 departs CuredbyDoctor #1;WaitTime: 4 CureCostTime: 10 Time:72 Patient #22 departs CuredbyDoctor #2;WaitTime: 17 CureCostTime: 10 Time:72 Patient #20 departs CuredbyDoctor #1;WaitTime: 25 CureCostTime: 10 ********Simulation Summary******** Simulation of 72 minutes. Numbers of Patients:23 Average Patient Wait:6.57 minutes Doctor #1 Working 76.00% Doctor #2 Working 96.00% Doctor #3 Working 94.00% Doctor #4 Working 88.00% 结果汇总 # 医生窗口|繁忙度|条件 示例 2.2.1.1 2.2.1.2 2.2.2 2.3 2.4 1 60% 70% 30% 50% 100% 76% 2 50% 50% 50% 100% 70% 96% 3 \\ \\ \\ \\ \\ 94% 4 \\ \\ \\ \\ \\ 88% 模拟总时长 11 13 11 15 21 72 平均等待时间 0 0 0 2 4 6.57 完整代码 # main.cpp # #include \u0026#34;simulation.h\u0026#34; // 主函数 int main() { Simulation sim; runSimulation(sim); return 0; } members.h # #pragma once // 病人结构体 struct Patient { int ArrivalTime; // 到达时间 int realArrivalTime; // 真实到达时间 int DepartureTime; // 离开时间=ArrivalTime+WaitTime+NeedTime int WaitTime; // 等待时间 int preWaitTime; // 之前的等待时间 int NeedTime; // 治疗时间 int PatientID; // 病人ID int danger; // 危险等级,0:normal,1:low int event; // 事件类型,0:arrival,1:departure int priority; // 优先级,event为0时，比较ArrivalTime+WaitTime，event为1时，比较DepartureTime 用于优先级队列的比较 }; // 医生结构体 struct Doctor { int TotalPatientsNum; // 该医生总共处理病人数 int TotalTimeService; // 该医生总共服务时间 int DoctorID; // 医生ID int nowPatient; // 当前处理的病人ID int Pnum; //当前排队的病人数 int* PQueue; //排队病人队列 }; // 仿真结构体 struct Simulation { Patient* Patients; //病人数组 Doctor* Doctors; //医生数组 int SimulationTime; //模拟时间 int DoctorNum; //医生数量 int patientNum; //病人数量 int maxWaitTime; //最大等待时间 int pnummax; //手动排队病人最大数量 int Dnum; //当前工作医生人次 int* DQueue; //医生队列 int nowtime; //当前时间 int arrivalLow, arrivalHigh; //到达时间范围 int serviceLow, serviceHigh; //服务时间范围 }; simulation.h # #pragma once #include \u0026lt;random\u0026gt; // 随机数生成器 #include \u0026lt;stdio.h\u0026gt; // 输入输出 #include \u0026lt;iostream\u0026gt; // 输入输出 #include \u0026#34;members.h\u0026#34; #define MAX_NUM 1000 using namespace std; //*********Tools**********// bool GreenWindow = false; //是否启用绿色窗口 bool Chadui = false; //是否开启插队功能 bool WaitMax = false; //是否有最大等待时间 bool handle = false; //是否手动输入 //*********Tools**********// void initPatient(Patient\u0026amp; p, int AT, int NT, int PID, int D); //病人初始化 void initDoctor(Doctor\u0026amp; d, int DID); //医生初始化 int findDoctor(Simulation s, int danger, int nowtime); //寻找合适的医生 void inPQueue(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p); //病人入医生的队 int findPatient(Simulation s, Doctor\u0026amp; d); //找到优先级最前的病人 void inDQueue(Simulation\u0026amp; s, Doctor d); //医生入模拟的队 int outDQueue(Simulation\u0026amp; s); //医生出模拟的队 void curePatient(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p); //病人治疗完成 int gettime(Simulation s); //随机下一个到达时间间隔 int getneedtime(Simulation s); //随机治疗时间 bool isDQueueEmpty(Simulation s); //判医生队列空 void initSimulation(Simulation\u0026amp; s); //初始化仿真 void runSimulation(Simulation\u0026amp; s); //运行仿真 void printResult(Simulation s); //打印仿真结果 void curenextPatient(Simulation\u0026amp; s, Doctor\u0026amp; d); //预治疗下一个病人 void maxdelWaitTime(Simulation\u0026amp; s); //处理最大等待时间 //病人初始化 void initPatient(Patient\u0026amp; p, int AT, int NT, int PID, int D) { p.ArrivalTime = AT; p.realArrivalTime = AT; p.NeedTime = NT; p.PatientID = PID; p.danger = D; p.priority = MAX_NUM; p.DepartureTime = 0; p.WaitTime = 0; p.preWaitTime = 0; p.event = 0; } //医生初始化 void initDoctor(Doctor\u0026amp; d, int DID) { d.DoctorID = DID; d.TotalPatientsNum = 0; d.TotalTimeService = 0; d.nowPatient = -1; d.Pnum = 0; d.PQueue = new int[MAX_NUM]; } //随机下一个到达时间 int gettime(Simulation s) { return (int)(rand() % (s.arrivalHigh - s.arrivalLow + 1) + s.arrivalLow); } //随机治疗时间 int getneedtime(Simulation s) { return (int)(rand() % (s.serviceHigh - s.serviceLow + 1) + s.serviceLow); } //判医生队列空 bool isDQueueEmpty(Simulation s) { return s.Dnum == 0; } //医生入队 void inDQueue(Simulation\u0026amp; s, Doctor d) { s.Dnum++; s.DQueue[s.Dnum] = d.DoctorID; } //打印结果 void printResult(Simulation s) { int totalTime = 0;//总时长为最晚离开的时间 for (int i = 1; i \u0026lt;= s.patientNum; i++) { if (s.Patients[i].DepartureTime \u0026gt; totalTime) { totalTime = s.Patients[i].DepartureTime; } } int totalPatients = s.patientNum;//总病人数 int timewait = 0;//通过病人得到总等待时间 for (int i = 1; i \u0026lt;= totalPatients; i++) { timewait += s.Patients[i].WaitTime; } printf(\u0026#34;\\n********Simulation Summary********\\n\u0026#34;); printf(\u0026#34;Simulation of %d minutes.\u0026#34;, totalTime); printf(\u0026#34;\\tNumbers of Patients:%d\\n\u0026#34;, totalPatients); printf(\u0026#34;\\tAverage Patient Wait:\u0026#34;); double avgWait = (totalPatients \u0026gt; 0) ? ((double)timewait / totalPatients) : 0.0; printf(\u0026#34;%.2f minutes\\n\u0026#34;, avgWait); for (int i = 1; i \u0026lt;= s.DoctorNum; i++) { printf(\u0026#34;\\tDoctor #%d\\tWorking %.2f%%\\n\u0026#34;, i, (((double)(s.Doctors[i].TotalTimeService) / s.SimulationTime) * 100.0)); } } //医生出队 int outDQueue(Simulation\u0026amp; s) { int dindex = 1; int minindex = MAX_NUM; for (int i = 1; i \u0026lt;= s.Dnum; i++) { if (s.Patients[s.Doctors[s.DQueue[i]].nowPatient].priority \u0026lt; minindex) { minindex = s.Patients[s.Doctors[s.DQueue[i]].nowPatient].priority; dindex = i; } } int dID = s.Doctors[s.DQueue[dindex]].DoctorID;//转换为医生ID for (int i = dindex; i \u0026lt; s.Dnum; i++) { s.DQueue[i] = s.DQueue[i + 1]; } s.Dnum--; return dID;//ID索引 } //病人入队 void inPQueue(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p) { if (d.nowPatient != -1) { Patient p1 = s.Patients[d.nowPatient]; p.WaitTime = p1.ArrivalTime + p1.WaitTime + p1.NeedTime - p.ArrivalTime; p.priority = p.ArrivalTime + p.WaitTime; d.Pnum++; d.PQueue[d.Pnum] = p.PatientID; } else { p.WaitTime = 0; p.priority = p.ArrivalTime + p.WaitTime; d.nowPatient = p.PatientID; } } //病人治疗完成 void curePatient(Simulation\u0026amp; s, Doctor\u0026amp; d, Patient\u0026amp; p) { p.WaitTime = p.WaitTime \u0026gt;= 0 ? p.WaitTime : 0; p.DepartureTime = p.ArrivalTime + p.WaitTime + p.NeedTime; p.event = 1; p.priority = p.DepartureTime; d.TotalPatientsNum++; int deltatime = p.NeedTime - (p.DepartureTime \u0026gt; s.SimulationTime ? p.DepartureTime - s.SimulationTime : 0); d.TotalTimeService += deltatime \u0026gt;= 0 ? deltatime : 0; } //治疗完成,下一病人 void curenextPatient(Simulation\u0026amp; s, Doctor\u0026amp; d) { int pindex = findPatient(s, d); if (pindex == -1) { d.nowPatient = -1; } else { d.nowPatient = s.Patients[d.PQueue[pindex]].PatientID; for (int i = pindex; i \u0026lt; d.Pnum; i++) { d.PQueue[i] = d.PQueue[i + 1]; } d.Pnum--; for (int i = 1; i \u0026lt;= d.Pnum; i++) {//队的后续人员都要等待该病人治疗完成 s.Patients[d.PQueue[i]].WaitTime += s.Patients[d.PQueue[pindex]].NeedTime; } } } //初始化仿真 void initSimulation(Simulation\u0026amp; s) { s.nowtime = 0; s.patientNum = 1; s.pnummax = MAX_NUM; printf(\u0026#34;Enter the simulation time in minutes: \u0026#34;); scanf_s(\u0026#34;%d\u0026#34;, \u0026amp;s.SimulationTime); printf(\u0026#34;Enter the number of doctors: \u0026#34;); scanf_s(\u0026#34;%d\u0026#34;, \u0026amp;s.DoctorNum); printf(\u0026#34;Enter the range of arrival times in minutes: \u0026#34;); scanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;s.arrivalLow, \u0026amp;s.arrivalHigh); printf(\u0026#34;Enter the range of service times in minutes: \u0026#34;); scanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;s.serviceLow, \u0026amp;s.serviceHigh); if (WaitMax) { printf(\u0026#34;Enter the longest waiting time: \u0026#34;); scanf_s(\u0026#34;%d\u0026#34;, \u0026amp;s.maxWaitTime); } if (handle) { printf(\u0026#34;总人数：\u0026#34;); scanf_s(\u0026#34;%d\u0026#34;, \u0026amp;s.pnummax); } printf(\u0026#34;\\n********Simulation Begin**********\\n\u0026#34;); s.Patients = new Patient[MAX_NUM]; s.Doctors = new Doctor[s.DoctorNum + 1]; for (int j = 1; j \u0026lt;= s.DoctorNum; j++) { initDoctor(s.Doctors[j], j); } s.Dnum = 0; s.DQueue = new int[MAX_NUM]; int danger = rand() % 2; if (handle) { printf(\u0026#34;输入#1的到达时间和紧急状况（0-普通，1-紧急）：\u0026#34;); scanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;s.nowtime, \u0026amp;danger); } initPatient(s.Patients[s.patientNum], s.nowtime, getneedtime(s), s.patientNum, danger); printf(\u0026#34;Time:%d Patient #%d arrives(%s)\\n\u0026#34;, s.nowtime, s.patientNum, (danger == 1) ? \u0026#34;Danger\u0026#34; : \u0026#34;Normal\u0026#34;); int dindex = findDoctor(s, danger, s.nowtime); inPQueue(s, s.Doctors[dindex], s.Patients[s.patientNum]); inDQueue(s, s.Doctors[dindex]); } //运行仿真 void runSimulation(Simulation\u0026amp; s) { srand((unsigned int)time(NULL)); initSimulation(s); while (!isDQueueEmpty(s)) { int dindex = outDQueue(s); int pindex = s.Patients[s.Doctors[dindex].nowPatient].PatientID; s.nowtime += gettime(s); if (s.nowtime \u0026lt; s.SimulationTime \u0026amp;\u0026amp; s.patientNum + 1 \u0026lt;= s.pnummax) {//添加下一位病人 s.patientNum++; int danger = rand() % 2; if (handle) { printf(\u0026#34;输入#%d的到达时间和紧急状况（0-普通，1-紧急）：\u0026#34;, s.patientNum); scanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;s.nowtime, \u0026amp;danger); } initPatient(s.Patients[s.patientNum], s.nowtime, getneedtime(s), s.patientNum, danger); printf(\u0026#34;Time:%d Patient #%d arrives(%s)\\n\u0026#34;, s.nowtime, s.patientNum, (danger == 1) ? \u0026#34;Danger\u0026#34; : \u0026#34;Normal\u0026#34;); int newdindex = findDoctor(s, danger, s.nowtime); inPQueue(s, s.Doctors[newdindex], s.Patients[s.patientNum]); inDQueue(s, s.Doctors[newdindex]); } if (s.Patients[pindex].event == 0) { //处理当前病人 curePatient(s, s.Doctors[dindex], s.Patients[pindex]); inDQueue(s, s.Doctors[dindex]); } else { curenextPatient(s, s.Doctors[dindex]); printf(\u0026#34;Time:%d Patient #%d departs\\n\u0026#34;, s.Patients[pindex].DepartureTime, s.Patients[pindex].PatientID); if (s.Patients[pindex].realArrivalTime != s.Patients[pindex].ArrivalTime) { s.Patients[pindex].WaitTime += s.Patients[pindex].preWaitTime; } printf(\u0026#34;\\tCuredbyDoctor #%d;WaitTime: %d CureCostTime: %d\\n\u0026#34;, s.Doctors[dindex].DoctorID, s.Patients[pindex].WaitTime, s.Patients[pindex].NeedTime); } if (WaitMax) { maxdelWaitTime(s); } } printResult(s); } //寻找医生 int findDoctor(Simulation s, int danger, int nowtime) { int index = 0; int min = MAX_NUM; if (GreenWindow) { if (danger == 1) { if (Chadui) {//绿色且插队 index = 1; //如果绿色窗口的医生空闲，选择绿色窗口的医生 if (s.Doctors[1].nowPatient == -1) { index = 1; } //如果绿色窗口的医生有病人，选择插队时间最短的医生 for (int i = 1; i \u0026lt;= s.DoctorNum; i++) { if (s.Doctors[i].nowPatient != -1) {//是否有治疗中病人 Patient p = s.Patients[s.Doctors[i].nowPatient]; if (p.ArrivalTime + p.WaitTime + p.NeedTime - nowtime \u0026lt; min) { min = p.ArrivalTime + p.WaitTime + p.NeedTime - nowtime; index = i; } } else { min = 0; index = i; break; } } } else {//绿色且不能插队的时候选择排队人数最少的医生 index = 1; for (int i = 1; i \u0026lt;= s.DoctorNum; i++) { int key = s.Doctors[i].nowPatient == -1 ? s.Doctors[i].Pnum : s.Doctors[i].Pnum + 1; if (key \u0026lt; min) { min = key; index = i; } } } } //绿色窗口但是普通病人，选择人数最少的普通窗口的医生 else { index = 2; for (int i = 2; i \u0026lt;= s.DoctorNum; i++) { int key = s.Doctors[i].nowPatient == -1 ? s.Doctors[i].Pnum : s.Doctors[i].Pnum + 1; if (key \u0026lt; min) { min = key; index = i; } } } } else {//没有绿色窗口时 index = 1; for (int i = 1; i \u0026lt;= s.DoctorNum; i++) { int key = s.Doctors[i].nowPatient == -1 ? s.Doctors[i].Pnum : s.Doctors[i].Pnum + 1;//医生的病人数量 if (key \u0026lt; min) { min = key; index = i; } } } return index; }; //找到单个医生的队列里优先级最前的病人 int findPatient(Simulation s, Doctor\u0026amp; d) { int index = -1; int min = MAX_NUM; for (int i = 1; i \u0026lt;= d.Pnum; i++) { if ((Chadui || WaitMax) \u0026amp;\u0026amp; s.Patients[d.PQueue[i]].danger == 1) {//允许插队或者优先治疗+紧急病人 index = i; break; } if (s.Patients[d.PQueue[i]].priority \u0026lt; min) { min = s.Patients[d.PQueue[i]].priority; index = i; } } return index;//队列索引 } //等待时间最长 void maxdelWaitTime(Simulation\u0026amp; s) { for (int i = 1; i \u0026lt;= s.Dnum; i++) { for (int j = 1; j \u0026lt;= s.Doctors[s.DQueue[i]].Pnum; j++) { if (s.Patients[s.Doctors[s.DQueue[i]].PQueue[j]].danger == 1 and s.Patients[s.Doctors[s.DQueue[i]].PQueue[j]].WaitTime \u0026gt; s.maxWaitTime) {//紧急病人达到最大等待时间 int pindex = s.Doctors[s.DQueue[i]].PQueue[j]; //删除此病人在原医生队列中的位置 for (int k = j; k \u0026lt; s.Doctors[s.DQueue[i]].Pnum; k++) { s.Doctors[s.DQueue[i]].PQueue[k] = s.Doctors[s.DQueue[i]].PQueue[k + 1]; } s.Doctors[s.DQueue[i]].Pnum--; //删除医生队列的原医生 for (int k = i; k \u0026lt; s.Dnum; k++) { s.DQueue[k] = s.DQueue[k + 1]; } s.Dnum--; //更新病人的信息 s.Patients[pindex].preWaitTime += s.Patients[pindex].WaitTime; s.Patients[pindex].WaitTime = 0; s.Patients[pindex].ArrivalTime = s.Patients[pindex].realArrivalTime + s.Patients[pindex].preWaitTime; int dindex = findDoctor(s, s.Patients[pindex].danger, s.Patients[pindex].ArrivalTime); printf(\u0026#34;\\t紧急病人#%d达到最大等待时间\\n\u0026#34;, s.Patients[pindex].PatientID); inPQueue(s, s.Doctors[dindex], s.Patients[pindex]); inDQueue(s, s.Doctors[dindex]); } } } } ","externalUrl":null,"permalink":"/post/%E9%87%8E%E6%88%98%E5%8C%BB%E9%99%A2%E6%A8%A1%E6%8B%9F/","section":"文章","summary":"\u003ch1 class=\"relative group\"\u003e代码分析 \n    \u003cdiv id=\"%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e核心思路 \n    \u003cdiv id=\"%E6%A0%B8%E5%BF%83%E6%80%9D%E8%B7%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E8%B7%AF\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e为每个医生建立一个病人队列，当有病人到达后，先将病人入一医生的病人队列，再将此医生加入模拟队列，其他仿照课本模拟银行。\u003c/p\u003e","title":"野战医院模拟","type":"post"},{"content":" 朋友 # Xiao Jing Somebird 推荐 # Kimi Hello-ctf NSSCTF 西电CTF终端 ","externalUrl":null,"permalink":"/link/","section":"欢迎来到 Nanxer's blog! 🎉","summary":"\u003cstyle\u003e\n.card {\n  width: 800px;\n  height: 120px;\n\n  .column {\n      width: 45%;\n      height: 120px;\n      float: left;\n      border-left: 5px solid #72ffb7;\n      background: #00000080;\n      color: #fff;\n      box-shadow: 0 5px 10px #00000050;\n      transition: all .5s;\n      margin: 10px;\n   }\n\n  .column:hover{\n    border-left-width: 15px;\n    box-shadow: 0 5px 10px #ffffff;\n    transform: translateY(-5px);\n  }\n}\n\n .img {\n      border-radius: 50%; \n      width: 100px;\n      height: 100px;\n      float: left; \n      margin: 10px;\n      transition: all 5s;\n      border: 2px solid #fff;\n  }\n\u003c/style\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e朋友 \n    \u003cdiv id=\"%E6%9C%8B%E5%8F%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%9C%8B%E5%8F%8B\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003chr\u003e\n\u003cdiv class=\"card\"\u003e\n\u003ca href=\"https://xiaojing.netlify.app\"\u003e\n  \u003cdiv class=\"column\"\u003e\n      \u003cimg src=\"xiaojing.jpg\" class=\"img\"\u003e\u003c/img\u003e\n      \u003ch2\u003e\n          Xiao Jing\n    \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca href=\"https://Somebird.github.io\"\u003e\n  \u003cdiv class=\"column\"\u003e\n        \u003cimg src=\"Somebird.jpg\" class=\"img\"\u003e\u003c/img\u003e\n        \u003ch2\u003e\n        Somebird\n        \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003c/div\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e推荐 \n    \u003cdiv id=\"%E6%8E%A8%E8%8D%90\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%8E%A8%E8%8D%90\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003chr\u003e\n\u003cdiv class=\"card\"\u003e\n\u003ca href=\"https://kimi.moonshot.cn/\"\u003e\n  \u003cdiv class=\"column\"\u003e\n        \u003cimg src=\"kimi.png\" class=\"img\"\u003e\u003c/img\u003e\n        \u003ch2\u003e\n            Kimi\n        \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca href=\"https://hello-ctf.com/\"\u003e\n  \u003cdiv class=\"column\"\u003e\n        \u003cimg src=\"helloctf.png\" class=\"img\"\u003e\u003c/img\u003e\n        \u003ch2\u003e\n            Hello-ctf\n        \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca href=\"https://www.nssctf.cn/index\"\u003e\n  \u003cdiv class=\"column\"\u003e\n        \u003cimg src=\"nssctf.ico\" class=\"img\"\u003e\u003c/img\u003e\n        \u003ch2\u003e\n            NSSCTF\n        \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca href=\"https://ctf.xidian.edu.cn/\"\u003e\n  \u003cdiv class=\"column\"\u003e\n        \u003cimg src=\"xidian.png\" class=\"img\"\u003e\u003c/img\u003e\n        \u003ch2\u003e\n            西电CTF终端\n        \u003c/h2\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003c/div\u003e","title":"友链","type":"page"},{"content":" 相关知识 # 1.目前支持检查的规则 # 2.使用约束 # 基于教材使用的符号进行了转换，请注意以下与教材符号的对应说明：\n对带量词的公式，需要特别小心：\n3.格式要求 # 所有的符号都是英文半角符号，不支持中文全角符号，如。、，；等 书写证明时的要求：\n第一行： Premise: \u0026lt;要证明的公式的前件\u0026gt;，各前件之间用“,”隔开，如： Premise: ((Exist x)P(x)) -\u0026gt; (All x)((P(x)/Q(x)) -\u0026gt; R(x)), (Exist x)P(x), (Exist x)Q(x)\n第二行： Conclusion：\u0026lt;要证明的结论\u0026gt;，一般只有一个，如： Conclusion: (Exist x)(Exist y)(R(x)/\\R(y))\n答题模版中通常会预先给出第一、二行，无需自己输入。\n此后可空几行或不空行开始编写证明步骤；\n格式 # ae或ei规则示例 # 下图的第6、10、11步\n下图是用于编写证明时，25条规则的简称：\n下面是一个示例：\nPremise: ~B, A-\u0026gt;BConclusion: ~A ~B, A-\u0026gt;B, A |- A prem ~B, A-\u0026gt;B, A |- A-\u0026gt;B prem ~B, A-\u0026gt;B, A |- B imple 1,2 ~B, A-\u0026gt;B, A |- ~B prem ~B, A-\u0026gt;B |- ~A ni 3,4 1.不用导出规则，请证明：⊢(A→(B→C))↔(B→(A→C)) # Premise: Conclusion:(A-\u0026gt;(B-\u0026gt;C))\u0026lt;-\u0026gt;(B-\u0026gt;(A-\u0026gt;C)) 1. A-\u0026gt;(B-\u0026gt;C),B,A |- A prem 2. A-\u0026gt;(B-\u0026gt;C),B,A |- A-\u0026gt;(B-\u0026gt;C) prem 3. A-\u0026gt;(B-\u0026gt;C),B,A |- B-\u0026gt;C imple 1,2 4. A-\u0026gt;(B-\u0026gt;C),B,A |- B prem 5. A-\u0026gt;(B-\u0026gt;C),B,A |- C imple 4,3 6. A-\u0026gt;(B-\u0026gt;C),B |- A-\u0026gt;C impli 5 7. A-\u0026gt;(B-\u0026gt;C) |- B-\u0026gt;(A-\u0026gt;C) impli 6 8. B-\u0026gt;(A-\u0026gt;C),A,B |- B prem 9. B-\u0026gt;(A-\u0026gt;C),A,B |- B-\u0026gt;(A-\u0026gt;C) prem 10. B-\u0026gt;(A-\u0026gt;C),A,B |- A-\u0026gt;C imple 8,9 11. B-\u0026gt;(A-\u0026gt;C),A,B |- A prem 12. B-\u0026gt;(A-\u0026gt;C),A,B |- C imple 11,10 13. B-\u0026gt;(A-\u0026gt;C),A |- B-\u0026gt;C impli 12 14. B-\u0026gt;(A-\u0026gt;C) |- A-\u0026gt;(B-\u0026gt;C) impli 13 15. |- (A-\u0026gt;(B-\u0026gt;C))\u0026lt;-\u0026gt;(B-\u0026gt;(A-\u0026gt;C)) equivi 7,14 2.不用导出规则，请证明：(A∨B)∨C⊢A∨(B∨C) # Premise: (A\\/B)\\/C Conclusion: A\\/(B\\/C) 1. A |- A prem 2. A |- A\\/(B\\/C) ori 1 3. B |- B prem 4. B |- B\\/C ori 3 5. B |- A\\/(B\\/C) ori 4 6. C |- C prem 7. C |- B\\/C ori 6 8. C |- A\\/(B\\/C) ori 7 9. A\\/B |- A\\/(B\\/C) ore 2,5 10. (A\\/B)\\/C |- A\\/(B\\/C) ore 8,9 3.不用导出规则，请证明：A∨(B∨C)⊢(A∨B)∨C # Premise: A\\/(B\\/C) Conclusion: (A\\/B)\\/C 1. C |- C prem 2. C |- (A\\/B)\\/C ori 1 3. B |- B prem 4. B |- A\\/B ori 3 5. B |- (A\\/B)\\/C ori 4 6. A |- A prem 7. A |- A\\/B ori 6 8. A |- (A\\/B)\\/C ori 7 9. B\\/C |- (A\\/B)\\/C ore 2,5 10. A\\/(B\\/C) |- (A\\/B)\\/C ore 8,9 4.不用导出规则，请证明：⊢(A→B)↔(¬B→¬A) # Premise: Conclusion: (A-\u0026gt;B)\u0026lt;-\u0026gt;(~B -\u0026gt; ~A) 1. A-\u0026gt;B,~B,A |- A-\u0026gt;B prem 2. A-\u0026gt;B,~B,A |- A prem 3. A-\u0026gt;B,~B,A |- B imple 1,2 4. A-\u0026gt;B,~B,A |- ~B prem 5. A-\u0026gt;B,~B |- ~A ni 3,4 6. A-\u0026gt;B |- ~B-\u0026gt;~A impli 5 7. ~B-\u0026gt;~A,A,~B |- ~B-\u0026gt;~A prem 8. ~B-\u0026gt;~A,A,~B |- ~B prem 9. ~B-\u0026gt;~A,A,~B |- ~A imple 7,8 10. ~B-\u0026gt;~A,A,~B |- A prem 11. ~B-\u0026gt;~A,A |- ~~B ni 9,10 12. ~B-\u0026gt;~A,A |- B nne 11 13. ~B-\u0026gt;~A |- A-\u0026gt;B impli 12 14. |- (A-\u0026gt;B)\u0026lt;-\u0026gt;(~B-\u0026gt;~A) equivi 6,13 5.不用导出规则，请证明：A∧¬A⊢F # Premise: A/\\~A Conclusion: F 1. A/\\~A |- A/\\~A prem 2. A/\\~A |- A ande 1 3. A/\\~A |- ~A ande 1 4. A/\\~A |- F ne 3,2 6.不用导出规则，请证明：F⊢A∧¬A # Premise: F Conclusion: A/\\~A 1. F |- ~F fi 2. F |- F prem 3. F |- A/\\~A ne 1,2 7.不用导出规则，请证明：A→(B→C)⊢A∧B→C # Premise: A-\u0026gt;(B-\u0026gt;C) Conclusion: A/\\B-\u0026gt;C 1. A-\u0026gt;(B-\u0026gt;C),A/\\B |- A/\\B prem 2. A-\u0026gt;(B-\u0026gt;C),A/\\B |- A ande 1 3. A-\u0026gt;(B-\u0026gt;C),A/\\B |- B ande 1 4. A-\u0026gt;(B-\u0026gt;C),A/\\B |- A-\u0026gt;(B-\u0026gt;C) prem 5. A-\u0026gt;(B-\u0026gt;C),A/\\B |- B-\u0026gt;C imple 2,4 6. A-\u0026gt;(B-\u0026gt;C),A/\\B |- C imple 3,5 7. A-\u0026gt;(B-\u0026gt;C) |- A/\\B-\u0026gt;C impli 6 8.不用导出规则，请证明：A∧B→C⊢A→(B→C) # Premise: A/\\B-\u0026gt;C Conclusion: A-\u0026gt;(B-\u0026gt;C) 1. A/\\B-\u0026gt;C,A,B |- A prem 2. A/\\B-\u0026gt;C,A,B |- B prem 3. A/\\B-\u0026gt;C,A,B |- A/\\B-\u0026gt;C prem 4. A/\\B-\u0026gt;C,A,B |- A/\\B andi 1,2 5. A/\\B-\u0026gt;C,A,B |- C imple 3,4 6. A/\\B-\u0026gt;C,A |- B-\u0026gt;C impli 5 7. A/\\B-\u0026gt;C |- A-\u0026gt;(B-\u0026gt;C) impli 6 9.不用导出规则，请证明：(∀x)P(x)⊢(∃x)P(x) # Premise:(All x)P(x) Conclusion:(Exist x)P(x) 1. (All x)P(x) |- (All x)P(x) prem 2. (All x)P(x) |- P(t) ae 1 (t/x) 3. (All x)P(x) |- (Exist x)P(x) ei 2 (t/x) 10.不用导出规则，请证明：(∃x)(∀y)P(x,y)⊢(∀y)(∃x)P(x,y) # Premise: (Exist x)(All y)P(x,y) Conclusion: (All y)(Exist x)P(x,y) 1. P(x,y) |- P(x,y) prem 2. (All y)P(x,y) |- P(x,y) lai 1 3. (Exist x)(All y)P(x,y) |- (Exist x)P(x,y) eei 2 4. (Exist x)(All y)P(x,y) |- (All y)(Exist x)P(x,y) ai 3 11.不用导出规则，请证明：(∀y)P(x)∨(∀x)Q(x)⊢(∀x)(P(x)∨Q(x)) # Premise: (All x)P(x)\\/(All x)Q(x) Conclusion: (All x)(P(x)\\/Q(x)) 1. P(x) |- P(x) prem 2. P(x) |- P(x)\\/Q(x) ori 1 3. (All x)P(x) |- (All x)(P(x)\\/Q(x)) aai 2 4. Q(x) |- Q(x) prem 5. Q(x) |- P(x)\\/Q(x) ori 4 6. (All x)Q(x) |- (All x)(P(x)\\/Q(x)) aai 5 7. (All x)P(x)\\/(All x)Q(x) |- (All x)(P(x)\\/Q(x)) ore 3,6 12.不用导出规则，请证明：(∀x)(A→P(x))⊢A→(∀y)P(x)，其中x不是A中的自由变元 # Premise: (All x)(A-\u0026gt;P(x)) Conclusion: A-\u0026gt;(All x)P(x) 1. A-\u0026gt;P(x) |- A-\u0026gt;P(x) prem 2. (All x)(A-\u0026gt;P(x)) |- A-\u0026gt;P(x) lai 1 3. (All x)(A-\u0026gt;P(x)),A |- A prem 4. (All x)(A-\u0026gt;P(x)),A |- A-\u0026gt;P(x) premi 2 5. (All x)(A-\u0026gt;P(x)),A |- P(x) imple 4,3 6. (All x)(A-\u0026gt;P(x)),A |- (All x)P(x) ai 5 7. (All x)(A-\u0026gt;P(x)) |- A-\u0026gt;(All x)P(x) impli 6 13.不用导出规则，请证明：A→(∀y)P(x)⊢(∀x)(A→P(x))，其中x不是A中的自由变元 # Premise: A-\u0026gt;(All x)P(x) Conclusion: (All x)(A-\u0026gt;P(x)) 1. A-\u0026gt;(All x)P(x),A |- A prem 2. A-\u0026gt;(All x)P(x),A |- A-\u0026gt;(All x)P(x) prem 3. A-\u0026gt;(All x)P(x),A |- (All x)P(x) imple 1,2 4. A-\u0026gt;(All x)P(x),A |- P(x) ae 3 (x/x) 5. A-\u0026gt;(All x)P(x) |- A-\u0026gt;P(x) impli 4 6. A-\u0026gt;(All x)P(x) |- (All x)(A-\u0026gt;P(x)) ai 5 14.不用导出规则，请证明：(∃x)(P(x)∨Q(x))⊢(∃x)P(x)∨(∃x)Q(x) # Premise: (Exist x)(P(x)\\/Q(x)) Conclusion: (Exist x)P(x)\\/(Exist x)Q(x) 1. P(x) |- P(x) prem 2. P(x) |- (Exist x)P(x) ei 1 (x/x) 3. P(x) |- (Exist x)P(x)\\/(Exist x)Q(x) ori 2 4. Q(x) |- Q(x) prem 5. Q(x) |- (Exist x)Q(x) ei 4 (x/x) 6. Q(x) |- (Exist x)P(x)\\/(Exist x)Q(x) ori 5 7. P(x)\\/Q(x) |- (Exist x)P(x)\\/(Exist x)Q(x) ore 6,3 8. (Exist x)(P(x)\\/Q(x)) |- (Exist x)P(x)\\/(Exist x)Q(x) lei 7 15.不用导出规则，请证明：(∃x)P(x)∨(∃x)Q(x)⊢(∃x)(P(x)∨Q(x)) # Premise: (Exist x)P(x)\\/(Exist x)Q(x) Conclusion: (Exist x)(P(x)\\/Q(x)) 1. P(x) |- P(x) prem 2. P(x) |- P(x)\\/Q(x) ori 1 3. (Exist x)P(x) |- (Exist x)(P(x)\\/Q(x)) eei 2 4. Q(x) |- Q(x) prem 5. Q(x) |- P(x)\\/Q(x) ori 4 6. (Exist x)Q(x) |- (Exist x)(P(x)\\/Q(x)) eei 5 7. (Exist x)P(x)\\/(Exist x)Q(x) |- (Exist x)(P(x)\\/Q(x)) ore 3,6 16.不用导出规则，请证明：(∀x)(P(x)∧Q(x))⊢(∀x)P(x)∧(∀x)Q(x) # Premise: (All x)(P(x)/\\Q(x)) Conclusion: (All x)P(x)/\\(All x)Q(x) 1. P(x)/\\Q(x) |- P(x)/\\Q(x) prem 2. P(x)/\\Q(x) |- P(x) ande 1 3. P(x)/\\Q(x) |- Q(x) ande 1 4. (All x)(P(x)/\\Q(x)) |- (All x)P(x) aai 2 5. (All x)(P(x)/\\Q(x)) |- (All x)Q(x) aai 3 6. (All x)(P(x)/\\Q(x)) |- (All x)P(x)/\\(All x)Q(x) andi 4,5 17.不用导出规则，请证明：(∀x)P(x)∧(∀x)Q(x)⊢(∀x)(P(x)∧Q(x)) # Premise: (All x)P(x)/\\(All x)Q(x) Conclusion: (All x)(P(x)/\\Q(x)) 1. (All x)P(x)/\\(All x)Q(x) |- (All x)P(x)/\\(All x)Q(x) prem 2. (All x)P(x)/\\(All x)Q(x) |- (All x)P(x) ande 1 3. (All x)P(x)/\\(All x)Q(x) |- P(x) ae 2 (x/x) 4. (All x)P(x)/\\(All x)Q(x) |- (All x)Q(x) ande 1 5. (All x)P(x)/\\(All x)Q(x) |- Q(x) ae 4 (x/x) 6. (All x)P(x)/\\(All x)Q(x) |- P(x)/\\Q(x) andi 3,5 7. (All x)P(x)/\\(All x)Q(x) |- (All x)(P(x)/\\Q(x)) ai 6 18.不用导出规则，请证明：(∃x)P(x)→(∀x)Q(x)⊢(∀x)(P(x)→Q(x)) # Premise: (Exist x)P(x)-\u0026gt;(All x)Q(x) Conclusion: (All x)(P(x)-\u0026gt;Q(x)) 1. (Exist x)P(x)-\u0026gt;(All x)Q(x),P(x) |- P(x) prem 2. (Exist x)P(x)-\u0026gt;(All x)Q(x),P(x) |- (Exist x)P(x) ei 1 (x/x) 3. (Exist x)P(x)-\u0026gt;(All x)Q(x),P(x) |- (Exist x)P(x)-\u0026gt;(All x)Q(x) prem 4. (Exist x)P(x)-\u0026gt;(All x)Q(x),P(x) |- (All x)Q(x) imple 2,3 5. (Exist x)P(x)-\u0026gt;(All x)Q(x),P(x) |- Q(x) ae 4 (x/x) 6. (Exist x)P(x)-\u0026gt;(All x)Q(x) |- P(x)-\u0026gt;Q(x) impli 5 7. (Exist x)P(x)-\u0026gt;(All x)Q(x) |- (All x)(P(x)-\u0026gt;Q(x)) ai 6 19.不用导出规则，请证明：(∀x)(P(x)→Q(x))⊢(∀x)P(x)→(∀x)Q(x) # Premise: (All x)(P(x)-\u0026gt;Q(x)) Conclusion: (All x)P(x)-\u0026gt;(All x)Q(x) 1. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- (All x)(P(x)-\u0026gt;Q(x)) prem 2. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- P(x)-\u0026gt;Q(x) ae 1 (x/x) 3. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- (All x)P(x) prem 4. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- P(x) ae 3 (x/x) 5. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- Q(x) imple 4,2 6. (All x)(P(x)-\u0026gt;Q(x)),(All x)P(x) |- (All x)Q(x) ai 5 7. (All x)(P(x)-\u0026gt;Q(x)) |- (All x)P(x)-\u0026gt;(All x)Q(x) impli 6 20.即要用自然推理系统证明：(∀x)(∀y)(R(x,y)−\u0026gt;R(y,x)),(∀x)(∀y)(∀z)(R(x,y)∧R(y,z)→R(x,z)),(∀x)(∃y)R(x,y)⊢(∀x)R(x,x) # Premise: (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) Conclusion: (All x)R(x,x) 1. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) |- (All x)(Exist y)R(x,y) prem 2. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) |- (Exist y)R(x,y) ae 1 (x/x) 3. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- R(x,t) prem 4. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- (All x)(All y)(R(x,y)-\u0026gt;R(y,x)) prem 5. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- (All y)(R(x,y)-\u0026gt;R(y,x)) ae 4 (x/x) 6. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- R(x,t)-\u0026gt;R(t,x) ae 5 (t/y) 7. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- R(t,x) imple 3,6 8. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- R(x,t)/\\R(t,x) andi 3,7 9. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t) |- (Exist y)(R(x,y)/\\R(y,x)) ei 8 (t/y) 10. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) |- (Exist y)(R(x,y)/\\R(y,x)) ee 2,9 11. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- R(x,t)/\\R(t,x) prem 12. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- (All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)) prem 13. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- (All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)) ae 12 (x/x) 14. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- (All z)(R(x,t)/\\R(t,z)-\u0026gt;R(x,z)) ae 13 (t/y) 15. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- R(x,t)/\\R(t,x)-\u0026gt;R(x,x) ae 14 (x/z) 16. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- R(x,t)/\\R(t,x) prem 17. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y),R(x,t)/\\R(t,x) |- R(x,x) imple 15,16 18. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) |- R(x,x) ee 10,17 19. (All x)(All y)(R(x,y)-\u0026gt;R(y,x)),(All x)(All y)(All z)(R(x,y)/\\R(y,z)-\u0026gt;R(x,z)),(All x)(Exist y)R(x,y) |- (All x)R(x,x) ai 18 21.用自然推理系统证明：⊢¬(A∧B)↔¬A∨¬B # Premise: Conclusion: ~(A/\\B)\u0026lt;-\u0026gt;(~A\\/~B) 1. ~A,~(A/\\B) |- ~(A/\\B) prem 2. ~A,A/\\B |- A/\\B prem 3. ~A,A/\\B |- A ande 2 4. ~A,A/\\B |- ~A prem 5. ~A,A/\\B |- ~(A/\\B) ne 3,4 6. ~A |- ~(A/\\B) preme 1,5 7. ~B,~(A/\\B) |- ~(A/\\B) prem 8. ~B,A/\\B |- A/\\B prem 9. ~B,A/\\B |- B ande 8 10. ~B,A/\\B |- ~B prem 11. ~B,A/\\B |- ~(A/\\B) ne 9,10 12. ~B |- ~(A/\\B) preme 7,11 13. ~A\\/~B |- ~(A/\\B) ore 6,12 14. ~(A/\\B),~(~A\\/~B),~A |- ~(~A\\/~B) prem 15. ~(A/\\B),~(~A\\/~B),~A |- ~A prem 16. ~(A/\\B),~(~A\\/~B),~A |- ~A\\/~B ori 15 17. ~(A/\\B),~(~A\\/~B) |- ~~A ni 14,16 18. ~(A/\\B),~(~A\\/~B) |- A nne 17 19. ~(A/\\B),~(~A\\/~B),~B |- ~(~A\\/~B) prem 20. ~(A/\\B),~(~A\\/~B),~B |- ~B prem 21. ~(A/\\B),~(~A\\/~B),~B |- ~A\\/~B ori 20 22. ~(A/\\B),~(~A\\/~B) |- ~~B ni 19,21 23. ~(A/\\B),~(~A\\/~B) |- B nne 22 24. ~(A/\\B),~(~A\\/~B) |- A/\\B andi 18,23 25. ~(A/\\B),~(~A\\/~B) |- ~(A/\\B) prem 26. ~(A/\\B) |- ~~(~A\\/~B) ni 24,25 27. ~(A/\\B) |- (~A\\/~B) nne 26 28. |- ~(A/\\B)\u0026lt;-\u0026gt;(~A\\/~B) equivi 13,27 22.用自然推理系统证明：⊢A∧(B∨C)↔(A∧B)∨(A∧C) # Premise: Conclusion: A/\\(B\\/C)\u0026lt;-\u0026gt;(A/\\B)\\/(A/\\C) 1. A/\\B |- A/\\B prem 2. A/\\B |- A ande 1 3. A/\\B |- B ande 1 4. A/\\B |- B\\/C ori 3 5. A/\\B |- A/\\(B\\/C) andi 2,4 6. A/\\C |- A/\\C prem 7. A/\\C |- A ande 6 8. A/\\C |- C ande 6 9. A/\\C |- B\\/C ori 8 10. A/\\C |- A/\\(B\\/C) andi 7,9 11. (A/\\B)\\/(A/\\C) |- A/\\(B\\/C) ore 5,10 12. A/\\(B\\/C),B |- B prem 13. A/\\(B\\/C),B |- A/\\(B\\/C) prem 14. A/\\(B\\/C),B |- A ande 13 15. A/\\(B\\/C),B |- A/\\B andi 12,14 16. A/\\(B\\/C),B |- (A/\\B)\\/(A/\\C) ori 15 17. A/\\(B\\/C),~B |- A/\\(B\\/C) prem 18. A/\\(B\\/C),~B |- A ande 17 19. A/\\(B\\/C),~B |- B\\/C ande 17 20. B,~(~B/\\~C) |- ~(~B/\\~C) prem 21. B,~B/\\~C |- ~B/\\~C prem 22. B,~B/\\~C |- ~B ande 21 23. B,~B/\\~C |- B prem 24. B,~B/\\~C |- ~(~B/\\~C) ne 22,23 25. B |- ~(~B/\\~C) preme 20,24 26. C,~(~B/\\~C) |- ~(~B/\\~C) prem 27. C,~B/\\~C |- ~B/\\~C prem 28. C,~B/\\~C |- ~C ande 27 29. C,~B/\\~C |- C prem 30. C,~B/\\~C |- ~(~B/\\~C) ne 28,29 31. C |- ~(~B/\\~C) preme 26,30 32. B\\/C |- ~(~B/\\~C) ore 25,31 33. |- (B\\/C)-\u0026gt;~(~B/\\~C) impli 32 34. A/\\(B\\/C),~B,~C |- ~B prem 35. A/\\(B\\/C),~B,~C |- ~C prem 36. A/\\(B\\/C),~B,~C |- ~B/\\~C andi 34,35 37. A/\\(B\\/C),~B,~C |- B\\/C premi 19 38. A/\\(B\\/C) |- (B\\/C)-\u0026gt;~(~B/\\~C) premi 33 39. A/\\(B\\/C),~B |- (B\\/C)-\u0026gt;~(~B/\\~C) premi 38 40. A/\\(B\\/C),~B,~C |- (B\\/C)-\u0026gt;~(~B/\\~C) premi 39 41. A/\\(B\\/C),~B,~C |- ~(~B/\\~C) imple 37,40 42. A/\\(B\\/C),~B |- ~~C ni 36,41 43. A/\\(B\\/C),~B |- C nne 42 44. A/\\(B\\/C),~B |- A/\\C andi 43,18 45. A/\\(B\\/C),~B |- (A/\\B)\\/(A/\\C) ori 44 46. A/\\(B\\/C) |- (A/\\B)\\/(A/\\C) preme 45,16 47. |- A/\\(B\\/C)\u0026lt;-\u0026gt;(A/\\B)\\/(A/\\C) equivi 46,11 23.用自然推理系统证明：⊢A∨(B∧C)↔(A∨B)∧(A∨C) # 可使用的导出规则： 1.¬A∨¬B⊢¬(A∧B) 2.¬A∧¬B⊢¬(A∨B)\nPremise: Conclusion: A\\/(B/\\C)\u0026lt;-\u0026gt;(A\\/B)/\\(A\\/C) 1. A |- A prem 2. A |- A\\/B ori 1 3. A |- A\\/C ori 1 4. A |- (A\\/B)/\\(A\\/C) andi 2,3 5. B/\\C |- B/\\C prem 6. B/\\C |- B ande 5 7. B/\\C |- A\\/B ori 6 8. B/\\C |- C ande 5 9. B/\\C |- A\\/C ori 8 10. B/\\C |- (A\\/B)/\\(A\\/C) andi 7,9 11. A\\/(B/\\C) |- (A\\/B)/\\(A\\/C) ore 4,10 12. (A\\/B)/\\(A\\/C),A |- A prem 13. (A\\/B)/\\(A\\/C),A |- A\\/(B/\\C) ori 12 14. (A\\/B)/\\(A\\/C),~A,~B |- (A\\/B)/\\(A\\/C) prem 15. (A\\/B)/\\(A\\/C),~A,~B |- A\\/B ande 14 16. (A\\/B)/\\(A\\/C),~A,~B |- ~(A\\/B) dr 17. (A\\/B)/\\(A\\/C),~A |- ~~B ni 15,16 18. (A\\/B)/\\(A\\/C),~A |- B nne 17 19. (A\\/B)/\\(A\\/C),~A,~C |- (A\\/B)/\\(A\\/C) prem 20. (A\\/B)/\\(A\\/C),~A,~C |- A\\/C ande 19 21. (A\\/B)/\\(A\\/C),~A,~C |- ~(A\\/C) dr 22. (A\\/B)/\\(A\\/C),~A |- ~~C ni 20,21 23. (A\\/B)/\\(A\\/C),~A |- C nne 22 24. (A\\/B)/\\(A\\/C),~A |- B/\\C andi 23,18 25. (A\\/B)/\\(A\\/C),~A |- A\\/(B/\\C) ori 24 26. (A\\/B)/\\(A\\/C) |- A\\/(B/\\C) preme 13,25 27. |- A\\/(B/\\C)\u0026lt;-\u0026gt;(A\\/B)/\\(A\\/C) equivi 26,11 24.用自然推理系统证明：⊢A∨F↔A # Premise: Conclusion: A\\/F\u0026lt;-\u0026gt;A 1. A |- A prem 2. F |- ~F fi 3. F |- F prem 4. F |- A ne 2,3 5. A\\/F |- A ore 1,4 6. A |- A prem 7. A |- A\\/F ori 6 8. |- A\\/F\u0026lt;-\u0026gt;A equivi 5,7 25.用自然推理系统证明：⊢A∧T↔A # Premise: Conclusion: A/\\T\u0026lt;-\u0026gt;A 1. A |- A prem 2. A |- T ti 3. A |- A/\\T andi 1,2 4. A/\\T,~A |- ~A prem 5. A/\\T,~A |- A/\\T prem 6. A/\\T,~A |- A ande 5 7. A/\\T |- ~~A ni 4,6 8. A/\\T |- A nne 7 9. |- A/\\T\u0026lt;-\u0026gt;A equivi 3,8 26.用自然推理系统证明：⊢(A→B)↔(¬A∨B) # Premise: Conclusion: (A-\u0026gt;B)\u0026lt;-\u0026gt;~A\\/B 1. B,A |- B prem 2. B |- A-\u0026gt;B impli 1 3. ~A,A |- A prem 4. ~A,A |- ~A prem 5. ~A,A |- B ne 3,4 6. ~A |- A-\u0026gt;B impli 5 7. ~A\\/B |- A-\u0026gt;B ore 2,6 8. A-\u0026gt;B,A,~B |- A prem 9. A-\u0026gt;B,A,~B |- A-\u0026gt;B prem 10. A-\u0026gt;B,A,~B |- B imple 8,9 11. A-\u0026gt;B,A,~B |- ~B prem 12. A-\u0026gt;B,A |- ~~B ni 10,11 13. A-\u0026gt;B,A |- B nne 12 14. A-\u0026gt;B,~A |- ~A prem 15. A-\u0026gt;B,~A |- ~A\\/B ori 14 16. A-\u0026gt;B,A |- ~A\\/B ori 13 17. A-\u0026gt;B |- ~A\\/B preme 15,16 18. |- (A-\u0026gt;B)\u0026lt;-\u0026gt;~A\\/B equivi 7,17 27.用自然推理系统证明：¬(A→B)⊢A # Premise: ~(A-\u0026gt;B) Conclusion: A 1. ~(A-\u0026gt;B),~A,A |- A prem 2. ~(A-\u0026gt;B),~A,A |- ~A prem 3. ~(A-\u0026gt;B),~A,A |- B ne 1,2 4. ~(A-\u0026gt;B),~A |- A-\u0026gt;B impli 3 5. ~(A-\u0026gt;B),~A |- ~(A-\u0026gt;B) prem 6. ~(A-\u0026gt;B) |- ~~A ni 4,5 7. ~(A-\u0026gt;B) |- A nne 6 28.用自然推理系统证明：¬(A→B)⊢¬B # Premise: ~(A-\u0026gt;B) Conclusion: ~B 1. ~(A-\u0026gt;B),B,A |- B prem 2. ~(A-\u0026gt;B),B |- A-\u0026gt;B impli 1 3. ~(A-\u0026gt;B),B |- ~(A-\u0026gt;B) prem 4. ~(A-\u0026gt;B) |- ~B ni 2,3 29.用自然推理系统证明：⊢(∃x)(C→P(x))↔(C→(∃x)P(x)) # 可以使用的导出规则有： 1.¬(A→B)⊢A∧¬B 2.(∀x)(¬P(x))⊢¬(∃x)P(x) 3.¬(∃x)P(x)⊢(∀x)(¬P(x))\nPremise: Conclusion: ((Exist x)(C-\u0026gt;P(x)))\u0026lt;-\u0026gt;(C-\u0026gt;(Exist x)P(x)) 1. C-\u0026gt;P(x),C |- C prem 2. C-\u0026gt;P(x),C |- C-\u0026gt;P(x) prem 3. C-\u0026gt;P(x),C |- P(x) imple 1,2 4. C-\u0026gt;P(x),C |- (Exist x)P(x) ei 3 (x/x) 5. C-\u0026gt;P(x) |- C-\u0026gt;(Exist x)P(x) impli 4 6. (Exist x)(C-\u0026gt;P(x)) |- C-\u0026gt;(Exist x)P(x) lei 5 7. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)),C |- C prem 8. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)),C |- C-\u0026gt;(Exist x)P(x) prem 9. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)),C |- (Exist x)P(x) imple 7,8 10. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- ~(Exist x)(C-\u0026gt;P(x)) prem 11. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- (All x)(~(C-\u0026gt;P(x))) dr 12. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- ~(C-\u0026gt;P(x)) ae 11 (x/x) 13. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- C/\\~P(x) dr 14. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- C ande 13 15. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- ~P(x) ande 13 16. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- (All x)(~P(x)) ai 15 17. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- ~(Exist x)P(x) dr 18. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)),C |- ~(Exist x)P(x) premi 17 19. C-\u0026gt;(Exist x)P(x),~(Exist x)(C-\u0026gt;P(x)) |- ~C ni 9,18 20. C-\u0026gt;(Exist x)P(x) |- ~(~(Exist x)(C-\u0026gt;P(x))) ni 14,19 21. C-\u0026gt;(Exist x)P(x) |- (Exist x)(C-\u0026gt;P(x)) nne 20 21. |- ((Exist x)(C-\u0026gt;P(x)))\u0026lt;-\u0026gt;(C-\u0026gt;(Exist x)P(x)) equivi 6,21 30.用自然推理系统证明：(∃x)(P(x)→C)⊢(∀x)P(x)→C # Premise: (Exist x)(P(x)-\u0026gt;C) Conclusion: (All x)P(x)-\u0026gt;C 1. P(x)-\u0026gt;C,P(x) |- P(x) prem 2. P(x)-\u0026gt;C,P(x) |- P(x)-\u0026gt;C prem 3. P(x)-\u0026gt;C,P(x) |- C imple 1,2 4. P(x)-\u0026gt;C,(All x)P(x) |- C lai 3 5. P(x)-\u0026gt;C |- (All x)P(x)-\u0026gt;C impli 4 6. (Exist x)(P(x)-\u0026gt;C) |- (All x)P(x)-\u0026gt;C lei 5 31.用自然推理系统证明：(∀x)P(x)→C⊢(∃x)(P(x)→C) # 可以使用的导出规则： 1.¬(A→B)⊢A∧¬B 2.¬(∃x)P(x)⊢(∀x)(¬P(x))\nPremise: (All x)P(x)-\u0026gt;C Conclusion: (Exist x)(P(x)-\u0026gt;C) 1. (All x)P(x)-\u0026gt;C,P(b) |- (All x)P(x)-\u0026gt;C prem 2. (All x)P(x)-\u0026gt;C,P(b) |- P(b) prem 3. (All x)P(x)-\u0026gt;C,P(b) |- (All x)P(x) ai 2 4. (All x)P(x)-\u0026gt;C,P(b) |- C imple 1,3 5. (All x)P(x)-\u0026gt;C |- P(b)-\u0026gt;C impli 4 6. (All x)P(x)-\u0026gt;C |- (Exist x)(P(x)-\u0026gt;C) ei 5 (b/x) 32.用自然推理系统证明：(∃x)(P(x)∨C)⊢(∃x)P(x)∨C # Premise: (Exist x)(P(x)\\/C) Conclusion: (Exist x)P(x)\\/C 1. P(x) |- P(x) prem 2. C |- C prem 3. P(x) |- (Exist x)P(x) ei 1 (x/x) 4. P(x) |- (Exist x)P(x)\\/C ori 3 5. C |- (Exist x)P(x)\\/C ori 2 6. P(x)\\/C |- (Exist x)P(x)\\/C ore 4,5 7. (Exist x)(P(x)\\/C) |- (Exist x)P(x)\\/C lei 6 33.用自然推理系统证明：(∃x)P(x)∨C⊢(∃x)(P(x)∨C) # Premise: (Exist x)P(x)\\/C Conclusion: (Exist x)(P(x)\\/C) 1. P(x) |- P(x) prem 2. C |- C prem 3. C |- P(x)\\/C ori 2 4. C |- (Exist x)(P(x)\\/C) ei 3 (x/x) 5. P(x) |- P(x)\\/C ori 1 6. (Exist x)P(x) |- (Exist x)(P(x)\\/C) eei 5 7. (Exist x)P(x)\\/C |- (Exist x)(P(x)\\/C) ore 4,6 34.用自然推理系统证明：(∀x)(P(x)∧C)⊢(∀x)P(x)∧C # Premise: (All x)(P(x)/\\C) Conclusion: (All x)P(x)/\\C 1. P(x)/\\C |- P(x)/\\C prem 2. P(x)/\\C |- P(x) ande 1 3. P(x)/\\C |- C ande 1 4. (All x)(P(x)/\\C) |- (All x)P(x) aai 2 5. (All x)(P(x)/\\C) |- C lai 3 6. (All x)(P(x)/\\C) |- (All x)P(x)/\\C andi 4,5 35.用自然推理系统证明：(∀x)P(x)∧C⊢(∀x)(P(x)∧C) # Premise: (All x)P(x)/\\C Conclusion: (All x)(P(x)/\\C) 1. (All x)P(x)/\\C |- (All x)P(x)/\\C prem 2. (All x)P(x)/\\C |- C ande 1 3. (All x)P(x)/\\C |- (All x)P(x) ande 1 4. (All x)P(x)/\\C |- P(x) ae 3 (x/x) 5. (All x)P(x)/\\C |- P(x)/\\C andi 2,4 6. (All x)P(x)/\\C |- (All x)(P(x)/\\C) ai 5 36.用自然推理系统证明：¬(∀x)P(x)⊢(∃x)¬P(x) # Premise: ~(All x)P(x) Conclusion: (Exist x)(~P(x)) 1. ~(All x)P(x),~(Exist x)(~P(x)) |- ~(All x)P(x) prem 2. ~(All x)P(x),~(Exist x)(~P(x)),~P(b) |- ~(Exist x)(~P(x)) prem 3. ~(All x)P(x),~(Exist x)(~P(x)),~P(b) |- ~P(b) prem 4. ~(All x)P(x),~(Exist x)(~P(x)),~P(b) |- (Exist x)(~P(x)) ei 3 (b/x) 5. ~(All x)P(x),~(Exist x)(~P(x)) |- ~~P(b) ni 2,4 6. ~(All x)P(x),~(Exist x)(~P(x)) |- P(b) nne 5 7. ~(All x)P(x),~(Exist x)(~P(x)) |- (All x)P(x) ai 6 8. ~(All x)P(x) |- ~~(Exist x)(~P(x)) ni 1,7 9. ~(All x)P(x) |- (Exist x)(~P(x)) nne 8 37.用自然推理系统证明：(∃x)¬P(x)⊢¬(∀x)P(x) # Premise: (Exist x)(~P(x)) Conclusion: ~(All x)P(x) 1. ~P(b),(All x)P(x) |- ~P(b) prem 2. ~P(b),(All x)P(x) |- (All x)P(x) prem 3. ~P(b),(All x)P(x) |- P(b) ae 2 (b/x) 4. ~P(b) |- ~(All x)P(x) ni 1,3 5. (Exist x)(~P(x)) |- ~(All x)P(x) lei 4 38.用自然推理系统证明：(∃x)(P(x)∧Q(x))⊢(∃x)P(x)∧(∃x)Q(x) # Premise: (Exist x)(P(x)/\\Q(x)) Conclusion: (Exist x)P(x)/\\(Exist x)Q(x) 1. P(x)/\\Q(x) |- P(x)/\\Q(x) prem 2. P(x)/\\Q(x) |- P(x) ande 1 3. P(x)/\\Q(x) |- Q(x) ande 1 4. (Exist x)(P(x)/\\Q(x)) |- (Exist x)P(x) eei 2 5. (Exist x)(P(x)/\\Q(x)) |- (Exist x)Q(x) eei 3 6. (Exist x)(P(x)/\\Q(x)) |- (Exist x)P(x)/\\(Exist x)Q(x) andi 4,5 ","externalUrl":null,"permalink":"/post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/","section":"文章","summary":"\u003ch2 class=\"relative group\"\u003e相关知识 \n    \u003cdiv id=\"%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e1.目前支持检查的规则 \n    \u003cdiv id=\"1%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8C%81%E6%A3%80%E6%9F%A5%E7%9A%84%E8%A7%84%E5%88%99\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8C%81%E6%A3%80%E6%9F%A5%E7%9A%84%E8%A7%84%E5%88%99\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/1_hu4833511903358777917.png 330w,\n        /post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/1_hu5197174662685482484.png 660w,\n        /post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/1_hu15964085931132474896.png 1024w,\n        /post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/1_hu6489155857605942469.png 2x\"\n        src=\"/post/%E8%87%AA%E7%84%B6%E6%8E%A8%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/1_hu5197174662685482484.png\"\n        alt=\"\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"自然推理系统实训","type":"post"}]